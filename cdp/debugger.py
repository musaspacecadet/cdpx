# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Debugger

Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
breakpoints, stepping through execution, exploring stack traces, etc."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from deprecated.sphinx import deprecated
from . import runtime
None


@dataclass
class BreakLocation:
    script_id: runtime.ScriptId
    line_number: int
    column_number: typing.Optional[int] = None
    type_: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['scriptId'] = self.script_id.to_json()
        json_data['lineNumber'] = self.line_number
        if self.column_number is not None:
            json_data['columnNumber'] = self.column_number
        if self.type_ is not None:
            json_data['type'] = self.type_
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BreakLocation:
        return cls(script_id=runtime.ScriptId.from_json(json_obj['scriptId'
            ]), line_number=json_obj['lineNumber'], column_number=json_obj[
            'columnNumber'] if json_obj.get('columnNumber') is not None else
            None, type_=json_obj['type'] if json_obj.get('type') is not
            None else None)


@dataclass
class CallFrame:
    """JavaScript call frame. Array of call frames form the call stack."""
    call_frame_id: CallFrameId
    function_name: str
    location: Location
    url: str
    scope_chain: typing.List[Scope]
    this: runtime.RemoteObject
    function_location: typing.Optional[Location] = None
    return_value: typing.Optional[runtime.RemoteObject] = None
    can_be_restarted: typing.Optional[bool] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['callFrameId'] = self.call_frame_id.to_json()
        json_data['functionName'] = self.function_name
        json_data['location'] = self.location.to_json()
        json_data['url'] = self.url
        json_data['scopeChain'] = [i.to_json() for i in self.scope_chain]
        json_data['this'] = self.this.to_json()
        if self.function_location is not None:
            json_data['functionLocation'] = self.function_location.to_json()
        if self.return_value is not None:
            json_data['returnValue'] = self.return_value.to_json()
        if self.can_be_restarted is not None:
            json_data['canBeRestarted'] = self.can_be_restarted
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->CallFrame:
        return cls(call_frame_id=CallFrameId.from_json(json_obj[
            'callFrameId']), function_name=json_obj['functionName'],
            location=Location.from_json(json_obj['location']), url=json_obj
            ['url'], scope_chain=[Scope.from_json(i) for i in json_obj[
            'scopeChain']], this=runtime.RemoteObject.from_json(json_obj[
            'this']), function_location=Location.from_json(json_obj[
            'functionLocation']) if json_obj.get('functionLocation') is not
            None else None, return_value=runtime.RemoteObject.from_json(
            json_obj['returnValue']) if json_obj.get('returnValue') is not
            None else None, can_be_restarted=json_obj['canBeRestarted'] if 
            json_obj.get('canBeRestarted') is not None else None)


@dataclass
class DebugSymbols:
    """Debug symbols available for a wasm script."""
    type_: str
    external_url: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_
        if self.external_url is not None:
            json_data['externalURL'] = self.external_url
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DebugSymbols:
        return cls(type_=json_obj['type'], external_url=json_obj[
            'externalURL'] if json_obj.get('externalURL') is not None else None
            )


@dataclass
class Location:
    """Location in the source code."""
    script_id: runtime.ScriptId
    line_number: int
    column_number: typing.Optional[int] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['scriptId'] = self.script_id.to_json()
        json_data['lineNumber'] = self.line_number
        if self.column_number is not None:
            json_data['columnNumber'] = self.column_number
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Location:
        return cls(script_id=runtime.ScriptId.from_json(json_obj['scriptId'
            ]), line_number=json_obj['lineNumber'], column_number=json_obj[
            'columnNumber'] if json_obj.get('columnNumber') is not None else
            None)


@dataclass
class LocationRange:
    """Location range within one script."""
    script_id: runtime.ScriptId
    start: ScriptPosition
    end: ScriptPosition

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['scriptId'] = self.script_id.to_json()
        json_data['start'] = self.start.to_json()
        json_data['end'] = self.end.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->LocationRange:
        return cls(script_id=runtime.ScriptId.from_json(json_obj['scriptId'
            ]), start=ScriptPosition.from_json(json_obj['start']), end=
            ScriptPosition.from_json(json_obj['end']))


@dataclass
class ResolvedBreakpoint:
    breakpoint_id: BreakpointId
    location: Location

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['breakpointId'] = self.breakpoint_id.to_json()
        json_data['location'] = self.location.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ResolvedBreakpoint:
        return cls(breakpoint_id=BreakpointId.from_json(json_obj[
            'breakpointId']), location=Location.from_json(json_obj['location'])
            )


@dataclass
class Scope:
    """Scope description."""
    type_: str
    object_: runtime.RemoteObject
    name: typing.Optional[str] = None
    start_location: typing.Optional[Location] = None
    end_location: typing.Optional[Location] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_
        json_data['object'] = self.object_.to_json()
        if self.name is not None:
            json_data['name'] = self.name
        if self.start_location is not None:
            json_data['startLocation'] = self.start_location.to_json()
        if self.end_location is not None:
            json_data['endLocation'] = self.end_location.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Scope:
        return cls(type_=json_obj['type'], object_=runtime.RemoteObject.
            from_json(json_obj['object']), name=json_obj['name'] if 
            json_obj.get('name') is not None else None, start_location=
            Location.from_json(json_obj['startLocation']) if json_obj.get(
            'startLocation') is not None else None, end_location=Location.
            from_json(json_obj['endLocation']) if json_obj.get(
            'endLocation') is not None else None)


@dataclass
class ScriptPosition:
    """Location in the source code."""
    line_number: int
    column_number: int

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['lineNumber'] = self.line_number
        json_data['columnNumber'] = self.column_number
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ScriptPosition:
        return cls(line_number=json_obj['lineNumber'], column_number=
            json_obj['columnNumber'])


@dataclass
class SearchMatch:
    """Search match for resource."""
    line_number: float
    line_content: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['lineNumber'] = self.line_number
        json_data['lineContent'] = self.line_content
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SearchMatch:
        return cls(line_number=json_obj['lineNumber'], line_content=
            json_obj['lineContent'])


@dataclass
class WasmDisassemblyChunk:
    lines: typing.List[str]
    bytecode_offsets: typing.List[int]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['lines'] = [i for i in self.lines]
        json_data['bytecodeOffsets'] = [i for i in self.bytecode_offsets]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->WasmDisassemblyChunk:
        return cls(lines=[i for i in json_obj['lines']], bytecode_offsets=[
            i for i in json_obj['bytecodeOffsets']])


class ScriptLanguage(enum.Enum):
    """Enum of possible script languages."""
    JAVA_SCRIPT = 'JavaScript'
    WEB_ASSEMBLY = 'WebAssembly'

    @classmethod
    def from_json(cls, json: str) ->ScriptLanguage:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ScriptLanguage.{}>'.format(self.value)


class BreakpointId(str):
    """Breakpoint identifier.

Represents the CDP type 'Debugger.BreakpointId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->BreakpointId:
        return cls(json)

    def __repr__(self) ->str:
        return 'BreakpointId({})'.format(super().__repr__())


class CallFrameId(str):
    """Call frame identifier.

Represents the CDP type 'Debugger.CallFrameId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->CallFrameId:
        return cls(json)

    def __repr__(self) ->str:
        return 'CallFrameId({})'.format(super().__repr__())


def continue_to_location(location: Location, target_call_frames: typing.
    Optional[str]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Continues execution until specific location is reached.

:param ...:

:param location: Location to continue to.

:param target_call_frames: *(Optional)*"""
    params_dict: T_JSON_DICT = dict()
    params_dict['location'] = location.to_json()
    if target_call_frames is not None:
        params_dict['targetCallFrames'] = target_call_frames
    cmd_dict = {'method': 'Debugger.continueToLocation', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables debugger for given page."""
    cmd_dict = {'method': 'Debugger.disable'}
    json_result = yield cmd_dict
    return None


def disassemble_wasm_module(script_id: runtime.ScriptId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[str], int,
    typing.List[int], WasmDisassemblyChunk]]:
    """**EXPERIMENTAL**


:param ...:

:param script_id: Id of the script to disassemble


:returns: A tuple with the following items:

    1. **streamId** - *(Optional)* For large modules, return a stream from which additional chunks of disassembly can be read successively.
    2. **totalNumberOfLines** - The total number of lines in the disassembly text.
    3. **functionBodyOffsets** - The offsets of all function bodies, in the format [start1, end1, start2, end2, ...] where all ends are exclusive.
    4. **chunk** - The first chunk of disassembly."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    cmd_dict = {'method': 'Debugger.disassembleWasmModule', 'params':
        params_dict}
    json_result = yield cmd_dict
    return json_result['streamId'] if json_result.get('streamId'
        ) is not None else None, json_result['totalNumberOfLines'], [i for
        i in json_result['functionBodyOffsets']
        ], WasmDisassemblyChunk.from_json(json_result['chunk'])


def enable(max_scripts_cache_size: typing.Optional[float]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.UniqueDebuggerId]:
    """Enables debugger for the given page. Clients should not assume that the debugging has been
enabled until the result for this command is received.

:param ...:

:param max_scripts_cache_size: **(EXPERIMENTAL)** *(Optional)* The maximum size in bytes of collected scripts (not referenced by other heap objects) the debugger can hold. Puts no limit if parameter is omitted.


:returns: Unique identifier of the debugger."""
    params_dict: T_JSON_DICT = dict()
    if max_scripts_cache_size is not None:
        params_dict['maxScriptsCacheSize'] = max_scripts_cache_size
    cmd_dict = {'method': 'Debugger.enable', 'params': params_dict}
    json_result = yield cmd_dict
    return runtime.UniqueDebuggerId.from_json(json_result['debuggerId'])


def evaluate_on_call_frame(call_frame_id: CallFrameId, expression: str,
    object_group: typing.Optional[str]=None, include_command_line_api:
    typing.Optional[bool]=None, silent: typing.Optional[bool]=None,
    return_by_value: typing.Optional[bool]=None, generate_preview: typing.
    Optional[bool]=None, throw_on_side_effect: typing.Optional[bool]=None,
    timeout: typing.Optional[runtime.TimeDelta]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.Tuple[runtime.RemoteObject, typing.
    Optional[runtime.ExceptionDetails]]]:
    """Evaluates expression on a given call frame.

:param ...:

:param call_frame_id: Call frame identifier to evaluate on.

:param expression: Expression to evaluate.

:param object_group: *(Optional)* String object group name to put result into (allows rapid releasing resulting object handles using ``releaseObjectGroup``).

:param include_command_line_api: *(Optional)* Specifies whether command line API should be available to the evaluated expression, defaults to false.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.

:param throw_on_side_effect: *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation.

:param timeout: **(EXPERIMENTAL)** *(Optional)* Terminate execution after timing out (number of milliseconds).


:returns: A tuple with the following items:

    1. **result** - Object wrapper for the evaluation result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['callFrameId'] = call_frame_id.to_json()
    params_dict['expression'] = expression
    if object_group is not None:
        params_dict['objectGroup'] = object_group
    if include_command_line_api is not None:
        params_dict['includeCommandLineAPI'] = include_command_line_api
    if silent is not None:
        params_dict['silent'] = silent
    if return_by_value is not None:
        params_dict['returnByValue'] = return_by_value
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    if throw_on_side_effect is not None:
        params_dict['throwOnSideEffect'] = throw_on_side_effect
    if timeout is not None:
        params_dict['timeout'] = timeout.to_json()
    cmd_dict = {'method': 'Debugger.evaluateOnCallFrame', 'params': params_dict
        }
    json_result = yield cmd_dict
    return runtime.RemoteObject.from_json(json_result['result']
        ), runtime.ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def get_possible_breakpoints(start: Location, end: typing.Optional[Location
    ]=None, restrict_to_function: typing.Optional[bool]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[BreakLocation]]:
    """Returns possible locations for breakpoint. scriptId in start and end range locations should be
the same.

:param ...:

:param start: Start of range to search possible breakpoint locations in.

:param end: *(Optional)* End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.

:param restrict_to_function: *(Optional)* Only consider locations which are in the same (non-nested) function as start.


:returns: List of the possible breakpoint locations."""
    params_dict: T_JSON_DICT = dict()
    params_dict['start'] = start.to_json()
    if end is not None:
        params_dict['end'] = end.to_json()
    if restrict_to_function is not None:
        params_dict['restrictToFunction'] = restrict_to_function
    cmd_dict = {'method': 'Debugger.getPossibleBreakpoints', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [BreakLocation.from_json(i) for i in json_result['locations']]


def get_script_source(script_id: runtime.ScriptId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, typing.Optional[str]]]:
    """Returns source for the script with given id.

:param ...:

:param script_id: Id of the script to get source for.


:returns: A tuple with the following items:

    1. **scriptSource** - Script source (empty in case of Wasm bytecode).
    2. **bytecode** - *(Optional)* Wasm bytecode. (Encoded as a base64 string when passed over JSON)"""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    cmd_dict = {'method': 'Debugger.getScriptSource', 'params': params_dict}
    json_result = yield cmd_dict
    return json_result['scriptSource'], json_result['bytecode'
        ] if json_result.get('bytecode') is not None else None


def get_stack_trace(stack_trace_id: runtime.StackTraceId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, runtime.StackTrace]:
    """Returns stack trace with given ``stackTraceId``.

**EXPERIMENTAL**

:param ...:

:param stack_trace_id:


:returns:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['stackTraceId'] = stack_trace_id.to_json()
    cmd_dict = {'method': 'Debugger.getStackTrace', 'params': params_dict}
    json_result = yield cmd_dict
    return runtime.StackTrace.from_json(json_result['stackTrace'])


@deprecated(version='1.3')
def get_wasm_bytecode(script_id: runtime.ScriptId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, str]:
    """This command is deprecated. Use getScriptSource instead.

.. deprecated:: 1.3

:param ...:

:param script_id: Id of the Wasm script to get source for.


:returns: Script source. (Encoded as a base64 string when passed over JSON)"""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    cmd_dict = {'method': 'Debugger.getWasmBytecode', 'params': params_dict}
    json_result = yield cmd_dict
    return json_result['bytecode']


def next_wasm_disassembly_chunk(stream_id: str) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, WasmDisassemblyChunk]:
    """Disassemble the next chunk of lines for the module corresponding to the
stream. If disassembly is complete, this API will invalidate the streamId
and return an empty chunk. Any subsequent calls for the now invalid stream
will return errors.

**EXPERIMENTAL**

:param ...:

:param stream_id:


:returns: The next chunk of disassembly."""
    params_dict: T_JSON_DICT = dict()
    params_dict['streamId'] = stream_id
    cmd_dict = {'method': 'Debugger.nextWasmDisassemblyChunk', 'params':
        params_dict}
    json_result = yield cmd_dict
    return WasmDisassemblyChunk.from_json(json_result['chunk'])


def pause() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Stops on the next JavaScript statement."""
    cmd_dict = {'method': 'Debugger.pause'}
    json_result = yield cmd_dict
    return None


@deprecated(version='1.3')
def pause_on_async_call(parent_stack_trace_id: runtime.StackTraceId
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param parent_stack_trace_id: Debugger will pause when async call with given stack trace is started."""
    params_dict: T_JSON_DICT = dict()
    params_dict['parentStackTraceId'] = parent_stack_trace_id.to_json()
    cmd_dict = {'method': 'Debugger.pauseOnAsyncCall', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def remove_breakpoint(breakpoint_id: BreakpointId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Removes JavaScript breakpoint.

:param ...:

:param breakpoint_id:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['breakpointId'] = breakpoint_id.to_json()
    cmd_dict = {'method': 'Debugger.removeBreakpoint', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def restart_frame(call_frame_id: CallFrameId, mode: typing.Optional[str]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List
    [CallFrame], typing.Optional[runtime.StackTrace], typing.Optional[
    runtime.StackTraceId]]]:
    """Restarts particular call frame from the beginning. The old, deprecated
behavior of ``restartFrame`` is to stay paused and allow further CDP commands
after a restart was scheduled. This can cause problems with restarting, so
we now continue execution immediatly after it has been scheduled until we
reach the beginning of the restarted frame.

To stay back-wards compatible, ``restartFrame`` now expects a ``mode``
parameter to be present. If the ``mode`` parameter is missing, ``restartFrame``
errors out.

The various return values are deprecated and ``callFrames`` is always empty.
Use the call frames from the ``Debugger#paused`` events instead, that fires
once V8 pauses at the beginning of the restarted function.

:param ...:

:param call_frame_id: Call frame identifier to evaluate on.

:param mode: **(EXPERIMENTAL)** *(Optional)* The ``mode`` parameter must be present and set to 'StepInto', otherwise ``restartFrame`` will error out.


:returns: A tuple with the following items:

    1. **callFrames** - New stack trace.
    2. **asyncStackTrace** - *(Optional)* Async stack trace, if any.
    3. **asyncStackTraceId** - *(Optional)* Async stack trace, if any."""
    params_dict: T_JSON_DICT = dict()
    params_dict['callFrameId'] = call_frame_id.to_json()
    if mode is not None:
        params_dict['mode'] = mode
    cmd_dict = {'method': 'Debugger.restartFrame', 'params': params_dict}
    json_result = yield cmd_dict
    return [CallFrame.from_json(i) for i in json_result['callFrames']
        ], runtime.StackTrace.from_json(json_result['asyncStackTrace']
        ) if json_result.get('asyncStackTrace'
        ) is not None else None, runtime.StackTraceId.from_json(json_result
        ['asyncStackTraceId']) if json_result.get('asyncStackTraceId'
        ) is not None else None


def resume(terminate_on_resume: typing.Optional[bool]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Resumes JavaScript execution.

:param ...:

:param terminate_on_resume: *(Optional)* Set to true to terminate execution upon resuming execution. In contrast to Runtime.terminateExecution, this will allows to execute further JavaScript (i.e. via evaluation) until execution of the paused code is actually resumed, at which point termination is triggered. If execution is currently not paused, this parameter has no effect."""
    params_dict: T_JSON_DICT = dict()
    if terminate_on_resume is not None:
        params_dict['terminateOnResume'] = terminate_on_resume
    cmd_dict = {'method': 'Debugger.resume', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def search_in_content(script_id: runtime.ScriptId, query: str,
    case_sensitive: typing.Optional[bool]=None, is_regex: typing.Optional[
    bool]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[
    SearchMatch]]:
    """Searches for given string in script content.

:param ...:

:param script_id: Id of the script to search in.

:param query: String to search for.

:param case_sensitive: *(Optional)* If true, search is case sensitive.

:param is_regex: *(Optional)* If true, treats string parameter as regex.


:returns: List of search matches."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    params_dict['query'] = query
    if case_sensitive is not None:
        params_dict['caseSensitive'] = case_sensitive
    if is_regex is not None:
        params_dict['isRegex'] = is_regex
    cmd_dict = {'method': 'Debugger.searchInContent', 'params': params_dict}
    json_result = yield cmd_dict
    return [SearchMatch.from_json(i) for i in json_result['result']]


def set_async_call_stack_depth(max_depth: int) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Enables or disables async call stacks tracking.

:param ...:

:param max_depth: Maximum depth of async call stacks. Setting to ``0`` will effectively disable collecting async call stacks (default)."""
    params_dict: T_JSON_DICT = dict()
    params_dict['maxDepth'] = max_depth
    cmd_dict = {'method': 'Debugger.setAsyncCallStackDepth', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_blackbox_execution_contexts(unique_ids: typing.List[str]
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Replace previous blackbox execution contexts with passed ones. Forces backend to skip
stepping/pausing in scripts in these execution contexts. VM will try to leave blackboxed script by
performing 'step in' several times, finally resorting to 'step out' if unsuccessful.

**EXPERIMENTAL**

:param ...:

:param unique_ids: Array of execution context unique ids for the debugger to ignore."""
    params_dict: T_JSON_DICT = dict()
    params_dict['uniqueIds'] = [i for i in unique_ids]
    cmd_dict = {'method': 'Debugger.setBlackboxExecutionContexts', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_blackbox_patterns(patterns: typing.List[str], skip_anonymous:
    typing.Optional[bool]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    None]:
    """Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
scripts with url matching one of the patterns. VM will try to leave blackboxed script by
performing 'step in' several times, finally resorting to 'step out' if unsuccessful.

**EXPERIMENTAL**

:param ...:

:param patterns: Array of regexps that will be used to check script url for blackbox state.

:param skip_anonymous: *(Optional)* If true, also ignore scripts with no source url."""
    params_dict: T_JSON_DICT = dict()
    params_dict['patterns'] = [i for i in patterns]
    if skip_anonymous is not None:
        params_dict['skipAnonymous'] = skip_anonymous
    cmd_dict = {'method': 'Debugger.setBlackboxPatterns', 'params': params_dict
        }
    json_result = yield cmd_dict
    return None


def set_blackboxed_ranges(script_id: runtime.ScriptId, positions: typing.
    List[ScriptPosition]) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
Positions array contains positions where blackbox state is changed. First interval isn't
blackboxed. Array should be sorted.

**EXPERIMENTAL**

:param ...:

:param script_id: Id of the script.

:param positions:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    params_dict['positions'] = [i.to_json() for i in positions]
    cmd_dict = {'method': 'Debugger.setBlackboxedRanges', 'params': params_dict
        }
    json_result = yield cmd_dict
    return None


def set_breakpoint(location: Location, condition: typing.Optional[str]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[
    BreakpointId, Location]]:
    """Sets JavaScript breakpoint at a given location.

:param ...:

:param location: Location to set breakpoint in.

:param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.


:returns: A tuple with the following items:

    1. **breakpointId** - Id of the created breakpoint for further reference.
    2. **actualLocation** - Location this breakpoint resolved into."""
    params_dict: T_JSON_DICT = dict()
    params_dict['location'] = location.to_json()
    if condition is not None:
        params_dict['condition'] = condition
    cmd_dict = {'method': 'Debugger.setBreakpoint', 'params': params_dict}
    json_result = yield cmd_dict
    return BreakpointId.from_json(json_result['breakpointId']
        ), Location.from_json(json_result['actualLocation'])


def set_breakpoint_by_url(line_number: int, url: typing.Optional[str]=None,
    url_regex: typing.Optional[str]=None, script_hash: typing.Optional[str]
    =None, column_number: typing.Optional[int]=None, condition: typing.
    Optional[str]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing
    .Tuple[BreakpointId, typing.List[Location]]]:
    """Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
command is issued, all existing parsed scripts will have breakpoints resolved and returned in
``locations`` property. Further matching script parsing will result in subsequent
``breakpointResolved`` events issued. This logical breakpoint will survive page reloads.

:param ...:

:param line_number: Line number to set breakpoint at.

:param url: *(Optional)* URL of the resources to set breakpoint on.

:param url_regex: *(Optional)* Regex pattern for the URLs of the resources to set breakpoints on. Either ``url`` or ``urlRegex`` must be specified.

:param script_hash: *(Optional)* Script hash of the resources to set breakpoint on.

:param column_number: *(Optional)* Offset in the line to set breakpoint at.

:param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.


:returns: A tuple with the following items:

    1. **breakpointId** - Id of the created breakpoint for further reference.
    2. **locations** - List of the locations this breakpoint resolved into upon addition."""
    params_dict: T_JSON_DICT = dict()
    params_dict['lineNumber'] = line_number
    if url is not None:
        params_dict['url'] = url
    if url_regex is not None:
        params_dict['urlRegex'] = url_regex
    if script_hash is not None:
        params_dict['scriptHash'] = script_hash
    if column_number is not None:
        params_dict['columnNumber'] = column_number
    if condition is not None:
        params_dict['condition'] = condition
    cmd_dict = {'method': 'Debugger.setBreakpointByUrl', 'params': params_dict}
    json_result = yield cmd_dict
    return BreakpointId.from_json(json_result['breakpointId']), [Location.
        from_json(i) for i in json_result['locations']]


def set_breakpoint_on_function_call(object_id: runtime.RemoteObjectId,
    condition: typing.Optional[str]=None) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, BreakpointId]:
    """Sets JavaScript breakpoint before each call to the given function.
If another function was created from the same source as a given one,
calling it will also trigger the breakpoint.

**EXPERIMENTAL**

:param ...:

:param object_id: Function object id.

:param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will stop on the breakpoint if this expression evaluates to true.


:returns: Id of the created breakpoint for further reference."""
    params_dict: T_JSON_DICT = dict()
    params_dict['objectId'] = object_id.to_json()
    if condition is not None:
        params_dict['condition'] = condition
    cmd_dict = {'method': 'Debugger.setBreakpointOnFunctionCall', 'params':
        params_dict}
    json_result = yield cmd_dict
    return BreakpointId.from_json(json_result['breakpointId'])


def set_breakpoints_active(active: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Activates / deactivates all breakpoints on the page.

:param ...:

:param active: New value for breakpoints active state."""
    params_dict: T_JSON_DICT = dict()
    params_dict['active'] = active
    cmd_dict = {'method': 'Debugger.setBreakpointsActive', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_instrumentation_breakpoint(instrumentation: str) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, BreakpointId]:
    """Sets instrumentation breakpoint.

:param ...:

:param instrumentation: Instrumentation name.


:returns: Id of the created breakpoint for further reference."""
    params_dict: T_JSON_DICT = dict()
    params_dict['instrumentation'] = instrumentation
    cmd_dict = {'method': 'Debugger.setInstrumentationBreakpoint', 'params':
        params_dict}
    json_result = yield cmd_dict
    return BreakpointId.from_json(json_result['breakpointId'])


def set_pause_on_exceptions(state: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions,
or caught exceptions, no exceptions. Initial pause on exceptions state is ``none``.

:param ...:

:param state: Pause on exceptions mode."""
    params_dict: T_JSON_DICT = dict()
    params_dict['state'] = state
    cmd_dict = {'method': 'Debugger.setPauseOnExceptions', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_return_value(new_value: runtime.CallArgument) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Changes return value in top frame. Available only at return break position.

**EXPERIMENTAL**

:param ...:

:param new_value: New return value."""
    params_dict: T_JSON_DICT = dict()
    params_dict['newValue'] = new_value.to_json()
    cmd_dict = {'method': 'Debugger.setReturnValue', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_script_source(script_id: runtime.ScriptId, script_source: str,
    dry_run: typing.Optional[bool]=None, allow_top_frame_editing: typing.
    Optional[bool]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    typing.Tuple[typing.Optional[typing.List[CallFrame]], typing.Optional[
    bool], typing.Optional[runtime.StackTrace], typing.Optional[runtime.
    StackTraceId], str, typing.Optional[runtime.ExceptionDetails]]]:
    """Edits JavaScript source live.

In general, functions that are currently on the stack can not be edited with
a single exception: If the edited function is the top-most stack frame and
that is the only activation of that function on the stack. In this case
the live edit will be successful and a ``Debugger.restartFrame`` for the
top-most function is automatically triggered.

:param ...:

:param script_id: Id of the script to edit.

:param script_source: New content of the script.

:param dry_run: *(Optional)* If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.

:param allow_top_frame_editing: **(EXPERIMENTAL)** *(Optional)* If true, then ``scriptSource`` is allowed to change the function on top of the stack as long as the top-most stack frame is the only activation of that function.


:returns: A tuple with the following items:

    1. **callFrames** - *(Optional)* New stack trace in case editing has happened while VM was stopped.
    2. **stackChanged** - *(Optional)* Whether current call stack  was modified after applying the changes.
    3. **asyncStackTrace** - *(Optional)* Async stack trace, if any.
    4. **asyncStackTraceId** - *(Optional)* Async stack trace, if any.
    5. **status** - Whether the operation was successful or not. Only ``Ok`` denotes a successful live edit while the other enum variants denote why the live edit failed.
    6. **exceptionDetails** - *(Optional)* Exception details if any. Only present when ``status`` is ``CompileError``."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    params_dict['scriptSource'] = script_source
    if dry_run is not None:
        params_dict['dryRun'] = dry_run
    if allow_top_frame_editing is not None:
        params_dict['allowTopFrameEditing'] = allow_top_frame_editing
    cmd_dict = {'method': 'Debugger.setScriptSource', 'params': params_dict}
    json_result = yield cmd_dict
    return [CallFrame.from_json(i) for i in json_result['callFrames']
        ] if json_result.get('callFrames') is not None else None, json_result[
        'stackChanged'] if json_result.get('stackChanged'
        ) is not None else None, runtime.StackTrace.from_json(json_result[
        'asyncStackTrace']) if json_result.get('asyncStackTrace'
        ) is not None else None, runtime.StackTraceId.from_json(json_result
        ['asyncStackTraceId']) if json_result.get('asyncStackTraceId'
        ) is not None else None, json_result['status'
        ], runtime.ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def set_skip_all_pauses(skip: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).

:param ...:

:param skip: New value for skip pauses state."""
    params_dict: T_JSON_DICT = dict()
    params_dict['skip'] = skip
    cmd_dict = {'method': 'Debugger.setSkipAllPauses', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_variable_value(scope_number: int, variable_name: str, new_value:
    runtime.CallArgument, call_frame_id: CallFrameId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Changes value of variable in a callframe. Object-based scopes are not supported and must be
mutated manually.

:param ...:

:param scope_number: 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.

:param variable_name: Variable name.

:param new_value: New variable value.

:param call_frame_id: Id of callframe that holds variable."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scopeNumber'] = scope_number
    params_dict['variableName'] = variable_name
    params_dict['newValue'] = new_value.to_json()
    params_dict['callFrameId'] = call_frame_id.to_json()
    cmd_dict = {'method': 'Debugger.setVariableValue', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def step_into(break_on_async_call: typing.Optional[bool]=None, skip_list:
    typing.Optional[typing.List[LocationRange]]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Steps into the function call.

:param ...:

:param break_on_async_call: **(EXPERIMENTAL)** *(Optional)* Debugger will pause on the execution of the first async task which was scheduled before next pause.

:param skip_list: **(EXPERIMENTAL)** *(Optional)* The skipList specifies location ranges that should be skipped on step into."""
    params_dict: T_JSON_DICT = dict()
    if break_on_async_call is not None:
        params_dict['breakOnAsyncCall'] = break_on_async_call
    if skip_list is not None:
        params_dict['skipList'] = [i.to_json() for i in skip_list]
    cmd_dict = {'method': 'Debugger.stepInto', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def step_out() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Steps out of the function call."""
    cmd_dict = {'method': 'Debugger.stepOut'}
    json_result = yield cmd_dict
    return None


def step_over(skip_list: typing.Optional[typing.List[LocationRange]]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Steps over the statement.

:param ...:

:param skip_list: **(EXPERIMENTAL)** *(Optional)* The skipList specifies location ranges that should be skipped on step over."""
    params_dict: T_JSON_DICT = dict()
    if skip_list is not None:
        params_dict['skipList'] = [i.to_json() for i in skip_list]
    cmd_dict = {'method': 'Debugger.stepOver', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@deprecated(version='1.3')
@event_class('Debugger.breakpointResolved')
@dataclass
class BreakpointResolved:
    """Fired when breakpoint is resolved to an actual script and location.
Deprecated in favor of ``resolvedBreakpoints`` in the ``scriptParsed`` event.

.. deprecated:: 1.3"""
    breakpoint_id: BreakpointId
    location: Location

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BreakpointResolved:
        return cls(breakpoint_id=BreakpointId.from_json(json_obj[
            'breakpointId']), location=Location.from_json(json_obj['location'])
            )


@event_class('Debugger.paused')
@dataclass
class Paused:
    """Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."""
    call_frames: typing.List[CallFrame]
    reason: str
    data: typing.Optional[T_JSON_DICT] = None
    hit_breakpoints: typing.Optional[typing.List[str]] = None
    async_stack_trace: typing.Optional[runtime.StackTrace] = None
    async_stack_trace_id: typing.Optional[runtime.StackTraceId] = None
    async_call_stack_trace_id: typing.Optional[runtime.StackTraceId] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Paused:
        return cls(call_frames=[CallFrame.from_json(i) for i in json_obj[
            'callFrames']], reason=json_obj['reason'], data=json_obj['data'
            ] if json_obj.get('data') is not None else None,
            hit_breakpoints=[i for i in json_obj['hitBreakpoints']] if 
            json_obj.get('hitBreakpoints') is not None else None,
            async_stack_trace=runtime.StackTrace.from_json(json_obj[
            'asyncStackTrace']) if json_obj.get('asyncStackTrace') is not
            None else None, async_stack_trace_id=runtime.StackTraceId.
            from_json(json_obj['asyncStackTraceId']) if json_obj.get(
            'asyncStackTraceId') is not None else None,
            async_call_stack_trace_id=runtime.StackTraceId.from_json(
            json_obj['asyncCallStackTraceId']) if json_obj.get(
            'asyncCallStackTraceId') is not None else None)


@event_class('Debugger.resumed')
@dataclass
class Resumed:
    """Fired when the virtual machine resumed execution."""
    pass

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Resumed:
        return cls()


@event_class('Debugger.scriptFailedToParse')
@dataclass
class ScriptFailedToParse:
    """Fired when virtual machine fails to parse the script."""
    script_id: runtime.ScriptId
    url: str
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    execution_context_id: runtime.ExecutionContextId
    hash_: str
    build_id: str
    execution_context_aux_data: typing.Optional[T_JSON_DICT] = None
    source_map_url: typing.Optional[str] = None
    has_source_url: typing.Optional[bool] = None
    is_module: typing.Optional[bool] = None
    length: typing.Optional[int] = None
    stack_trace: typing.Optional[runtime.StackTrace] = None
    code_offset: typing.Optional[int] = None
    script_language: typing.Optional[ScriptLanguage] = None
    embedder_name: typing.Optional[str] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ScriptFailedToParse:
        return cls(script_id=runtime.ScriptId.from_json(json_obj['scriptId'
            ]), url=json_obj['url'], start_line=json_obj['startLine'],
            start_column=json_obj['startColumn'], end_line=json_obj[
            'endLine'], end_column=json_obj['endColumn'],
            execution_context_id=runtime.ExecutionContextId.from_json(
            json_obj['executionContextId']), hash_=json_obj['hash'],
            build_id=json_obj['buildId'], execution_context_aux_data=
            json_obj['executionContextAuxData'] if json_obj.get(
            'executionContextAuxData') is not None else None,
            source_map_url=json_obj['sourceMapURL'] if json_obj.get(
            'sourceMapURL') is not None else None, has_source_url=json_obj[
            'hasSourceURL'] if json_obj.get('hasSourceURL') is not None else
            None, is_module=json_obj['isModule'] if json_obj.get('isModule'
            ) is not None else None, length=json_obj['length'] if json_obj.
            get('length') is not None else None, stack_trace=runtime.
            StackTrace.from_json(json_obj['stackTrace']) if json_obj.get(
            'stackTrace') is not None else None, code_offset=json_obj[
            'codeOffset'] if json_obj.get('codeOffset') is not None else
            None, script_language=ScriptLanguage.from_json(json_obj[
            'scriptLanguage']) if json_obj.get('scriptLanguage') is not
            None else None, embedder_name=json_obj['embedderName'] if 
            json_obj.get('embedderName') is not None else None)


@event_class('Debugger.scriptParsed')
@dataclass
class ScriptParsed:
    """Fired when virtual machine parses script. This event is also fired for all known and uncollected
scripts upon enabling debugger."""
    script_id: runtime.ScriptId
    url: str
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    execution_context_id: runtime.ExecutionContextId
    hash_: str
    build_id: str
    execution_context_aux_data: typing.Optional[T_JSON_DICT] = None
    is_live_edit: typing.Optional[bool] = None
    source_map_url: typing.Optional[str] = None
    has_source_url: typing.Optional[bool] = None
    is_module: typing.Optional[bool] = None
    length: typing.Optional[int] = None
    stack_trace: typing.Optional[runtime.StackTrace] = None
    code_offset: typing.Optional[int] = None
    script_language: typing.Optional[ScriptLanguage] = None
    debug_symbols: typing.Optional[typing.List[DebugSymbols]] = None
    embedder_name: typing.Optional[str] = None
    resolved_breakpoints: typing.Optional[typing.List[ResolvedBreakpoint]
        ] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ScriptParsed:
        return cls(script_id=runtime.ScriptId.from_json(json_obj['scriptId'
            ]), url=json_obj['url'], start_line=json_obj['startLine'],
            start_column=json_obj['startColumn'], end_line=json_obj[
            'endLine'], end_column=json_obj['endColumn'],
            execution_context_id=runtime.ExecutionContextId.from_json(
            json_obj['executionContextId']), hash_=json_obj['hash'],
            build_id=json_obj['buildId'], execution_context_aux_data=
            json_obj['executionContextAuxData'] if json_obj.get(
            'executionContextAuxData') is not None else None, is_live_edit=
            json_obj['isLiveEdit'] if json_obj.get('isLiveEdit') is not
            None else None, source_map_url=json_obj['sourceMapURL'] if 
            json_obj.get('sourceMapURL') is not None else None,
            has_source_url=json_obj['hasSourceURL'] if json_obj.get(
            'hasSourceURL') is not None else None, is_module=json_obj[
            'isModule'] if json_obj.get('isModule') is not None else None,
            length=json_obj['length'] if json_obj.get('length') is not None
             else None, stack_trace=runtime.StackTrace.from_json(json_obj[
            'stackTrace']) if json_obj.get('stackTrace') is not None else
            None, code_offset=json_obj['codeOffset'] if json_obj.get(
            'codeOffset') is not None else None, script_language=
            ScriptLanguage.from_json(json_obj['scriptLanguage']) if 
            json_obj.get('scriptLanguage') is not None else None,
            debug_symbols=[DebugSymbols.from_json(i) for i in json_obj[
            'debugSymbols']] if json_obj.get('debugSymbols') is not None else
            None, embedder_name=json_obj['embedderName'] if json_obj.get(
            'embedderName') is not None else None, resolved_breakpoints=[
            ResolvedBreakpoint.from_json(i) for i in json_obj[
            'resolvedBreakpoints']] if json_obj.get('resolvedBreakpoints')
             is not None else None)
