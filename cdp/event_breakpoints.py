# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: EventBreakpoints (experimental)

EventBreakpoints permits setting JavaScript breakpoints on operations and events
occurring in native code invoked from JavaScript. Once breakpoint is hit, it is
reported through Debugger domain, similarly to regular breakpoints being hit."""
import typing
import enum
from .util import T_JSON_DICT
None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Removes all breakpoints"""
    cmd_dict = {'method': 'EventBreakpoints.disable'}
    json_result = yield cmd_dict
    return None


def remove_instrumentation_breakpoint(event_name: str) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Removes breakpoint on particular native event.

:param ...:

:param event_name: Instrumentation name to stop on."""
    params_dict: T_JSON_DICT = dict()
    params_dict['eventName'] = event_name
    cmd_dict = {'method':
        'EventBreakpoints.removeInstrumentationBreakpoint', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_instrumentation_breakpoint(event_name: str) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Sets breakpoint on particular native event.

:param ...:

:param event_name: Instrumentation name to stop on."""
    params_dict: T_JSON_DICT = dict()
    params_dict['eventName'] = event_name
    cmd_dict = {'method': 'EventBreakpoints.setInstrumentationBreakpoint',
        'params': params_dict}
    json_result = yield cmd_dict
    return None
