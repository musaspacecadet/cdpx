# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Overlay (experimental)

This domain provides various functionality related to drawing atop the inspected page."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from deprecated.sphinx import deprecated
from . import dom
from . import page
from . import runtime
None


@dataclass
class BoxStyle:
    """Style information for drawing a box."""
    fill_color: typing.Optional[dom.RGBA] = None
    hatch_color: typing.Optional[dom.RGBA] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.fill_color is not None:
            json_data['fillColor'] = self.fill_color.to_json()
        if self.hatch_color is not None:
            json_data['hatchColor'] = self.hatch_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BoxStyle:
        return cls(fill_color=dom.RGBA.from_json(json_obj['fillColor']) if 
            json_obj.get('fillColor') is not None else None, hatch_color=
            dom.RGBA.from_json(json_obj['hatchColor']) if json_obj.get(
            'hatchColor') is not None else None)


@dataclass
class ContainerQueryContainerHighlightConfig:
    container_border: typing.Optional[LineStyle] = None
    descendant_border: typing.Optional[LineStyle] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.container_border is not None:
            json_data['containerBorder'] = self.container_border.to_json()
        if self.descendant_border is not None:
            json_data['descendantBorder'] = self.descendant_border.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT
        ) ->ContainerQueryContainerHighlightConfig:
        return cls(container_border=LineStyle.from_json(json_obj[
            'containerBorder']) if json_obj.get('containerBorder') is not
            None else None, descendant_border=LineStyle.from_json(json_obj[
            'descendantBorder']) if json_obj.get('descendantBorder') is not
            None else None)


@dataclass
class ContainerQueryHighlightConfig:
    container_query_container_highlight_config: ContainerQueryContainerHighlightConfig
    node_id: dom.NodeId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['containerQueryContainerHighlightConfig'
            ] = self.container_query_container_highlight_config.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ContainerQueryHighlightConfig:
        return cls(container_query_container_highlight_config=
            ContainerQueryContainerHighlightConfig.from_json(json_obj[
            'containerQueryContainerHighlightConfig']), node_id=dom.NodeId.
            from_json(json_obj['nodeId']))


@dataclass
class FlexContainerHighlightConfig:
    """Configuration data for the highlighting of Flex container elements."""
    container_border: typing.Optional[LineStyle] = None
    line_separator: typing.Optional[LineStyle] = None
    item_separator: typing.Optional[LineStyle] = None
    main_distributed_space: typing.Optional[BoxStyle] = None
    cross_distributed_space: typing.Optional[BoxStyle] = None
    row_gap_space: typing.Optional[BoxStyle] = None
    column_gap_space: typing.Optional[BoxStyle] = None
    cross_alignment: typing.Optional[LineStyle] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.container_border is not None:
            json_data['containerBorder'] = self.container_border.to_json()
        if self.line_separator is not None:
            json_data['lineSeparator'] = self.line_separator.to_json()
        if self.item_separator is not None:
            json_data['itemSeparator'] = self.item_separator.to_json()
        if self.main_distributed_space is not None:
            json_data['mainDistributedSpace'
                ] = self.main_distributed_space.to_json()
        if self.cross_distributed_space is not None:
            json_data['crossDistributedSpace'
                ] = self.cross_distributed_space.to_json()
        if self.row_gap_space is not None:
            json_data['rowGapSpace'] = self.row_gap_space.to_json()
        if self.column_gap_space is not None:
            json_data['columnGapSpace'] = self.column_gap_space.to_json()
        if self.cross_alignment is not None:
            json_data['crossAlignment'] = self.cross_alignment.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->FlexContainerHighlightConfig:
        return cls(container_border=LineStyle.from_json(json_obj[
            'containerBorder']) if json_obj.get('containerBorder') is not
            None else None, line_separator=LineStyle.from_json(json_obj[
            'lineSeparator']) if json_obj.get('lineSeparator') is not None else
            None, item_separator=LineStyle.from_json(json_obj[
            'itemSeparator']) if json_obj.get('itemSeparator') is not None else
            None, main_distributed_space=BoxStyle.from_json(json_obj[
            'mainDistributedSpace']) if json_obj.get('mainDistributedSpace'
            ) is not None else None, cross_distributed_space=BoxStyle.
            from_json(json_obj['crossDistributedSpace']) if json_obj.get(
            'crossDistributedSpace') is not None else None, row_gap_space=
            BoxStyle.from_json(json_obj['rowGapSpace']) if json_obj.get(
            'rowGapSpace') is not None else None, column_gap_space=BoxStyle
            .from_json(json_obj['columnGapSpace']) if json_obj.get(
            'columnGapSpace') is not None else None, cross_alignment=
            LineStyle.from_json(json_obj['crossAlignment']) if json_obj.get
            ('crossAlignment') is not None else None)


@dataclass
class FlexItemHighlightConfig:
    """Configuration data for the highlighting of Flex item elements."""
    base_size_box: typing.Optional[BoxStyle] = None
    base_size_border: typing.Optional[LineStyle] = None
    flexibility_arrow: typing.Optional[LineStyle] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.base_size_box is not None:
            json_data['baseSizeBox'] = self.base_size_box.to_json()
        if self.base_size_border is not None:
            json_data['baseSizeBorder'] = self.base_size_border.to_json()
        if self.flexibility_arrow is not None:
            json_data['flexibilityArrow'] = self.flexibility_arrow.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->FlexItemHighlightConfig:
        return cls(base_size_box=BoxStyle.from_json(json_obj['baseSizeBox']
            ) if json_obj.get('baseSizeBox') is not None else None,
            base_size_border=LineStyle.from_json(json_obj['baseSizeBorder']
            ) if json_obj.get('baseSizeBorder') is not None else None,
            flexibility_arrow=LineStyle.from_json(json_obj[
            'flexibilityArrow']) if json_obj.get('flexibilityArrow') is not
            None else None)


@dataclass
class FlexNodeHighlightConfig:
    flex_container_highlight_config: FlexContainerHighlightConfig
    node_id: dom.NodeId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['flexContainerHighlightConfig'
            ] = self.flex_container_highlight_config.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->FlexNodeHighlightConfig:
        return cls(flex_container_highlight_config=
            FlexContainerHighlightConfig.from_json(json_obj[
            'flexContainerHighlightConfig']), node_id=dom.NodeId.from_json(
            json_obj['nodeId']))


@dataclass
class GridHighlightConfig:
    """Configuration data for the highlighting of Grid elements."""
    show_grid_extension_lines: typing.Optional[bool] = None
    show_positive_line_numbers: typing.Optional[bool] = None
    show_negative_line_numbers: typing.Optional[bool] = None
    show_area_names: typing.Optional[bool] = None
    show_line_names: typing.Optional[bool] = None
    show_track_sizes: typing.Optional[bool] = None
    grid_border_color: typing.Optional[dom.RGBA] = None
    cell_border_color: typing.Optional[dom.RGBA] = None
    row_line_color: typing.Optional[dom.RGBA] = None
    column_line_color: typing.Optional[dom.RGBA] = None
    grid_border_dash: typing.Optional[bool] = None
    cell_border_dash: typing.Optional[bool] = None
    row_line_dash: typing.Optional[bool] = None
    column_line_dash: typing.Optional[bool] = None
    row_gap_color: typing.Optional[dom.RGBA] = None
    row_hatch_color: typing.Optional[dom.RGBA] = None
    column_gap_color: typing.Optional[dom.RGBA] = None
    column_hatch_color: typing.Optional[dom.RGBA] = None
    area_border_color: typing.Optional[dom.RGBA] = None
    grid_background_color: typing.Optional[dom.RGBA] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.show_grid_extension_lines is not None:
            json_data['showGridExtensionLines'
                ] = self.show_grid_extension_lines
        if self.show_positive_line_numbers is not None:
            json_data['showPositiveLineNumbers'
                ] = self.show_positive_line_numbers
        if self.show_negative_line_numbers is not None:
            json_data['showNegativeLineNumbers'
                ] = self.show_negative_line_numbers
        if self.show_area_names is not None:
            json_data['showAreaNames'] = self.show_area_names
        if self.show_line_names is not None:
            json_data['showLineNames'] = self.show_line_names
        if self.show_track_sizes is not None:
            json_data['showTrackSizes'] = self.show_track_sizes
        if self.grid_border_color is not None:
            json_data['gridBorderColor'] = self.grid_border_color.to_json()
        if self.cell_border_color is not None:
            json_data['cellBorderColor'] = self.cell_border_color.to_json()
        if self.row_line_color is not None:
            json_data['rowLineColor'] = self.row_line_color.to_json()
        if self.column_line_color is not None:
            json_data['columnLineColor'] = self.column_line_color.to_json()
        if self.grid_border_dash is not None:
            json_data['gridBorderDash'] = self.grid_border_dash
        if self.cell_border_dash is not None:
            json_data['cellBorderDash'] = self.cell_border_dash
        if self.row_line_dash is not None:
            json_data['rowLineDash'] = self.row_line_dash
        if self.column_line_dash is not None:
            json_data['columnLineDash'] = self.column_line_dash
        if self.row_gap_color is not None:
            json_data['rowGapColor'] = self.row_gap_color.to_json()
        if self.row_hatch_color is not None:
            json_data['rowHatchColor'] = self.row_hatch_color.to_json()
        if self.column_gap_color is not None:
            json_data['columnGapColor'] = self.column_gap_color.to_json()
        if self.column_hatch_color is not None:
            json_data['columnHatchColor'] = self.column_hatch_color.to_json()
        if self.area_border_color is not None:
            json_data['areaBorderColor'] = self.area_border_color.to_json()
        if self.grid_background_color is not None:
            json_data['gridBackgroundColor'
                ] = self.grid_background_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->GridHighlightConfig:
        return cls(show_grid_extension_lines=json_obj[
            'showGridExtensionLines'] if json_obj.get(
            'showGridExtensionLines') is not None else None,
            show_positive_line_numbers=json_obj['showPositiveLineNumbers'] if
            json_obj.get('showPositiveLineNumbers') is not None else None,
            show_negative_line_numbers=json_obj['showNegativeLineNumbers'] if
            json_obj.get('showNegativeLineNumbers') is not None else None,
            show_area_names=json_obj['showAreaNames'] if json_obj.get(
            'showAreaNames') is not None else None, show_line_names=
            json_obj['showLineNames'] if json_obj.get('showLineNames') is not
            None else None, show_track_sizes=json_obj['showTrackSizes'] if 
            json_obj.get('showTrackSizes') is not None else None,
            grid_border_color=dom.RGBA.from_json(json_obj['gridBorderColor'
            ]) if json_obj.get('gridBorderColor') is not None else None,
            cell_border_color=dom.RGBA.from_json(json_obj['cellBorderColor'
            ]) if json_obj.get('cellBorderColor') is not None else None,
            row_line_color=dom.RGBA.from_json(json_obj['rowLineColor']) if 
            json_obj.get('rowLineColor') is not None else None,
            column_line_color=dom.RGBA.from_json(json_obj['columnLineColor'
            ]) if json_obj.get('columnLineColor') is not None else None,
            grid_border_dash=json_obj['gridBorderDash'] if json_obj.get(
            'gridBorderDash') is not None else None, cell_border_dash=
            json_obj['cellBorderDash'] if json_obj.get('cellBorderDash') is not
            None else None, row_line_dash=json_obj['rowLineDash'] if 
            json_obj.get('rowLineDash') is not None else None,
            column_line_dash=json_obj['columnLineDash'] if json_obj.get(
            'columnLineDash') is not None else None, row_gap_color=dom.RGBA
            .from_json(json_obj['rowGapColor']) if json_obj.get(
            'rowGapColor') is not None else None, row_hatch_color=dom.RGBA.
            from_json(json_obj['rowHatchColor']) if json_obj.get(
            'rowHatchColor') is not None else None, column_gap_color=dom.
            RGBA.from_json(json_obj['columnGapColor']) if json_obj.get(
            'columnGapColor') is not None else None, column_hatch_color=dom
            .RGBA.from_json(json_obj['columnHatchColor']) if json_obj.get(
            'columnHatchColor') is not None else None, area_border_color=
            dom.RGBA.from_json(json_obj['areaBorderColor']) if json_obj.get
            ('areaBorderColor') is not None else None,
            grid_background_color=dom.RGBA.from_json(json_obj[
            'gridBackgroundColor']) if json_obj.get('gridBackgroundColor')
             is not None else None)


@dataclass
class GridNodeHighlightConfig:
    """Configurations for Persistent Grid Highlight"""
    grid_highlight_config: GridHighlightConfig
    node_id: dom.NodeId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['gridHighlightConfig'] = self.grid_highlight_config.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->GridNodeHighlightConfig:
        return cls(grid_highlight_config=GridHighlightConfig.from_json(
            json_obj['gridHighlightConfig']), node_id=dom.NodeId.from_json(
            json_obj['nodeId']))


@dataclass
class HighlightConfig:
    """Configuration data for the highlighting of page elements."""
    show_info: typing.Optional[bool] = None
    show_styles: typing.Optional[bool] = None
    show_rulers: typing.Optional[bool] = None
    show_accessibility_info: typing.Optional[bool] = None
    show_extension_lines: typing.Optional[bool] = None
    content_color: typing.Optional[dom.RGBA] = None
    padding_color: typing.Optional[dom.RGBA] = None
    border_color: typing.Optional[dom.RGBA] = None
    margin_color: typing.Optional[dom.RGBA] = None
    event_target_color: typing.Optional[dom.RGBA] = None
    shape_color: typing.Optional[dom.RGBA] = None
    shape_margin_color: typing.Optional[dom.RGBA] = None
    css_grid_color: typing.Optional[dom.RGBA] = None
    color_format: typing.Optional[ColorFormat] = None
    grid_highlight_config: typing.Optional[GridHighlightConfig] = None
    flex_container_highlight_config: typing.Optional[
        FlexContainerHighlightConfig] = None
    flex_item_highlight_config: typing.Optional[FlexItemHighlightConfig] = None
    contrast_algorithm: typing.Optional[ContrastAlgorithm] = None
    container_query_container_highlight_config: typing.Optional[
        ContainerQueryContainerHighlightConfig] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.show_info is not None:
            json_data['showInfo'] = self.show_info
        if self.show_styles is not None:
            json_data['showStyles'] = self.show_styles
        if self.show_rulers is not None:
            json_data['showRulers'] = self.show_rulers
        if self.show_accessibility_info is not None:
            json_data['showAccessibilityInfo'] = self.show_accessibility_info
        if self.show_extension_lines is not None:
            json_data['showExtensionLines'] = self.show_extension_lines
        if self.content_color is not None:
            json_data['contentColor'] = self.content_color.to_json()
        if self.padding_color is not None:
            json_data['paddingColor'] = self.padding_color.to_json()
        if self.border_color is not None:
            json_data['borderColor'] = self.border_color.to_json()
        if self.margin_color is not None:
            json_data['marginColor'] = self.margin_color.to_json()
        if self.event_target_color is not None:
            json_data['eventTargetColor'] = self.event_target_color.to_json()
        if self.shape_color is not None:
            json_data['shapeColor'] = self.shape_color.to_json()
        if self.shape_margin_color is not None:
            json_data['shapeMarginColor'] = self.shape_margin_color.to_json()
        if self.css_grid_color is not None:
            json_data['cssGridColor'] = self.css_grid_color.to_json()
        if self.color_format is not None:
            json_data['colorFormat'] = self.color_format.to_json()
        if self.grid_highlight_config is not None:
            json_data['gridHighlightConfig'
                ] = self.grid_highlight_config.to_json()
        if self.flex_container_highlight_config is not None:
            json_data['flexContainerHighlightConfig'
                ] = self.flex_container_highlight_config.to_json()
        if self.flex_item_highlight_config is not None:
            json_data['flexItemHighlightConfig'
                ] = self.flex_item_highlight_config.to_json()
        if self.contrast_algorithm is not None:
            json_data['contrastAlgorithm'] = self.contrast_algorithm.to_json()
        if self.container_query_container_highlight_config is not None:
            json_data['containerQueryContainerHighlightConfig'
                ] = self.container_query_container_highlight_config.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->HighlightConfig:
        return cls(show_info=json_obj['showInfo'] if json_obj.get(
            'showInfo') is not None else None, show_styles=json_obj[
            'showStyles'] if json_obj.get('showStyles') is not None else
            None, show_rulers=json_obj['showRulers'] if json_obj.get(
            'showRulers') is not None else None, show_accessibility_info=
            json_obj['showAccessibilityInfo'] if json_obj.get(
            'showAccessibilityInfo') is not None else None,
            show_extension_lines=json_obj['showExtensionLines'] if json_obj
            .get('showExtensionLines') is not None else None, content_color
            =dom.RGBA.from_json(json_obj['contentColor']) if json_obj.get(
            'contentColor') is not None else None, padding_color=dom.RGBA.
            from_json(json_obj['paddingColor']) if json_obj.get(
            'paddingColor') is not None else None, border_color=dom.RGBA.
            from_json(json_obj['borderColor']) if json_obj.get(
            'borderColor') is not None else None, margin_color=dom.RGBA.
            from_json(json_obj['marginColor']) if json_obj.get(
            'marginColor') is not None else None, event_target_color=dom.
            RGBA.from_json(json_obj['eventTargetColor']) if json_obj.get(
            'eventTargetColor') is not None else None, shape_color=dom.RGBA
            .from_json(json_obj['shapeColor']) if json_obj.get('shapeColor'
            ) is not None else None, shape_margin_color=dom.RGBA.from_json(
            json_obj['shapeMarginColor']) if json_obj.get(
            'shapeMarginColor') is not None else None, css_grid_color=dom.
            RGBA.from_json(json_obj['cssGridColor']) if json_obj.get(
            'cssGridColor') is not None else None, color_format=ColorFormat
            .from_json(json_obj['colorFormat']) if json_obj.get(
            'colorFormat') is not None else None, grid_highlight_config=
            GridHighlightConfig.from_json(json_obj['gridHighlightConfig']) if
            json_obj.get('gridHighlightConfig') is not None else None,
            flex_container_highlight_config=FlexContainerHighlightConfig.
            from_json(json_obj['flexContainerHighlightConfig']) if json_obj
            .get('flexContainerHighlightConfig') is not None else None,
            flex_item_highlight_config=FlexItemHighlightConfig.from_json(
            json_obj['flexItemHighlightConfig']) if json_obj.get(
            'flexItemHighlightConfig') is not None else None,
            contrast_algorithm=ContrastAlgorithm.from_json(json_obj[
            'contrastAlgorithm']) if json_obj.get('contrastAlgorithm') is not
            None else None, container_query_container_highlight_config=
            ContainerQueryContainerHighlightConfig.from_json(json_obj[
            'containerQueryContainerHighlightConfig']) if json_obj.get(
            'containerQueryContainerHighlightConfig') is not None else None)


@dataclass
class HingeConfig:
    """Configuration for dual screen hinge"""
    rect: dom.Rect
    content_color: typing.Optional[dom.RGBA] = None
    outline_color: typing.Optional[dom.RGBA] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['rect'] = self.rect.to_json()
        if self.content_color is not None:
            json_data['contentColor'] = self.content_color.to_json()
        if self.outline_color is not None:
            json_data['outlineColor'] = self.outline_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->HingeConfig:
        return cls(rect=dom.Rect.from_json(json_obj['rect']), content_color
            =dom.RGBA.from_json(json_obj['contentColor']) if json_obj.get(
            'contentColor') is not None else None, outline_color=dom.RGBA.
            from_json(json_obj['outlineColor']) if json_obj.get(
            'outlineColor') is not None else None)


@dataclass
class IsolatedElementHighlightConfig:
    isolation_mode_highlight_config: IsolationModeHighlightConfig
    node_id: dom.NodeId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['isolationModeHighlightConfig'
            ] = self.isolation_mode_highlight_config.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->IsolatedElementHighlightConfig:
        return cls(isolation_mode_highlight_config=
            IsolationModeHighlightConfig.from_json(json_obj[
            'isolationModeHighlightConfig']), node_id=dom.NodeId.from_json(
            json_obj['nodeId']))


@dataclass
class IsolationModeHighlightConfig:
    resizer_color: typing.Optional[dom.RGBA] = None
    resizer_handle_color: typing.Optional[dom.RGBA] = None
    mask_color: typing.Optional[dom.RGBA] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.resizer_color is not None:
            json_data['resizerColor'] = self.resizer_color.to_json()
        if self.resizer_handle_color is not None:
            json_data['resizerHandleColor'
                ] = self.resizer_handle_color.to_json()
        if self.mask_color is not None:
            json_data['maskColor'] = self.mask_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->IsolationModeHighlightConfig:
        return cls(resizer_color=dom.RGBA.from_json(json_obj['resizerColor'
            ]) if json_obj.get('resizerColor') is not None else None,
            resizer_handle_color=dom.RGBA.from_json(json_obj[
            'resizerHandleColor']) if json_obj.get('resizerHandleColor') is not
            None else None, mask_color=dom.RGBA.from_json(json_obj[
            'maskColor']) if json_obj.get('maskColor') is not None else None)


@dataclass
class LineStyle:
    """Style information for drawing a line."""
    color: typing.Optional[dom.RGBA] = None
    pattern: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.color is not None:
            json_data['color'] = self.color.to_json()
        if self.pattern is not None:
            json_data['pattern'] = self.pattern
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->LineStyle:
        return cls(color=dom.RGBA.from_json(json_obj['color']) if json_obj.
            get('color') is not None else None, pattern=json_obj['pattern'] if
            json_obj.get('pattern') is not None else None)


@dataclass
class ScrollSnapContainerHighlightConfig:
    snapport_border: typing.Optional[LineStyle] = None
    snap_area_border: typing.Optional[LineStyle] = None
    scroll_margin_color: typing.Optional[dom.RGBA] = None
    scroll_padding_color: typing.Optional[dom.RGBA] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.snapport_border is not None:
            json_data['snapportBorder'] = self.snapport_border.to_json()
        if self.snap_area_border is not None:
            json_data['snapAreaBorder'] = self.snap_area_border.to_json()
        if self.scroll_margin_color is not None:
            json_data['scrollMarginColor'] = self.scroll_margin_color.to_json()
        if self.scroll_padding_color is not None:
            json_data['scrollPaddingColor'
                ] = self.scroll_padding_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT
        ) ->ScrollSnapContainerHighlightConfig:
        return cls(snapport_border=LineStyle.from_json(json_obj[
            'snapportBorder']) if json_obj.get('snapportBorder') is not
            None else None, snap_area_border=LineStyle.from_json(json_obj[
            'snapAreaBorder']) if json_obj.get('snapAreaBorder') is not
            None else None, scroll_margin_color=dom.RGBA.from_json(json_obj
            ['scrollMarginColor']) if json_obj.get('scrollMarginColor') is not
            None else None, scroll_padding_color=dom.RGBA.from_json(
            json_obj['scrollPaddingColor']) if json_obj.get(
            'scrollPaddingColor') is not None else None)


@dataclass
class ScrollSnapHighlightConfig:
    scroll_snap_container_highlight_config: ScrollSnapContainerHighlightConfig
    node_id: dom.NodeId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['scrollSnapContainerHighlightConfig'
            ] = self.scroll_snap_container_highlight_config.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ScrollSnapHighlightConfig:
        return cls(scroll_snap_container_highlight_config=
            ScrollSnapContainerHighlightConfig.from_json(json_obj[
            'scrollSnapContainerHighlightConfig']), node_id=dom.NodeId.
            from_json(json_obj['nodeId']))


@dataclass
class SourceOrderConfig:
    """Configuration data for drawing the source order of an elements children."""
    parent_outline_color: dom.RGBA
    child_outline_color: dom.RGBA

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['parentOutlineColor'] = self.parent_outline_color.to_json()
        json_data['childOutlineColor'] = self.child_outline_color.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SourceOrderConfig:
        return cls(parent_outline_color=dom.RGBA.from_json(json_obj[
            'parentOutlineColor']), child_outline_color=dom.RGBA.from_json(
            json_obj['childOutlineColor']))


@dataclass
class WindowControlsOverlayConfig:
    """Configuration for Window Controls Overlay"""
    show_css: bool
    selected_platform: str
    theme_color: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['showCSS'] = self.show_css
        json_data['selectedPlatform'] = self.selected_platform
        json_data['themeColor'] = self.theme_color
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->WindowControlsOverlayConfig:
        return cls(show_css=json_obj['showCSS'], selected_platform=json_obj
            ['selectedPlatform'], theme_color=json_obj['themeColor'])


class ColorFormat(enum.Enum):
    RGB = 'rgb'
    HSL = 'hsl'
    HWB = 'hwb'
    HEX_ = 'hex'

    @classmethod
    def from_json(cls, json: str) ->ColorFormat:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ColorFormat.{}>'.format(self.value)


class ContrastAlgorithm(enum.Enum):
    AA = 'aa'
    AAA = 'aaa'
    APCA = 'apca'

    @classmethod
    def from_json(cls, json: str) ->ContrastAlgorithm:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ContrastAlgorithm.{}>'.format(self.value)


class InspectMode(enum.Enum):
    SEARCH_FOR_NODE = 'searchForNode'
    SEARCH_FOR_UA_SHADOW_DOM = 'searchForUAShadowDOM'
    CAPTURE_AREA_SCREENSHOT = 'captureAreaScreenshot'
    SHOW_DISTANCES = 'showDistances'
    NONE = 'none'

    @classmethod
    def from_json(cls, json: str) ->InspectMode:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<InspectMode.{}>'.format(self.value)


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables domain notifications."""
    cmd_dict = {'method': 'Overlay.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables domain notifications."""
    cmd_dict = {'method': 'Overlay.enable'}
    json_result = yield cmd_dict
    return None


def get_grid_highlight_objects_for_test(node_ids: typing.List[dom.NodeId]
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, T_JSON_DICT]:
    """For Persistent Grid testing.

:param ...:

:param node_ids: Ids of the node to get highlight object for.


:returns: Grid Highlight data for the node ids provided."""
    params_dict: T_JSON_DICT = dict()
    params_dict['nodeIds'] = [i.to_json() for i in node_ids]
    cmd_dict = {'method': 'Overlay.getGridHighlightObjectsForTest',
        'params': params_dict}
    json_result = yield cmd_dict
    return json_result['highlights']


def get_highlight_object_for_test(node_id: dom.NodeId, include_distance:
    typing.Optional[bool]=None, include_style: typing.Optional[bool]=None,
    color_format: typing.Optional[ColorFormat]=None,
    show_accessibility_info: typing.Optional[bool]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, T_JSON_DICT]:
    """For testing.

:param ...:

:param node_id: Id of the node to get highlight object for.

:param include_distance: *(Optional)* Whether to include distance info.

:param include_style: *(Optional)* Whether to include style info.

:param color_format: *(Optional)* The color format to get config with (default: hex).

:param show_accessibility_info: *(Optional)* Whether to show accessibility info (default: true).


:returns: Highlight data for the node."""
    params_dict: T_JSON_DICT = dict()
    params_dict['nodeId'] = node_id.to_json()
    if include_distance is not None:
        params_dict['includeDistance'] = include_distance
    if include_style is not None:
        params_dict['includeStyle'] = include_style
    if color_format is not None:
        params_dict['colorFormat'] = color_format.to_json()
    if show_accessibility_info is not None:
        params_dict['showAccessibilityInfo'] = show_accessibility_info
    cmd_dict = {'method': 'Overlay.getHighlightObjectForTest', 'params':
        params_dict}
    json_result = yield cmd_dict
    return json_result['highlight']


def get_source_order_highlight_object_for_test(node_id: dom.NodeId
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, T_JSON_DICT]:
    """For Source Order Viewer testing.

:param ...:

:param node_id: Id of the node to highlight.


:returns: Source order highlight data for the node id provided."""
    params_dict: T_JSON_DICT = dict()
    params_dict['nodeId'] = node_id.to_json()
    cmd_dict = {'method': 'Overlay.getSourceOrderHighlightObjectForTest',
        'params': params_dict}
    json_result = yield cmd_dict
    return json_result['highlight']


def hide_highlight() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Hides any highlight."""
    cmd_dict = {'method': 'Overlay.hideHighlight'}
    json_result = yield cmd_dict
    return None


@deprecated(version='1.3')
def highlight_frame(frame_id: page.FrameId, content_color: typing.Optional[
    dom.RGBA]=None, content_outline_color: typing.Optional[dom.RGBA]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Highlights owner element of the frame with given id.
Deprecated: Doesn't work reliably and cannot be fixed due to process
separation (the owner node might be in a different process). Determine
the owner node in the client and use highlightNode.

.. deprecated:: 1.3

:param ...:

:param frame_id: Identifier of the frame to highlight.

:param content_color: *(Optional)* The content box highlight fill color (default: transparent).

:param content_outline_color: *(Optional)* The content box highlight outline color (default: transparent)."""
    params_dict: T_JSON_DICT = dict()
    params_dict['frameId'] = frame_id.to_json()
    if content_color is not None:
        params_dict['contentColor'] = content_color.to_json()
    if content_outline_color is not None:
        params_dict['contentOutlineColor'] = content_outline_color.to_json()
    cmd_dict = {'method': 'Overlay.highlightFrame', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def highlight_node(highlight_config: HighlightConfig, node_id: typing.
    Optional[dom.NodeId]=None, backend_node_id: typing.Optional[dom.
    BackendNodeId]=None, object_id: typing.Optional[runtime.RemoteObjectId]
    =None, selector: typing.Optional[str]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
objectId must be specified.

:param ...:

:param highlight_config: A descriptor for the highlight appearance.

:param node_id: *(Optional)* Identifier of the node to highlight.

:param backend_node_id: *(Optional)* Identifier of the backend node to highlight.

:param object_id: *(Optional)* JavaScript object id of the node to be highlighted.

:param selector: *(Optional)* Selectors to highlight relevant nodes."""
    params_dict: T_JSON_DICT = dict()
    params_dict['highlightConfig'] = highlight_config.to_json()
    if node_id is not None:
        params_dict['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params_dict['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    if selector is not None:
        params_dict['selector'] = selector
    cmd_dict = {'method': 'Overlay.highlightNode', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def highlight_quad(quad: dom.Quad, color: typing.Optional[dom.RGBA]=None,
    outline_color: typing.Optional[dom.RGBA]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Highlights given quad. Coordinates are absolute with respect to the main frame viewport.

:param ...:

:param quad: Quad to highlight

:param color: *(Optional)* The highlight fill color (default: transparent).

:param outline_color: *(Optional)* The highlight outline color (default: transparent)."""
    params_dict: T_JSON_DICT = dict()
    params_dict['quad'] = quad.to_json()
    if color is not None:
        params_dict['color'] = color.to_json()
    if outline_color is not None:
        params_dict['outlineColor'] = outline_color.to_json()
    cmd_dict = {'method': 'Overlay.highlightQuad', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def highlight_rect(x: int, y: int, width: int, height: int, color: typing.
    Optional[dom.RGBA]=None, outline_color: typing.Optional[dom.RGBA]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.

:param ...:

:param x: X coordinate

:param y: Y coordinate

:param width: Rectangle width

:param height: Rectangle height

:param color: *(Optional)* The highlight fill color (default: transparent).

:param outline_color: *(Optional)* The highlight outline color (default: transparent)."""
    params_dict: T_JSON_DICT = dict()
    params_dict['x'] = x
    params_dict['y'] = y
    params_dict['width'] = width
    params_dict['height'] = height
    if color is not None:
        params_dict['color'] = color.to_json()
    if outline_color is not None:
        params_dict['outlineColor'] = outline_color.to_json()
    cmd_dict = {'method': 'Overlay.highlightRect', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def highlight_source_order(source_order_config: SourceOrderConfig, node_id:
    typing.Optional[dom.NodeId]=None, backend_node_id: typing.Optional[dom.
    BackendNodeId]=None, object_id: typing.Optional[runtime.RemoteObjectId]
    =None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Highlights the source order of the children of the DOM node with given id or with the given
JavaScript object wrapper. Either nodeId or objectId must be specified.

:param ...:

:param source_order_config: A descriptor for the appearance of the overlay drawing.

:param node_id: *(Optional)* Identifier of the node to highlight.

:param backend_node_id: *(Optional)* Identifier of the backend node to highlight.

:param object_id: *(Optional)* JavaScript object id of the node to be highlighted."""
    params_dict: T_JSON_DICT = dict()
    params_dict['sourceOrderConfig'] = source_order_config.to_json()
    if node_id is not None:
        params_dict['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params_dict['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    cmd_dict = {'method': 'Overlay.highlightSourceOrder', 'params': params_dict
        }
    json_result = yield cmd_dict
    return None


def set_inspect_mode(mode: InspectMode, highlight_config: typing.Optional[
    HighlightConfig]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
Backend then generates 'inspectNodeRequested' event upon element selection.

:param ...:

:param mode: Set an inspection mode.

:param highlight_config: *(Optional)* A descriptor for the highlight appearance of hovered-over nodes. May be omitted if ``enabled == false``."""
    params_dict: T_JSON_DICT = dict()
    params_dict['mode'] = mode.to_json()
    if highlight_config is not None:
        params_dict['highlightConfig'] = highlight_config.to_json()
    cmd_dict = {'method': 'Overlay.setInspectMode', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_paused_in_debugger_message(message: typing.Optional[str]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """:param ...:

:param message: *(Optional)* The message to display, also triggers resume and step over controls."""
    params_dict: T_JSON_DICT = dict()
    if message is not None:
        params_dict['message'] = message
    cmd_dict = {'method': 'Overlay.setPausedInDebuggerMessage', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_ad_highlights(show: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Highlights owner element of all frames detected to be ads.

:param ...:

:param show: True for showing ad highlights"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowAdHighlights', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_container_query_overlays(container_query_highlight_configs:
    typing.List[ContainerQueryHighlightConfig]) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """:param ...:

:param container_query_highlight_configs: An array of node identifiers and descriptors for the highlight appearance."""
    params_dict: T_JSON_DICT = dict()
    params_dict['containerQueryHighlightConfigs'] = [i.to_json() for i in
        container_query_highlight_configs]
    cmd_dict = {'method': 'Overlay.setShowContainerQueryOverlays', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_debug_borders(show: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Requests that backend shows debug borders on layers

:param ...:

:param show: True for showing debug borders"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowDebugBorders', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_fps_counter(show: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Requests that backend shows the FPS counter

:param ...:

:param show: True for showing the FPS counter"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowFPSCounter', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_flex_overlays(flex_node_highlight_configs: typing.List[
    FlexNodeHighlightConfig]) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None
    ]:
    """:param ...:

:param flex_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance."""
    params_dict: T_JSON_DICT = dict()
    params_dict['flexNodeHighlightConfigs'] = [i.to_json() for i in
        flex_node_highlight_configs]
    cmd_dict = {'method': 'Overlay.setShowFlexOverlays', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_grid_overlays(grid_node_highlight_configs: typing.List[
    GridNodeHighlightConfig]) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None
    ]:
    """Highlight multiple elements with the CSS Grid overlay.

:param ...:

:param grid_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance."""
    params_dict: T_JSON_DICT = dict()
    params_dict['gridNodeHighlightConfigs'] = [i.to_json() for i in
        grid_node_highlight_configs]
    cmd_dict = {'method': 'Overlay.setShowGridOverlays', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_hinge(hinge_config: typing.Optional[HingeConfig]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Add a dual screen device hinge

:param ...:

:param hinge_config: *(Optional)* hinge data, null means hideHinge"""
    params_dict: T_JSON_DICT = dict()
    if hinge_config is not None:
        params_dict['hingeConfig'] = hinge_config.to_json()
    cmd_dict = {'method': 'Overlay.setShowHinge', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@deprecated(version='1.3')
def set_show_hit_test_borders(show: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Deprecated, no longer has any effect.

.. deprecated:: 1.3

:param ...:

:param show: True for showing hit-test borders"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowHitTestBorders', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_isolated_elements(isolated_element_highlight_configs: typing.
    List[IsolatedElementHighlightConfig]) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Show elements in isolation mode with overlays.

:param ...:

:param isolated_element_highlight_configs: An array of node identifiers and descriptors for the highlight appearance."""
    params_dict: T_JSON_DICT = dict()
    params_dict['isolatedElementHighlightConfigs'] = [i.to_json() for i in
        isolated_element_highlight_configs]
    cmd_dict = {'method': 'Overlay.setShowIsolatedElements', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_layout_shift_regions(result: bool) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Requests that backend shows layout shift regions

:param ...:

:param result: True for showing layout shift regions"""
    params_dict: T_JSON_DICT = dict()
    params_dict['result'] = result
    cmd_dict = {'method': 'Overlay.setShowLayoutShiftRegions', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_paint_rects(result: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Requests that backend shows paint rectangles

:param ...:

:param result: True for showing paint rectangles"""
    params_dict: T_JSON_DICT = dict()
    params_dict['result'] = result
    cmd_dict = {'method': 'Overlay.setShowPaintRects', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_scroll_bottleneck_rects(show: bool) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Requests that backend shows scroll bottleneck rects

:param ...:

:param show: True for showing scroll bottleneck rects"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowScrollBottleneckRects', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_scroll_snap_overlays(scroll_snap_highlight_configs: typing.
    List[ScrollSnapHighlightConfig]) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """:param ...:

:param scroll_snap_highlight_configs: An array of node identifiers and descriptors for the highlight appearance."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scrollSnapHighlightConfigs'] = [i.to_json() for i in
        scroll_snap_highlight_configs]
    cmd_dict = {'method': 'Overlay.setShowScrollSnapOverlays', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_show_viewport_size_on_resize(show: bool) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Paints viewport size upon main frame resize.

:param ...:

:param show: Whether to paint size or not."""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowViewportSizeOnResize', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


@deprecated(version='1.3')
def set_show_web_vitals(show: bool) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Deprecated, no longer has any effect.

.. deprecated:: 1.3

:param ...:

:param show:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['show'] = show
    cmd_dict = {'method': 'Overlay.setShowWebVitals', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_show_window_controls_overlay(window_controls_overlay_config: typing
    .Optional[WindowControlsOverlayConfig]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Show Window Controls Overlay for PWA

:param ...:

:param window_controls_overlay_config: *(Optional)* Window Controls Overlay data, null means hide Window Controls Overlay"""
    params_dict: T_JSON_DICT = dict()
    if window_controls_overlay_config is not None:
        params_dict['windowControlsOverlayConfig'
            ] = window_controls_overlay_config.to_json()
    cmd_dict = {'method': 'Overlay.setShowWindowControlsOverlay', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


@event_class('Overlay.inspectModeCanceled')
@dataclass
class InspectModeCanceled:
    """Fired when user cancels the inspect mode."""
    pass

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->InspectModeCanceled:
        return cls()


@event_class('Overlay.inspectNodeRequested')
@dataclass
class InspectNodeRequested:
    """Fired when the node should be inspected. This happens after call to ``setInspectMode`` or when
user manually inspects an element."""
    backend_node_id: dom.BackendNodeId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->InspectNodeRequested:
        return cls(backend_node_id=dom.BackendNodeId.from_json(json_obj[
            'backendNodeId']))


@event_class('Overlay.nodeHighlightRequested')
@dataclass
class NodeHighlightRequested:
    """Fired when the node should be highlighted. This happens after call to ``setInspectMode``."""
    node_id: dom.NodeId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodeHighlightRequested:
        return cls(node_id=dom.NodeId.from_json(json_obj['nodeId']))


@event_class('Overlay.screenshotRequested')
@dataclass
class ScreenshotRequested:
    """Fired when user asks to capture screenshot of some area on the page."""
    viewport: page.Viewport

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ScreenshotRequested:
        return cls(viewport=page.Viewport.from_json(json_obj['viewport']))
