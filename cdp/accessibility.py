# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Accessibility (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from . import dom
from . import page
from . import runtime
None


@dataclass
class AXNode:
    """A node in the accessibility tree."""
    node_id: AXNodeId
    ignored: bool
    ignored_reasons: typing.Optional[typing.List[AXProperty]] = None
    role: typing.Optional[AXValue] = None
    chrome_role: typing.Optional[AXValue] = None
    name: typing.Optional[AXValue] = None
    description: typing.Optional[AXValue] = None
    value: typing.Optional[AXValue] = None
    properties: typing.Optional[typing.List[AXProperty]] = None
    parent_id: typing.Optional[AXNodeId] = None
    child_ids: typing.Optional[typing.List[AXNodeId]] = None
    backend_dom_node_id: typing.Optional[dom.BackendNodeId] = None
    frame_id: typing.Optional[page.FrameId] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['nodeId'] = self.node_id.to_json()
        json_data['ignored'] = self.ignored
        if self.ignored_reasons is not None:
            json_data['ignoredReasons'] = [i.to_json() for i in self.
                ignored_reasons]
        if self.role is not None:
            json_data['role'] = self.role.to_json()
        if self.chrome_role is not None:
            json_data['chromeRole'] = self.chrome_role.to_json()
        if self.name is not None:
            json_data['name'] = self.name.to_json()
        if self.description is not None:
            json_data['description'] = self.description.to_json()
        if self.value is not None:
            json_data['value'] = self.value.to_json()
        if self.properties is not None:
            json_data['properties'] = [i.to_json() for i in self.properties]
        if self.parent_id is not None:
            json_data['parentId'] = self.parent_id.to_json()
        if self.child_ids is not None:
            json_data['childIds'] = [i.to_json() for i in self.child_ids]
        if self.backend_dom_node_id is not None:
            json_data['backendDOMNodeId'] = self.backend_dom_node_id.to_json()
        if self.frame_id is not None:
            json_data['frameId'] = self.frame_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AXNode:
        return cls(node_id=AXNodeId.from_json(json_obj['nodeId']), ignored=
            json_obj['ignored'], ignored_reasons=[AXProperty.from_json(i) for
            i in json_obj['ignoredReasons']] if json_obj.get(
            'ignoredReasons') is not None else None, role=AXValue.from_json
            (json_obj['role']) if json_obj.get('role') is not None else
            None, chrome_role=AXValue.from_json(json_obj['chromeRole']) if 
            json_obj.get('chromeRole') is not None else None, name=AXValue.
            from_json(json_obj['name']) if json_obj.get('name') is not None
             else None, description=AXValue.from_json(json_obj[
            'description']) if json_obj.get('description') is not None else
            None, value=AXValue.from_json(json_obj['value']) if json_obj.
            get('value') is not None else None, properties=[AXProperty.
            from_json(i) for i in json_obj['properties']] if json_obj.get(
            'properties') is not None else None, parent_id=AXNodeId.
            from_json(json_obj['parentId']) if json_obj.get('parentId') is not
            None else None, child_ids=[AXNodeId.from_json(i) for i in
            json_obj['childIds']] if json_obj.get('childIds') is not None else
            None, backend_dom_node_id=dom.BackendNodeId.from_json(json_obj[
            'backendDOMNodeId']) if json_obj.get('backendDOMNodeId') is not
            None else None, frame_id=page.FrameId.from_json(json_obj[
            'frameId']) if json_obj.get('frameId') is not None else None)


@dataclass
class AXProperty:
    name: AXPropertyName
    value: AXValue

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name.to_json()
        json_data['value'] = self.value.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AXProperty:
        return cls(name=AXPropertyName.from_json(json_obj['name']), value=
            AXValue.from_json(json_obj['value']))


@dataclass
class AXRelatedNode:
    backend_dom_node_id: dom.BackendNodeId
    idref: typing.Optional[str] = None
    text: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['backendDOMNodeId'] = self.backend_dom_node_id.to_json()
        if self.idref is not None:
            json_data['idref'] = self.idref
        if self.text is not None:
            json_data['text'] = self.text
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AXRelatedNode:
        return cls(backend_dom_node_id=dom.BackendNodeId.from_json(json_obj
            ['backendDOMNodeId']), idref=json_obj['idref'] if json_obj.get(
            'idref') is not None else None, text=json_obj['text'] if 
            json_obj.get('text') is not None else None)


@dataclass
class AXValue:
    """A single computed AX property."""
    type_: AXValueType
    value: typing.Optional[typing.Any] = None
    related_nodes: typing.Optional[typing.List[AXRelatedNode]] = None
    sources: typing.Optional[typing.List[AXValueSource]] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_.to_json()
        if self.value is not None:
            json_data['value'] = self.value
        if self.related_nodes is not None:
            json_data['relatedNodes'] = [i.to_json() for i in self.
                related_nodes]
        if self.sources is not None:
            json_data['sources'] = [i.to_json() for i in self.sources]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AXValue:
        return cls(type_=AXValueType.from_json(json_obj['type']), value=
            json_obj['value'] if json_obj.get('value') is not None else
            None, related_nodes=[AXRelatedNode.from_json(i) for i in
            json_obj['relatedNodes']] if json_obj.get('relatedNodes') is not
            None else None, sources=[AXValueSource.from_json(i) for i in
            json_obj['sources']] if json_obj.get('sources') is not None else
            None)


@dataclass
class AXValueSource:
    """A single source for a computed AX property."""
    type_: AXValueSourceType
    value: typing.Optional[AXValue] = None
    attribute: typing.Optional[str] = None
    attribute_value: typing.Optional[AXValue] = None
    superseded: typing.Optional[bool] = None
    native_source: typing.Optional[AXValueNativeSourceType] = None
    native_source_value: typing.Optional[AXValue] = None
    invalid: typing.Optional[bool] = None
    invalid_reason: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_.to_json()
        if self.value is not None:
            json_data['value'] = self.value.to_json()
        if self.attribute is not None:
            json_data['attribute'] = self.attribute
        if self.attribute_value is not None:
            json_data['attributeValue'] = self.attribute_value.to_json()
        if self.superseded is not None:
            json_data['superseded'] = self.superseded
        if self.native_source is not None:
            json_data['nativeSource'] = self.native_source.to_json()
        if self.native_source_value is not None:
            json_data['nativeSourceValue'] = self.native_source_value.to_json()
        if self.invalid is not None:
            json_data['invalid'] = self.invalid
        if self.invalid_reason is not None:
            json_data['invalidReason'] = self.invalid_reason
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AXValueSource:
        return cls(type_=AXValueSourceType.from_json(json_obj['type']),
            value=AXValue.from_json(json_obj['value']) if json_obj.get(
            'value') is not None else None, attribute=json_obj['attribute'] if
            json_obj.get('attribute') is not None else None,
            attribute_value=AXValue.from_json(json_obj['attributeValue']) if
            json_obj.get('attributeValue') is not None else None,
            superseded=json_obj['superseded'] if json_obj.get('superseded')
             is not None else None, native_source=AXValueNativeSourceType.
            from_json(json_obj['nativeSource']) if json_obj.get(
            'nativeSource') is not None else None, native_source_value=
            AXValue.from_json(json_obj['nativeSourceValue']) if json_obj.
            get('nativeSourceValue') is not None else None, invalid=
            json_obj['invalid'] if json_obj.get('invalid') is not None else
            None, invalid_reason=json_obj['invalidReason'] if json_obj.get(
            'invalidReason') is not None else None)


class AXPropertyName(enum.Enum):
    """Values of AXProperty name:
- from 'busy' to 'roledescription': states which apply to every AX node
- from 'live' to 'root': attributes which apply to nodes in live regions
- from 'autocomplete' to 'valuetext': attributes which apply to widgets
- from 'checked' to 'selected': states which apply to widgets
- from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling."""
    ACTIONS = 'actions'
    BUSY = 'busy'
    DISABLED = 'disabled'
    EDITABLE = 'editable'
    FOCUSABLE = 'focusable'
    FOCUSED = 'focused'
    HIDDEN = 'hidden'
    HIDDEN_ROOT = 'hiddenRoot'
    INVALID = 'invalid'
    KEYSHORTCUTS = 'keyshortcuts'
    SETTABLE = 'settable'
    ROLEDESCRIPTION = 'roledescription'
    LIVE = 'live'
    ATOMIC = 'atomic'
    RELEVANT = 'relevant'
    ROOT = 'root'
    AUTOCOMPLETE = 'autocomplete'
    HAS_POPUP = 'hasPopup'
    LEVEL = 'level'
    MULTISELECTABLE = 'multiselectable'
    ORIENTATION = 'orientation'
    MULTILINE = 'multiline'
    READONLY = 'readonly'
    REQUIRED = 'required'
    VALUEMIN = 'valuemin'
    VALUEMAX = 'valuemax'
    VALUETEXT = 'valuetext'
    CHECKED = 'checked'
    EXPANDED = 'expanded'
    MODAL = 'modal'
    PRESSED = 'pressed'
    SELECTED = 'selected'
    ACTIVEDESCENDANT = 'activedescendant'
    CONTROLS = 'controls'
    DESCRIBEDBY = 'describedby'
    DETAILS = 'details'
    ERRORMESSAGE = 'errormessage'
    FLOWTO = 'flowto'
    LABELLEDBY = 'labelledby'
    OWNS = 'owns'
    URL = 'url'

    @classmethod
    def from_json(cls, json: str) ->AXPropertyName:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<AXPropertyName.{}>'.format(self.value)


class AXValueNativeSourceType(enum.Enum):
    """Enum of possible native property sources (as a subtype of a particular AXValueSourceType)."""
    DESCRIPTION = 'description'
    FIGCAPTION = 'figcaption'
    LABEL = 'label'
    LABELFOR = 'labelfor'
    LABELWRAPPED = 'labelwrapped'
    LEGEND = 'legend'
    RUBYANNOTATION = 'rubyannotation'
    TABLECAPTION = 'tablecaption'
    TITLE = 'title'
    OTHER = 'other'

    @classmethod
    def from_json(cls, json: str) ->AXValueNativeSourceType:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<AXValueNativeSourceType.{}>'.format(self.value)


class AXValueSourceType(enum.Enum):
    """Enum of possible property sources."""
    ATTRIBUTE = 'attribute'
    IMPLICIT = 'implicit'
    STYLE = 'style'
    CONTENTS = 'contents'
    PLACEHOLDER = 'placeholder'
    RELATED_ELEMENT = 'relatedElement'

    @classmethod
    def from_json(cls, json: str) ->AXValueSourceType:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<AXValueSourceType.{}>'.format(self.value)


class AXValueType(enum.Enum):
    """Enum of possible property types."""
    BOOLEAN = 'boolean'
    TRISTATE = 'tristate'
    BOOLEAN_OR_UNDEFINED = 'booleanOrUndefined'
    IDREF = 'idref'
    IDREF_LIST = 'idrefList'
    INTEGER = 'integer'
    NODE = 'node'
    NODE_LIST = 'nodeList'
    NUMBER = 'number'
    STRING = 'string'
    COMPUTED_STRING = 'computedString'
    TOKEN = 'token'
    TOKEN_LIST = 'tokenList'
    DOM_RELATION = 'domRelation'
    ROLE = 'role'
    INTERNAL_ROLE = 'internalRole'
    VALUE_UNDEFINED = 'valueUndefined'

    @classmethod
    def from_json(cls, json: str) ->AXValueType:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<AXValueType.{}>'.format(self.value)


class AXNodeId(str):
    """Unique accessibility node identifier.

Represents the CDP type 'Accessibility.AXNodeId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->AXNodeId:
        return cls(json)

    def __repr__(self) ->str:
        return 'AXNodeId({})'.format(super().__repr__())


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables the accessibility domain."""
    cmd_dict = {'method': 'Accessibility.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables the accessibility domain which causes ``AXNodeId``s to remain consistent between method calls.
This turns on accessibility for the page, which can impact performance until accessibility is disabled."""
    cmd_dict = {'method': 'Accessibility.enable'}
    json_result = yield cmd_dict
    return None


def get_ax_node_and_ancestors(node_id: typing.Optional[dom.NodeId]=None,
    backend_node_id: typing.Optional[dom.BackendNodeId]=None, object_id:
    typing.Optional[runtime.RemoteObjectId]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:
    """Fetches a node and all ancestors up to and including the root.
Requires ``enable()`` to have been called previously.

**EXPERIMENTAL**

:param ...:

:param node_id: *(Optional)* Identifier of the node to get.

:param backend_node_id: *(Optional)* Identifier of the backend node to get.

:param object_id: *(Optional)* JavaScript object id of the node wrapper to get.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    if node_id is not None:
        params_dict['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params_dict['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    cmd_dict = {'method': 'Accessibility.getAXNodeAndAncestors', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [AXNode.from_json(i) for i in json_result['nodes']]


def get_child_ax_nodes(id_: AXNodeId, frame_id: typing.Optional[page.
    FrameId]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List
    [AXNode]]:
    """Fetches a particular accessibility node by AXNodeId.
Requires ``enable()`` to have been called previously.

**EXPERIMENTAL**

:param ...:

:param id_:

:param frame_id: *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_.to_json()
    if frame_id is not None:
        params_dict['frameId'] = frame_id.to_json()
    cmd_dict = {'method': 'Accessibility.getChildAXNodes', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [AXNode.from_json(i) for i in json_result['nodes']]


def get_full_ax_tree(depth: typing.Optional[int]=None, frame_id: typing.
    Optional[page.FrameId]=None) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, typing.List[AXNode]]:
    """Fetches the entire accessibility tree for the root Document

**EXPERIMENTAL**

:param ...:

:param depth: *(Optional)* The maximum depth at which descendants of the root node should be retrieved. If omitted, the full tree is returned.

:param frame_id: *(Optional)* The frame for whose document the AX tree should be retrieved. If omitted, the root frame is used.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    if depth is not None:
        params_dict['depth'] = depth
    if frame_id is not None:
        params_dict['frameId'] = frame_id.to_json()
    cmd_dict = {'method': 'Accessibility.getFullAXTree', 'params': params_dict}
    json_result = yield cmd_dict
    return [AXNode.from_json(i) for i in json_result['nodes']]


def get_partial_ax_tree(node_id: typing.Optional[dom.NodeId]=None,
    backend_node_id: typing.Optional[dom.BackendNodeId]=None, object_id:
    typing.Optional[runtime.RemoteObjectId]=None, fetch_relatives: typing.
    Optional[bool]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    typing.List[AXNode]]:
    """Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.

**EXPERIMENTAL**

:param ...:

:param node_id: *(Optional)* Identifier of the node to get the partial accessibility tree for.

:param backend_node_id: *(Optional)* Identifier of the backend node to get the partial accessibility tree for.

:param object_id: *(Optional)* JavaScript object id of the node wrapper to get the partial accessibility tree for.

:param fetch_relatives: *(Optional)* Whether to fetch this node's ancestors, siblings and children. Defaults to true.


:returns: The ``Accessibility.AXNode`` for this DOM node, if it exists, plus its ancestors, siblings and children, if requested."""
    params_dict: T_JSON_DICT = dict()
    if node_id is not None:
        params_dict['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params_dict['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    if fetch_relatives is not None:
        params_dict['fetchRelatives'] = fetch_relatives
    cmd_dict = {'method': 'Accessibility.getPartialAXTree', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [AXNode.from_json(i) for i in json_result['nodes']]


def get_root_ax_node(frame_id: typing.Optional[page.FrameId]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, AXNode]:
    """Fetches the root node.
Requires ``enable()`` to have been called previously.

**EXPERIMENTAL**

:param ...:

:param frame_id: *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    if frame_id is not None:
        params_dict['frameId'] = frame_id.to_json()
    cmd_dict = {'method': 'Accessibility.getRootAXNode', 'params': params_dict}
    json_result = yield cmd_dict
    return AXNode.from_json(json_result['node'])


def query_ax_tree(node_id: typing.Optional[dom.NodeId]=None,
    backend_node_id: typing.Optional[dom.BackendNodeId]=None, object_id:
    typing.Optional[runtime.RemoteObjectId]=None, accessible_name: typing.
    Optional[str]=None, role: typing.Optional[str]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:
    """Query a DOM node's accessibility subtree for accessible name and role.
This command computes the name and role for all nodes in the subtree, including those that are
ignored for accessibility, and returns those that match the specified name and role. If no DOM
node is specified, or the DOM node does not exist, the command returns an error. If neither
``accessibleName`` or ``role`` is specified, it returns all the accessibility nodes in the subtree.

**EXPERIMENTAL**

:param ...:

:param node_id: *(Optional)* Identifier of the node for the root to query.

:param backend_node_id: *(Optional)* Identifier of the backend node for the root to query.

:param object_id: *(Optional)* JavaScript object id of the node wrapper for the root to query.

:param accessible_name: *(Optional)* Find nodes with this computed name.

:param role: *(Optional)* Find nodes with this computed role.


:returns: A list of ``Accessibility.AXNode`` matching the specified attributes, including nodes that are ignored for accessibility."""
    params_dict: T_JSON_DICT = dict()
    if node_id is not None:
        params_dict['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params_dict['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    if accessible_name is not None:
        params_dict['accessibleName'] = accessible_name
    if role is not None:
        params_dict['role'] = role
    cmd_dict = {'method': 'Accessibility.queryAXTree', 'params': params_dict}
    json_result = yield cmd_dict
    return [AXNode.from_json(i) for i in json_result['nodes']]


@event_class('Accessibility.loadComplete')
@dataclass
class LoadComplete:
    """**EXPERIMENTAL**

The loadComplete event mirrors the load complete event sent by the browser to assistive
technology when the web page has finished loading."""
    root: AXNode

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->LoadComplete:
        return cls(root=AXNode.from_json(json_obj['root']))


@event_class('Accessibility.nodesUpdated')
@dataclass
class NodesUpdated:
    """**EXPERIMENTAL**

The nodesUpdated event is sent every time a previously requested node has changed the in tree."""
    nodes: typing.List[AXNode]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodesUpdated:
        return cls(nodes=[AXNode.from_json(i) for i in json_obj['nodes']])
