# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from typing import Any, Dict, Generator, Optional, Type, TypeVar, Callable, Protocol

# Basic type alias for JSON objects
T_JSON_DICT = Dict[str, Any]

T = TypeVar('T')  # For generic return type in send
_event_parsers = dict()

class CDPClient(Protocol):
    """
    Protocol defining the expected interface for a CDP client
    used by the generated API wrappers.
    """

    @property
    def is_connected(self) -> bool:
        """Checks if the connection is currently established and active."""
        ...

    def connect(self) -> None:
        """Establishes the connection to the endpoint."""
        ...

    def disconnect(self) -> None:
        """Disconnects from the endpoint and cleans up resources."""
        ...

    def send(
        self,
        cmd_generator: Generator[Dict[str, Any], Optional[Dict[str, Any]], T],
        _response_timeout: Optional[float] = None
    ) -> T:
        """
        Sends the command generated by cmd_generator to the browser
        and returns the result.

        :param cmd_generator: The generator yielding the command dictionary and
                              expecting the result dictionary.
        :param _response_timeout: Optional timeout in seconds for the operation.
                        If None, the client's default timeout may be used.
        :returns: The result of the command, with the type determined by T.
        """
        ...

    def add_event_listener(self, event_type: Type[T], callback: Callable[[T], None]) -> None:
        """Registers a callback for a specific CDP event type."""
        ...

    def remove_event_listener(self, event_type: Type[T], callback: Callable[[T], None]) -> None:
        """Removes a previously registered callback for a specific CDP event type."""
        ...

    def get_event_name(self, event_cls: Type[T]) -> str:
        """
        Finds the CDP event method name (string) for a given event class type.
        """
        ...

def event_class(event_name: str):
    """Decorator to mark a class as representing a CDP event."""
    def decorator(cls):
        cls._cdp_event_name = event_name
        _event_parsers[event_name] = cls
        return cls
    return decorator

def parse_json_event(json: T_JSON_DICT) -> Any:
    """ Parse a JSON dictionary into a CDP event. """
    return _event_parsers[json['method']].from_json(json['params'])

