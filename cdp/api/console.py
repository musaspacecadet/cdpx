# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Console domain."""
import typing
from ..util import CDPClient
from .. import console as _console_module
from deprecated.sphinx import deprecated
None


@deprecated(version='1.3')
class ConsoleAPI:
    """Provides an API wrapper for the 'Console' domain commands.

.. deprecated:: 1.3

Domain Description:
This domain is deprecated - use Runtime or Log instead."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear_messages(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Does nothing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _console_module.clear_messages()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables console domain, prevents further console messages from being reported to the client.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _console_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables console domain, sends the messages collected so far to the client by means of the
``messageAdded`` notification.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _console_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)
