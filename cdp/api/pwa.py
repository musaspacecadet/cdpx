# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the PWA domain."""
import typing
from ..util import CDPClient
from .. import pwa as _pwa_module
from .. import target
None


class PwaAPI:
    """Provides an API wrapper for the 'PWA' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain allows interacting with the browser to control PWAs."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def change_app_user_settings(self, manifest_id: str, link_capturing:
        typing.Optional[bool]=None, display_mode: typing.Optional[
        _pwa_module.DisplayMode]=None, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Changes user settings of the web app identified by its manifestId. If the
app was not installed, this command returns an error. Unset parameters will
be ignored; unrecognized values will cause an error.

Unlike the ones defined in the manifest files of the web apps, these
settings are provided by the browser and controlled by the users, they
impact the way the browser handling the web apps.

See the comment of each parameter.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param link_capturing: *(Optional)* If user allows the links clicked on by the user in the app's scope, or extended scope if the manifest has scope extensions and the flags ``DesktopPWAsLinkCapturingWithScopeExtensions`` and ``WebAppEnableScopeExtensions`` are enabled.  Note, the API does not support resetting the linkCapturing to the initial value, uninstalling and installing the web app again will reset it.  TODO(crbug.com/339453269): Setting this value on ChromeOS is not supported yet.

:param display_mode: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _pwa_module.change_app_user_settings(manifest_id=manifest_id,
            link_capturing=link_capturing, display_mode=display_mode)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_os_app_state(self, manifest_id: str, _response_timeout: typing.
        Optional[float]=None) ->typing.Tuple[int, typing.List[_pwa_module.
        FileHandler]]:
        """Returns the following OS state for the given manifest id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id: The id from the webapp's manifest file, commonly it's the url of the site installing the webapp. See https://web.dev/learn/pwa/web-app-manifest.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **badgeCount** - 
    2. **fileHandlers** -"""
        gen = _pwa_module.get_os_app_state(manifest_id=manifest_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def install(self, manifest_id: str, install_url_or_bundle_url: typing.
        Optional[str]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Installs the given manifest identity, optionally using the given install_url
or IWA bundle location.

TODO(crbug.com/337872319) Support IWA to meet the following specific
requirement.
IWA-specific install description: If the manifest_id is isolated-app://,
install_url_or_bundle_url is required, and can be either an http(s) URL or
file:// URL pointing to a signed web bundle (.swbn). The .swbn file's
signing key must correspond to manifest_id. If Chrome is not in IWA dev
mode, the installation will fail, regardless of the state of the allowlist.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param install_url_or_bundle_url: *(Optional)* The location of the app or bundle overriding the one derived from the manifestId.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _pwa_module.install(manifest_id=manifest_id,
            install_url_or_bundle_url=install_url_or_bundle_url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def launch(self, manifest_id: str, url: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->target.TargetID:
        """Launches the installed web app, or an url in the same web app instead of the
default start url if it is provided. Returns a page Target.TargetID which
can be used to attach to via Target.attachToTarget or similar APIs.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param url: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command.


:returns: ID of the tab target created as a result."""
        gen = _pwa_module.launch(manifest_id=manifest_id, url=url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def launch_files_in_app(self, manifest_id: str, files: typing.List[str],
        _response_timeout: typing.Optional[float]=None) ->typing.List[target
        .TargetID]:
        """Opens one or more local files from an installed web app identified by its
manifestId. The web app needs to have file handlers registered to process
the files. The API returns one or more page Target.TargetIDs which can be
used to attach to via Target.attachToTarget or similar APIs.
If some files in the parameters cannot be handled by the web app, they will
be ignored. If none of the files can be handled, this API returns an error.
If no files are provided as the parameter, this API also returns an error.

According to the definition of the file handlers in the manifest file, one
Target.TargetID may represent a page handling one or more files. The order
of the returned Target.TargetIDs is not guaranteed.

TODO(crbug.com/339454034): Check the existences of the input files.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param files:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: IDs of the tab targets created as the result."""
        gen = _pwa_module.launch_files_in_app(manifest_id=manifest_id,
            files=files)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def open_current_page_in_app(self, manifest_id: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Opens the current page in its web app identified by the manifest id, needs
to be called on a page target. This function returns immediately without
waiting for the app to finish loading.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _pwa_module.open_current_page_in_app(manifest_id=manifest_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def uninstall(self, manifest_id: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Uninstalls the given manifest_id and closes any opened app windows.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _pwa_module.uninstall(manifest_id=manifest_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
