# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the BluetoothEmulation domain."""
import typing
from ..util import CDPClient
from .. import bluetooth_emulation as _bluetooth_emulation_module
None


class BluetoothEmulationAPI:
    """Provides an API wrapper for the 'BluetoothEmulation' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain allows configuring virtual Bluetooth devices to test
the web-bluetooth API."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def add_characteristic(self, service_id: str, characteristic_uuid: str,
        properties: _bluetooth_emulation_module.CharacteristicProperties,
        _response_timeout: typing.Optional[float]=None) ->str:
        """Adds a characteristic with |characteristicUuid| and |properties| to the
service represented by |serviceId|.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param service_id:

:param characteristic_uuid:

:param properties:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: An identifier that uniquely represents this characteristic."""
        gen = _bluetooth_emulation_module.add_characteristic(service_id=
            service_id, characteristic_uuid=characteristic_uuid, properties
            =properties)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def add_descriptor(self, characteristic_id: str, descriptor_uuid: str,
        _response_timeout: typing.Optional[float]=None) ->str:
        """Adds a descriptor with |descriptorUuid| to the characteristic respresented
by |characteristicId|.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param characteristic_id:

:param descriptor_uuid:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: An identifier that uniquely represents this descriptor."""
        gen = _bluetooth_emulation_module.add_descriptor(characteristic_id=
            characteristic_id, descriptor_uuid=descriptor_uuid)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def add_service(self, address: str, service_uuid: str,
        _response_timeout: typing.Optional[float]=None) ->str:
        """Adds a service with |serviceUuid| to the peripheral with |address|.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param address:

:param service_uuid:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: An identifier that uniquely represents this service."""
        gen = _bluetooth_emulation_module.add_service(address=address,
            service_uuid=service_uuid)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disable the BluetoothEmulation domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, state: _bluetooth_emulation_module.CentralState,
        le_supported: bool, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Enable the BluetoothEmulation domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param state: State of the simulated central.

:param le_supported: If the simulated central supports low-energy.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.enable(state=state, le_supported=
            le_supported)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_characteristic(self, characteristic_id: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Removes the characteristic respresented by |characteristicId| from the
simulated central.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param characteristic_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.remove_characteristic(
            characteristic_id=characteristic_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_descriptor(self, descriptor_id: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Removes the descriptor with |descriptorId| from the simulated central.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param descriptor_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.remove_descriptor(descriptor_id=
            descriptor_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_service(self, service_id: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Removes the service respresented by |serviceId| from the simulated central.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param service_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.remove_service(service_id=service_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_simulated_central_state(self, state:
        _bluetooth_emulation_module.CentralState, _response_timeout: typing
        .Optional[float]=None) ->None:
        """Set the state of the simulated central.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param state: State of the simulated central.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.set_simulated_central_state(state
            =state)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def simulate_advertisement(self, entry: _bluetooth_emulation_module.
        ScanEntry, _response_timeout: typing.Optional[float]=None) ->None:
        """Simulates an advertisement packet described in |entry| being received by
the central.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param entry:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.simulate_advertisement(entry=entry)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def simulate_gatt_operation_response(self, address: str, type_:
        _bluetooth_emulation_module.GATTOperationType, code: int,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Simulates the response code from the peripheral with |address| for a
GATT operation of |type|. The |code| value follows the HCI Error Codes from
Bluetooth Core Specification Vol 2 Part D 1.3 List Of Error Codes.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param address:

:param type_:

:param code:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.simulate_gatt_operation_response(
            address=address, type_=type_, code=code)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def simulate_preconnected_peripheral(self, address: str, name: str,
        manufacturer_data: typing.List[_bluetooth_emulation_module.
        ManufacturerData], known_service_uuids: typing.List[str],
        _response_timeout: typing.Optional[float]=None) ->None:
        """Simulates a peripheral with |address|, |name| and |knownServiceUuids|
that has already been connected to the system.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param address:

:param name:

:param manufacturer_data:

:param known_service_uuids:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _bluetooth_emulation_module.simulate_preconnected_peripheral(
            address=address, name=name, manufacturer_data=manufacturer_data,
            known_service_uuids=known_service_uuids)
        return self.client.send(gen, _response_timeout=_response_timeout)
