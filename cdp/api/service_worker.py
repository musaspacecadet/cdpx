# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the ServiceWorker domain."""
import typing
from ..util import CDPClient
from .. import service_worker as _service_worker_module
None


class ServiceWorkerAPI:
    """Provides an API wrapper for the 'ServiceWorker' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def deliver_push_message(self, origin: str, registration_id:
        _service_worker_module.RegistrationID, data: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin:

:param registration_id:

:param data:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.deliver_push_message(origin=origin,
            registration_id=registration_id, data=data)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def dispatch_periodic_sync_event(self, origin: str, registration_id:
        _service_worker_module.RegistrationID, tag: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin:

:param registration_id:

:param tag:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.dispatch_periodic_sync_event(origin=
            origin, registration_id=registration_id, tag=tag)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def dispatch_sync_event(self, origin: str, registration_id:
        _service_worker_module.RegistrationID, tag: str, last_chance: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin:

:param registration_id:

:param tag:

:param last_chance:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.dispatch_sync_event(origin=origin,
            registration_id=registration_id, tag=tag, last_chance=last_chance)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def inspect_worker(self, version_id: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param version_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.inspect_worker(version_id=version_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_force_update_on_page_load(self, force_update_on_page_load: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param force_update_on_page_load:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.set_force_update_on_page_load(
            force_update_on_page_load=force_update_on_page_load)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def skip_waiting(self, scope_url: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param scope_url:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.skip_waiting(scope_url=scope_url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_worker(self, scope_url: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param scope_url:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.start_worker(scope_url=scope_url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_all_workers(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.stop_all_workers()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_worker(self, version_id: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param version_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.stop_worker(version_id=version_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def unregister(self, scope_url: str, _response_timeout: typing.Optional
        [float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param scope_url:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.unregister(scope_url=scope_url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def update_registration(self, scope_url: str, _response_timeout: typing
        .Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param scope_url:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _service_worker_module.update_registration(scope_url=scope_url)
        return self.client.send(gen, _response_timeout=_response_timeout)
