# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the IO domain."""
import typing
from ..util import CDPClient
from .. import io as _io_module
from .. import runtime
None


class IoAPI:
    """Provides an API wrapper for the 'IO' domain commands.

Domain Description:
Input/Output operations for streams produced by DevTools."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def close(self, handle: _io_module.StreamHandle, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Close the stream, discard any temporary backing storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param handle: Handle of the stream to close.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _io_module.close(handle=handle)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def read(self, handle: _io_module.StreamHandle, offset: typing.Optional
        [int]=None, size: typing.Optional[int]=None, _response_timeout:
        typing.Optional[float]=None) ->typing.Tuple[typing.Optional[bool],
        str, bool]:
        """Read a chunk of the stream

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param handle: Handle of the stream to read.

:param offset: *(Optional)* Seek to the specified offset before reading (if not specified, proceed with offset following the last read). Some types of streams may only support sequential reads.

:param size: *(Optional)* Maximum number of bytes to read (left upon the agent discretion if not specified).

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **base64Encoded** - *(Optional)* Set if the data is base64-encoded
    2. **data** - Data that were read.
    3. **eof** - Set if the end-of-file condition occurred while reading."""
        gen = _io_module.read(handle=handle, offset=offset, size=size)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def resolve_blob(self, object_id: runtime.RemoteObjectId,
        _response_timeout: typing.Optional[float]=None) ->str:
        """Return UUID of Blob object specified by a remote object id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param object_id: Object id of a Blob object wrapper.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: UUID of the specified Blob."""
        gen = _io_module.resolve_blob(object_id=object_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
