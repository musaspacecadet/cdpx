# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Runtime domain."""
import typing
from ..util import CDPClient
from .. import runtime as _runtime_module
None


class RuntimeAPI:
    """Provides an API wrapper for the 'Runtime' domain commands.

Domain Description:
Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
Evaluation results are returned as mirror object that expose object type, string representation
and unique identifier that can be used for further object reference. Original objects are
maintained in memory unless they are either explicitly released or are released along with the
other objects in their object group."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def add_binding(self, name: str, execution_context_id: typing.Optional[
        _runtime_module.ExecutionContextId]=None, execution_context_name:
        typing.Optional[str]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """If executionContextId is empty, adds binding with the given name on the
global objects of all inspected contexts, including those created later,
bindings survive reloads.
Binding function takes exactly one argument, this argument should be string,
in case of any other input, function throws an exception.
Each binding function call produces Runtime.bindingCalled notification.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param name:

:param execution_context_id: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If specified, the binding would only be exposed to the specified execution context. If omitted and ``executionContextName`` is not set, the binding is exposed to all execution contexts of the target. This parameter is mutually exclusive with ``executionContextName``. Deprecated in favor of ``executionContextName`` due to an unclear use case and bugs in implementation (crbug.com/1169639). ``executionContextId`` will be removed in the future.

:param execution_context_name: *(Optional)* If specified, the binding is exposed to the executionContext with matching name, even for contexts created after the binding is added. See also ``ExecutionContext.name`` and ``worldName`` parameter to ``Page.addScriptToEvaluateOnNewDocument``. This parameter is mutually exclusive with ``executionContextId``.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.add_binding(name=name, execution_context_id=
            execution_context_id, execution_context_name=execution_context_name
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def await_promise(self, promise_object_id: _runtime_module.
        RemoteObjectId, return_by_value: typing.Optional[bool]=None,
        generate_preview: typing.Optional[bool]=None, _response_timeout:
        typing.Optional[float]=None) ->typing.Tuple[_runtime_module.
        RemoteObject, typing.Optional[_runtime_module.ExceptionDetails]]:
        """Add handler to promise with given promise object id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param promise_object_id: Identifier of the promise.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.

:param generate_preview: *(Optional)* Whether preview should be generated for the result.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **result** - Promise result. Will contain rejected value if promise was rejected.
    2. **exceptionDetails** - *(Optional)* Exception details if stack strace is available."""
        gen = _runtime_module.await_promise(promise_object_id=
            promise_object_id, return_by_value=return_by_value,
            generate_preview=generate_preview)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def call_function_on(self, function_declaration: str, object_id: typing
        .Optional[_runtime_module.RemoteObjectId]=None, arguments: typing.
        Optional[typing.List[_runtime_module.CallArgument]]=None, silent:
        typing.Optional[bool]=None, return_by_value: typing.Optional[bool]=
        None, generate_preview: typing.Optional[bool]=None, user_gesture:
        typing.Optional[bool]=None, await_promise: typing.Optional[bool]=
        None, execution_context_id: typing.Optional[_runtime_module.
        ExecutionContextId]=None, object_group: typing.Optional[str]=None,
        throw_on_side_effect: typing.Optional[bool]=None, unique_context_id:
        typing.Optional[str]=None, serialization_options: typing.Optional[
        _runtime_module.SerializationOptions]=None, _response_timeout:
        typing.Optional[float]=None) ->typing.Tuple[_runtime_module.
        RemoteObject, typing.Optional[_runtime_module.ExceptionDetails]]:
        """Calls function with given declaration on the given object. Object group of the result is
inherited from the target object.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param function_declaration: Declaration of the function to call.

:param object_id: *(Optional)* Identifier of the object to call function on. Either objectId or executionContextId should be specified.

:param arguments: *(Optional)* Call arguments. All call arguments must belong to the same JavaScript world as the target object.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value. Can be overriden by ``serializationOptions``.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.

:param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.

:param execution_context_id: *(Optional)* Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.

:param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation.

:param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to call function on. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental function call in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ``executionContextId``.

:param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ``generatePreview`` and ``returnByValue``.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **result** - Call result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
        gen = _runtime_module.call_function_on(function_declaration=
            function_declaration, object_id=object_id, arguments=arguments,
            silent=silent, return_by_value=return_by_value,
            generate_preview=generate_preview, user_gesture=user_gesture,
            await_promise=await_promise, execution_context_id=
            execution_context_id, object_group=object_group,
            throw_on_side_effect=throw_on_side_effect, unique_context_id=
            unique_context_id, serialization_options=serialization_options)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def compile_script(self, expression: str, source_url: str,
        persist_script: bool, execution_context_id: typing.Optional[
        _runtime_module.ExecutionContextId]=None, _response_timeout: typing
        .Optional[float]=None) ->typing.Tuple[typing.Optional[
        _runtime_module.ScriptId], typing.Optional[_runtime_module.
        ExceptionDetails]]:
        """Compiles expression.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param expression: Expression to compile.

:param source_url: Source url to be set for the script.

:param persist_script: Specifies whether the compiled script should be persisted.

:param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **scriptId** - *(Optional)* Id of the script.
    2. **exceptionDetails** - *(Optional)* Exception details."""
        gen = _runtime_module.compile_script(expression=expression,
            source_url=source_url, persist_script=persist_script,
            execution_context_id=execution_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables reporting of execution contexts creation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def discard_console_entries(self, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Discards collected exceptions and console API calls.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.discard_console_entries()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables reporting of execution contexts creation by means of ``executionContextCreated`` event.
When the reporting gets enabled the event will be sent immediately for each existing execution
context.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def evaluate(self, expression: str, object_group: typing.Optional[str]=
        None, include_command_line_api: typing.Optional[bool]=None, silent:
        typing.Optional[bool]=None, context_id: typing.Optional[
        _runtime_module.ExecutionContextId]=None, return_by_value: typing.
        Optional[bool]=None, generate_preview: typing.Optional[bool]=None,
        user_gesture: typing.Optional[bool]=None, await_promise: typing.
        Optional[bool]=None, throw_on_side_effect: typing.Optional[bool]=
        None, timeout: typing.Optional[_runtime_module.TimeDelta]=None,
        disable_breaks: typing.Optional[bool]=None, repl_mode: typing.
        Optional[bool]=None, allow_unsafe_eval_blocked_by_csp: typing.
        Optional[bool]=None, unique_context_id: typing.Optional[str]=None,
        serialization_options: typing.Optional[_runtime_module.
        SerializationOptions]=None, _response_timeout: typing.Optional[
        float]=None) ->typing.Tuple[_runtime_module.RemoteObject, typing.
        Optional[_runtime_module.ExceptionDetails]]:
        """Evaluates expression on global object.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param expression: Expression to evaluate.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.

:param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param context_id: *(Optional)* Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page. This is mutually exclusive with ``uniqueContextId``, which offers an alternative way to identify the execution context that is more reliable in a multi-process environment.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.

:param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.

:param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation. This implies ``disableBreaks`` below.

:param timeout: **(EXPERIMENTAL)** *(Optional)* Terminate execution after timing out (number of milliseconds).

:param disable_breaks: **(EXPERIMENTAL)** *(Optional)* Disable breakpoints during execution.

:param repl_mode: **(EXPERIMENTAL)** *(Optional)* Setting this flag to true enables ``let`` re-declaration and top-level ``await``. Note that ``let`` variables can only be re-declared if they originate from ``replMode`` themselves.

:param allow_unsafe_eval_blocked_by_csp: **(EXPERIMENTAL)** *(Optional)* The Content Security Policy (CSP) for the target might block 'unsafe-eval' which includes eval(), Function(), setTimeout() and setInterval() when called with non-callable arguments. This flag bypasses CSP for this evaluation and allows unsafe-eval. Defaults to true.

:param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to evaluate in. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental evaluation of the expression in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ``contextId``.

:param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ``generatePreview`` and ``returnByValue``.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **result** - Evaluation result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
        gen = _runtime_module.evaluate(expression=expression, object_group=
            object_group, include_command_line_api=include_command_line_api,
            silent=silent, context_id=context_id, return_by_value=
            return_by_value, generate_preview=generate_preview,
            user_gesture=user_gesture, await_promise=await_promise,
            throw_on_side_effect=throw_on_side_effect, timeout=timeout,
            disable_breaks=disable_breaks, repl_mode=repl_mode,
            allow_unsafe_eval_blocked_by_csp=
            allow_unsafe_eval_blocked_by_csp, unique_context_id=
            unique_context_id, serialization_options=serialization_options)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_exception_details(self, error_object_id: _runtime_module.
        RemoteObjectId, _response_timeout: typing.Optional[float]=None
        ) ->typing.Optional[_runtime_module.ExceptionDetails]:
        """This method tries to lookup and populate exception details for a
JavaScript Error object.
Note that the stackTrace portion of the resulting exceptionDetails will
only be populated if the Runtime domain was enabled at the time when the
Error was thrown.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param error_object_id: The error object for which to resolve the exception details.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: *(Optional)*"""
        gen = _runtime_module.get_exception_details(error_object_id=
            error_object_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_heap_usage(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[float, float, float, float]:
        """Returns the JavaScript heap usage.
It is the total usage of the corresponding isolate not scoped to a particular Runtime.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **usedSize** - Used JavaScript heap size in bytes.
    2. **totalSize** - Allocated JavaScript heap size in bytes.
    3. **embedderHeapUsedSize** - Used size in bytes in the embedder's garbage-collected heap.
    4. **backingStorageSize** - Size in bytes of backing storage for array buffers and external strings."""
        gen = _runtime_module.get_heap_usage()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_isolate_id(self, _response_timeout: typing.Optional[float]=None
        ) ->str:
        """Returns the isolate id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The isolate id."""
        gen = _runtime_module.get_isolate_id()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_properties(self, object_id: _runtime_module.RemoteObjectId,
        own_properties: typing.Optional[bool]=None,
        accessor_properties_only: typing.Optional[bool]=None,
        generate_preview: typing.Optional[bool]=None,
        non_indexed_properties_only: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[
        typing.List[_runtime_module.PropertyDescriptor], typing.Optional[
        typing.List[_runtime_module.InternalPropertyDescriptor]], typing.
        Optional[typing.List[_runtime_module.PrivatePropertyDescriptor]],
        typing.Optional[_runtime_module.ExceptionDetails]]:
        """Returns properties of a given object. Object group of the result is inherited from the target
object.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param object_id: Identifier of the object to return properties for.

:param own_properties: *(Optional)* If true, returns properties belonging only to the element itself, not to its prototype chain.

:param accessor_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the results.

:param non_indexed_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns non-indexed properties only.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **result** - Object properties.
    2. **internalProperties** - *(Optional)* Internal object properties (only of the element itself).
    3. **privateProperties** - *(Optional)* Object private properties.
    4. **exceptionDetails** - *(Optional)* Exception details."""
        gen = _runtime_module.get_properties(object_id=object_id,
            own_properties=own_properties, accessor_properties_only=
            accessor_properties_only, generate_preview=generate_preview,
            non_indexed_properties_only=non_indexed_properties_only)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def global_lexical_scope_names(self, execution_context_id: typing.
        Optional[_runtime_module.ExecutionContextId]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.List[str]:
        """Returns all let, const and class variables from global scope.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param execution_context_id: *(Optional)* Specifies in which execution context to lookup global scope variables.

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _runtime_module.global_lexical_scope_names(execution_context_id
            =execution_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def query_objects(self, prototype_object_id: _runtime_module.
        RemoteObjectId, object_group: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None
        ) ->_runtime_module.RemoteObject:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param prototype_object_id: Identifier of the prototype to return objects for.

:param object_group: *(Optional)* Symbolic group name that can be used to release the results.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Array with objects."""
        gen = _runtime_module.query_objects(prototype_object_id=
            prototype_object_id, object_group=object_group)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def release_object(self, object_id: _runtime_module.RemoteObjectId,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Releases remote object with given id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param object_id: Identifier of the object to release.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.release_object(object_id=object_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def release_object_group(self, object_group: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Releases all remote objects that belong to a given group.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param object_group: Symbolic object group name.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.release_object_group(object_group=object_group)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_binding(self, name: str, _response_timeout: typing.Optional[
        float]=None) ->None:
        """This method does not remove binding function from global object but
unsubscribes current runtime agent from Runtime.bindingCalled notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param name:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.remove_binding(name=name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def run_if_waiting_for_debugger(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Tells inspected instance to run if it was waiting for debugger to attach.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.run_if_waiting_for_debugger()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def run_script(self, script_id: _runtime_module.ScriptId,
        execution_context_id: typing.Optional[_runtime_module.
        ExecutionContextId]=None, object_group: typing.Optional[str]=None,
        silent: typing.Optional[bool]=None, include_command_line_api:
        typing.Optional[bool]=None, return_by_value: typing.Optional[bool]=
        None, generate_preview: typing.Optional[bool]=None, await_promise:
        typing.Optional[bool]=None, _response_timeout: typing.Optional[
        float]=None) ->typing.Tuple[_runtime_module.RemoteObject, typing.
        Optional[_runtime_module.ExceptionDetails]]:
        """Runs script with given id in a given context.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param script_id: Id of the script to run.

:param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value.

:param generate_preview: *(Optional)* Whether preview should be generated for the result.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **result** - Run result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
        gen = _runtime_module.run_script(script_id=script_id,
            execution_context_id=execution_context_id, object_group=
            object_group, silent=silent, include_command_line_api=
            include_command_line_api, return_by_value=return_by_value,
            generate_preview=generate_preview, await_promise=await_promise)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_async_call_stack_depth(self, max_depth: int, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enables or disables async call stacks tracking.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Debugger'.


:param ...:

:param max_depth: Maximum depth of async call stacks. Setting to ``0`` will effectively disable collecting async call stacks (default).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.set_async_call_stack_depth(max_depth=max_depth)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_custom_object_formatter_enabled(self, enabled: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.set_custom_object_formatter_enabled(enabled=
            enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_max_call_stack_size_to_capture(self, size: int,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param size:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.set_max_call_stack_size_to_capture(size=size)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def terminate_execution(self, _response_timeout: typing.Optional[float]
        =None) ->None:
        """Terminate current or next JavaScript execution.
Will cancel the termination when the outer-most script execution ends.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _runtime_module.terminate_execution()
        return self.client.send(gen, _response_timeout=_response_timeout)
