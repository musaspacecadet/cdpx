# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Log domain."""
import typing
from ..util import CDPClient
from .. import log as _log_module
None


class LogAPI:
    """Provides an API wrapper for the 'Log' domain commands.

Domain Description:
Provides access to log entries."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Clears the log.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _log_module.clear()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables log domain, prevents further log entries from being reported to the client.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _log_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables log domain, sends the entries collected so far to the client by means of the
``entryAdded`` notification.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _log_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_violations_report(self, config: typing.List[_log_module.
        ViolationSetting], _response_timeout: typing.Optional[float]=None
        ) ->None:
        """start violation reporting.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param config: Configuration for violations.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _log_module.start_violations_report(config=config)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_violations_report(self, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Stop violation reporting.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _log_module.stop_violations_report()
        return self.client.send(gen, _response_timeout=_response_timeout)
