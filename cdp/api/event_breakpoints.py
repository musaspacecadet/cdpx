# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the EventBreakpoints domain."""
import typing
from ..util import CDPClient
from .. import event_breakpoints as _event_breakpoints_module
None


class EventBreakpointsAPI:
    """Provides an API wrapper for the 'EventBreakpoints' domain commands.

**EXPERIMENTAL**

Domain Description:
EventBreakpoints permits setting JavaScript breakpoints on operations and events
occurring in native code invoked from JavaScript. Once breakpoint is hit, it is
reported through Debugger domain, similarly to regular breakpoints being hit."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Removes all breakpoints

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _event_breakpoints_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_instrumentation_breakpoint(self, event_name: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Removes breakpoint on particular native event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param event_name: Instrumentation name to stop on.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _event_breakpoints_module.remove_instrumentation_breakpoint(
            event_name=event_name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_instrumentation_breakpoint(self, event_name: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets breakpoint on particular native event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param event_name: Instrumentation name to stop on.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _event_breakpoints_module.set_instrumentation_breakpoint(
            event_name=event_name)
        return self.client.send(gen, _response_timeout=_response_timeout)
