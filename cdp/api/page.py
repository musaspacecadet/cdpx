# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Page domain."""
import typing
from ..util import CDPClient
from .. import page as _page_module
from .. import dom
from .. import debugger
from .. import emulation
from .. import io
from .. import network
from .. import runtime
from deprecated.sphinx import deprecated
None


class PageAPI:
    """Provides an API wrapper for the 'Page' domain commands.

Domain Description:
Actions and events related to the inspected page belong to the page domain."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def add_compilation_cache(self, url: str, data: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Seeds compilation cache for given url. Compilation cache does not survive
cross-process navigation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param url:

:param data: Base64-encoded data (Encoded as a base64 string when passed over JSON)

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.add_compilation_cache(url=url, data=data)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def add_script_to_evaluate_on_load(self, script_source: str,
        _response_timeout: typing.Optional[float]=None
        ) ->_page_module.ScriptIdentifier:
        """Deprecated, please use addScriptToEvaluateOnNewDocument instead.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param script_source:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Identifier of the added script."""
        gen = _page_module.add_script_to_evaluate_on_load(script_source=
            script_source)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def add_script_to_evaluate_on_new_document(self, source: str,
        world_name: typing.Optional[str]=None, include_command_line_api:
        typing.Optional[bool]=None, run_immediately: typing.Optional[bool]=
        None, _response_timeout: typing.Optional[float]=None
        ) ->_page_module.ScriptIdentifier:
        """Evaluates given script in every frame upon creation (before loading frame's scripts).

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param source:

:param world_name: **(EXPERIMENTAL)** *(Optional)* If specified, creates an isolated world with the given name and evaluates given script in it. This world name will be used as the ExecutionContextDescription::name when the corresponding event is emitted.

:param include_command_line_api: **(EXPERIMENTAL)** *(Optional)* Specifies whether command line API should be available to the script, defaults to false.

:param run_immediately: **(EXPERIMENTAL)** *(Optional)* If true, runs the script immediately on existing execution contexts or worlds. Default: false.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Identifier of the added script."""
        gen = _page_module.add_script_to_evaluate_on_new_document(source=
            source, world_name=world_name, include_command_line_api=
            include_command_line_api, run_immediately=run_immediately)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def bring_to_front(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Brings page to front (activates tab).

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.bring_to_front()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def capture_screenshot(self, format_: typing.Optional[str]=None,
        quality: typing.Optional[int]=None, clip: typing.Optional[
        _page_module.Viewport]=None, from_surface: typing.Optional[bool]=
        None, capture_beyond_viewport: typing.Optional[bool]=None,
        optimize_for_speed: typing.Optional[bool]=None, _response_timeout:
        typing.Optional[float]=None) ->str:
        """Capture page screenshot.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param format_: *(Optional)* Image compression format (defaults to png).

:param quality: *(Optional)* Compression quality from range [0..100] (jpeg only).

:param clip: *(Optional)* Capture the screenshot of a given region only.

:param from_surface: **(EXPERIMENTAL)** *(Optional)* Capture the screenshot from the surface, rather than the view. Defaults to true.

:param capture_beyond_viewport: **(EXPERIMENTAL)** *(Optional)* Capture the screenshot beyond the viewport. Defaults to false.

:param optimize_for_speed: **(EXPERIMENTAL)** *(Optional)* Optimize image encoding for speed, not for resulting size (defaults to false)

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Base64-encoded image data. (Encoded as a base64 string when passed over JSON)"""
        gen = _page_module.capture_screenshot(format_=format_, quality=
            quality, clip=clip, from_surface=from_surface,
            capture_beyond_viewport=capture_beyond_viewport,
            optimize_for_speed=optimize_for_speed)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def capture_snapshot(self, format_: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->str:
        """Returns a snapshot of the page as a string. For MHTML format, the serialization includes
iframes, shadow DOM, external resources, and element-inline styles.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param format_: *(Optional)* Format (defaults to mhtml).

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Serialized page data."""
        gen = _page_module.capture_snapshot(format_=format_)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_compilation_cache(self, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Clears seeded compilation cache.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.clear_compilation_cache()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def clear_device_metrics_override(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Clears the overridden device metrics.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Emulation'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.clear_device_metrics_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def clear_device_orientation_override(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Clears the overridden Device Orientation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'DeviceOrientation'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.clear_device_orientation_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def clear_geolocation_override(self, _response_timeout: typing.Optional
        [float]=None) ->None:
        """Clears the overridden Geolocation Position and Error.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Emulation'.

.. deprecated:: 1.3


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.clear_geolocation_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def close(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Tries to close page, running its beforeunload hooks, if any.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.close()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def crash(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Crashes renderer on the IO thread, generates minidumps.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.crash()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def create_isolated_world(self, frame_id: _page_module.FrameId,
        world_name: typing.Optional[str]=None, grant_univeral_access:
        typing.Optional[bool]=None, _response_timeout: typing.Optional[
        float]=None) ->runtime.ExecutionContextId:
        """Creates an isolated world for the given frame.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param frame_id: Id of the frame in which the isolated world should be created.

:param world_name: *(Optional)* An optional name which is reported in the Execution Context.

:param grant_univeral_access: *(Optional)* Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Execution context of the isolated world."""
        gen = _page_module.create_isolated_world(frame_id=frame_id,
            world_name=world_name, grant_univeral_access=grant_univeral_access)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def delete_cookie(self, cookie_name: str, url: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Deletes browser cookie with given name, domain and path.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Network'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param cookie_name: Name of the cookie to remove.

:param url: URL to match cooke domain and path.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.delete_cookie(cookie_name=cookie_name, url=url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables page domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, enable_file_chooser_opened_event: typing.Optional[bool
        ]=None, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables page domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enable_file_chooser_opened_event: **(EXPERIMENTAL)** *(Optional)* If true, the ``Page.fileChooserOpened`` event will be emitted regardless of the state set by ``Page.setInterceptFileChooserDialog`` command (default: false).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.enable(enable_file_chooser_opened_event=
            enable_file_chooser_opened_event)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def generate_test_report(self, message: str, group: typing.Optional[str
        ]=None, _response_timeout: typing.Optional[float]=None) ->None:
        """Generates a report for testing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param message: Message to be displayed in the report.

:param group: *(Optional)* Specifies the endpoint group to deliver the report to.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.generate_test_report(message=message, group=group)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_ad_script_id(self, frame_id: _page_module.FrameId,
        _response_timeout: typing.Optional[float]=None) ->typing.Optional[
        _page_module.AdScriptId]:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param frame_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: *(Optional)* Identifies the bottom-most script which caused the frame to be labelled as an ad. Only sent if frame is labelled as an ad and id is available."""
        gen = _page_module.get_ad_script_id(frame_id=frame_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_app_id(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[typing.Optional[str], typing.Optional[str]]:
        """Returns the unique (PWA) app id.
Only returns values if the feature flag 'WebAppEnableManifestId' is enabled

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **appId** - *(Optional)* App id, either from manifest's id attribute or computed from start_url
    2. **recommendedId** - *(Optional)* Recommendation for manifest's id attribute to match current id computed from start_url"""
        gen = _page_module.get_app_id()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_app_manifest(self, manifest_id: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[str,
        typing.List[_page_module.AppManifestError], typing.Optional[str],
        typing.Optional[_page_module.AppManifestParsedProperties],
        _page_module.WebAppManifest]:
        """Gets the processed manifest for this current document.
  This API always waits for the manifest to be loaded.
  If manifestId is provided, and it does not match the manifest of the
    current document, this API errors out.
  If there is not a loaded page, this API errors out immediately.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param manifest_id: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **url** - Manifest location.
    2. **errors** - 
    3. **data** - *(Optional)* Manifest content.
    4. **parsed** - *(Optional)* Parsed manifest properties. Deprecated, use manifest instead.
    5. **manifest** -"""
        gen = _page_module.get_app_manifest(manifest_id=manifest_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_frame_tree(self, _response_timeout: typing.Optional[float]=None
        ) ->_page_module.FrameTree:
        """Returns present frame tree structure.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Present frame tree structure."""
        gen = _page_module.get_frame_tree()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_installability_errors(self, _response_timeout: typing.Optional[
        float]=None) ->typing.List[_page_module.InstallabilityError]:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _page_module.get_installability_errors()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_layout_metrics(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[_page_module.LayoutViewport, _page_module.
        VisualViewport, dom.Rect, _page_module.LayoutViewport, _page_module
        .VisualViewport, dom.Rect]:
        """Returns metrics relating to the layouting of the page, such as viewport bounds/scale.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **layoutViewport** - Deprecated metrics relating to the layout viewport. Is in device pixels. Use ``cssLayoutViewport`` instead.
    2. **visualViewport** - Deprecated metrics relating to the visual viewport. Is in device pixels. Use ``cssVisualViewport`` instead.
    3. **contentSize** - Deprecated size of scrollable area. Is in DP. Use ``cssContentSize`` instead.
    4. **cssLayoutViewport** - Metrics relating to the layout viewport in CSS pixels.
    5. **cssVisualViewport** - Metrics relating to the visual viewport in CSS pixels.
    6. **cssContentSize** - Size of scrollable area in CSS pixels."""
        gen = _page_module.get_layout_metrics()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def get_manifest_icons(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.Optional[str]:
        """Deprecated because it's not guaranteed that the returned icon is in fact the one used for PWA installation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: *(Optional)*"""
        gen = _page_module.get_manifest_icons()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_navigation_history(self, _response_timeout: typing.Optional[
        float]=None) ->typing.Tuple[int, typing.List[_page_module.
        NavigationEntry]]:
        """Returns navigation history for the current page.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **currentIndex** - Index of the current navigation history entry.
    2. **entries** - Array of navigation history entries."""
        gen = _page_module.get_navigation_history()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_origin_trials(self, frame_id: _page_module.FrameId,
        _response_timeout: typing.Optional[float]=None) ->typing.List[
        _page_module.OriginTrial]:
        """Get Origin Trials on given frame.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param frame_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _page_module.get_origin_trials(frame_id=frame_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_permissions_policy_state(self, frame_id: _page_module.FrameId,
        _response_timeout: typing.Optional[float]=None) ->typing.List[
        _page_module.PermissionsPolicyFeatureState]:
        """Get Permissions Policy state on given frame.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param frame_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _page_module.get_permissions_policy_state(frame_id=frame_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_resource_content(self, frame_id: _page_module.FrameId, url: str,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[str,
        bool]:
        """Returns content of the given resource.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param frame_id: Frame id to get resource for.

:param url: URL of the resource to get content for.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **content** - Resource content.
    2. **base64Encoded** - True, if content was served as base64."""
        gen = _page_module.get_resource_content(frame_id=frame_id, url=url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_resource_tree(self, _response_timeout: typing.Optional[float]=None
        ) ->_page_module.FrameResourceTree:
        """Returns present frame / resource tree structure.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Present frame / resource tree structure."""
        gen = _page_module.get_resource_tree()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def handle_java_script_dialog(self, accept: bool, prompt_text: typing.
        Optional[str]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param accept: Whether to accept or dismiss the dialog.

:param prompt_text: *(Optional)* The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.handle_java_script_dialog(accept=accept,
            prompt_text=prompt_text)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def navigate(self, url: str, referrer: typing.Optional[str]=None,
        transition_type: typing.Optional[_page_module.TransitionType]=None,
        frame_id: typing.Optional[_page_module.FrameId]=None,
        referrer_policy: typing.Optional[_page_module.ReferrerPolicy]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[
        _page_module.FrameId, typing.Optional[network.LoaderId], typing.
        Optional[str]]:
        """Navigates current page to the given URL.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param url: URL to navigate the page to.

:param referrer: *(Optional)* Referrer URL.

:param transition_type: *(Optional)* Intended transition type.

:param frame_id: *(Optional)* Frame id to navigate, if not specified navigates the top frame.

:param referrer_policy: **(EXPERIMENTAL)** *(Optional)* Referrer-policy used for the navigation.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **frameId** - Frame id that has navigated (or failed to navigate)
    2. **loaderId** - *(Optional)* Loader identifier. This is omitted in case of same-document navigation, as the previously committed loaderId would not change.
    3. **errorText** - *(Optional)* User friendly error message, present if and only if navigation has failed."""
        gen = _page_module.navigate(url=url, referrer=referrer,
            transition_type=transition_type, frame_id=frame_id,
            referrer_policy=referrer_policy)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def navigate_to_history_entry(self, entry_id: int, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Navigates current page to the given history entry.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param entry_id: Unique id of the entry to navigate to.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.navigate_to_history_entry(entry_id=entry_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def print_to_pdf(self, landscape: typing.Optional[bool]=None,
        display_header_footer: typing.Optional[bool]=None, print_background:
        typing.Optional[bool]=None, scale: typing.Optional[float]=None,
        paper_width: typing.Optional[float]=None, paper_height: typing.
        Optional[float]=None, margin_top: typing.Optional[float]=None,
        margin_bottom: typing.Optional[float]=None, margin_left: typing.
        Optional[float]=None, margin_right: typing.Optional[float]=None,
        page_ranges: typing.Optional[str]=None, header_template: typing.
        Optional[str]=None, footer_template: typing.Optional[str]=None,
        prefer_css_page_size: typing.Optional[bool]=None, transfer_mode:
        typing.Optional[str]=None, generate_tagged_pdf: typing.Optional[
        bool]=None, generate_document_outline: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[str,
        typing.Optional[io.StreamHandle]]:
        """Print page as PDF.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param landscape: *(Optional)* Paper orientation. Defaults to false.

:param display_header_footer: *(Optional)* Display header and footer. Defaults to false.

:param print_background: *(Optional)* Print background graphics. Defaults to false.

:param scale: *(Optional)* Scale of the webpage rendering. Defaults to 1.

:param paper_width: *(Optional)* Paper width in inches. Defaults to 8.5 inches.

:param paper_height: *(Optional)* Paper height in inches. Defaults to 11 inches.

:param margin_top: *(Optional)* Top margin in inches. Defaults to 1cm (~0.4 inches).

:param margin_bottom: *(Optional)* Bottom margin in inches. Defaults to 1cm (~0.4 inches).

:param margin_left: *(Optional)* Left margin in inches. Defaults to 1cm (~0.4 inches).

:param margin_right: *(Optional)* Right margin in inches. Defaults to 1cm (~0.4 inches).

:param page_ranges: *(Optional)* Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are printed in the document order, not in the order specified, and no more than once. Defaults to empty string, which implies the entire document is printed. The page numbers are quietly capped to actual page count of the document, and ranges beyond the end of the document are ignored. If this results in no pages to print, an error is reported. It is an error to specify a range with start greater than end.

:param header_template: *(Optional)* HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: - ``date``: formatted print date - ``title``: document title - ``url``: document location - ``pageNumber``: current page number - ``totalPages``: total pages in the document  For example, ``<span class=title></span>`` would generate span containing the title.

:param footer_template: *(Optional)* HTML template for the print footer. Should use the same format as the ``headerTemplate``.

:param prefer_css_page_size: *(Optional)* Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.

:param transfer_mode: **(EXPERIMENTAL)** *(Optional)* return as stream

:param generate_tagged_pdf: **(EXPERIMENTAL)** *(Optional)* Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.

:param generate_document_outline: **(EXPERIMENTAL)** *(Optional)* Whether or not to embed the document outline into the PDF.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **data** - Base64-encoded pdf data. Empty if |returnAsStream| is specified. (Encoded as a base64 string when passed over JSON)
    2. **stream** - *(Optional)* A handle of the stream that holds resulting PDF data."""
        gen = _page_module.print_to_pdf(landscape=landscape,
            display_header_footer=display_header_footer, print_background=
            print_background, scale=scale, paper_width=paper_width,
            paper_height=paper_height, margin_top=margin_top, margin_bottom
            =margin_bottom, margin_left=margin_left, margin_right=
            margin_right, page_ranges=page_ranges, header_template=
            header_template, footer_template=footer_template,
            prefer_css_page_size=prefer_css_page_size, transfer_mode=
            transfer_mode, generate_tagged_pdf=generate_tagged_pdf,
            generate_document_outline=generate_document_outline)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def produce_compilation_cache(self, scripts: typing.List[_page_module.
        CompilationCacheParams], _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Requests backend to produce compilation cache for the specified scripts.
``scripts`` are appended to the list of scripts for which the cache
would be produced. The list may be reset during page navigation.
When script with a matching URL is encountered, the cache is optionally
produced upon backend discretion, based on internal heuristics.
See also: ``Page.compilationCacheProduced``.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param scripts:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.produce_compilation_cache(scripts=scripts)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reload(self, ignore_cache: typing.Optional[bool]=None,
        script_to_evaluate_on_load: typing.Optional[str]=None, loader_id:
        typing.Optional[network.LoaderId]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Reloads given page optionally ignoring the cache.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param ignore_cache: *(Optional)* If true, browser cache is ignored (as if the user pressed Shift+refresh).

:param script_to_evaluate_on_load: *(Optional)* If set, the script will be injected into all frames of the inspected page after reload. Argument will be ignored if reloading dataURL origin.

:param loader_id: **(EXPERIMENTAL)** *(Optional)* If set, an error will be thrown if the target page's main frame's loader id does not match the provided id. This prevents accidentally reloading an unintended target in case there's a racing navigation.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.reload(ignore_cache=ignore_cache,
            script_to_evaluate_on_load=script_to_evaluate_on_load,
            loader_id=loader_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def remove_script_to_evaluate_on_load(self, identifier: _page_module.
        ScriptIdentifier, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Deprecated, please use removeScriptToEvaluateOnNewDocument instead.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param identifier:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.remove_script_to_evaluate_on_load(identifier=
            identifier)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_script_to_evaluate_on_new_document(self, identifier:
        _page_module.ScriptIdentifier, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Removes given script from the list.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param identifier:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.remove_script_to_evaluate_on_new_document(identifier
            =identifier)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reset_navigation_history(self, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Resets navigation history for the current page.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.reset_navigation_history()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def screencast_frame_ack(self, session_id: int, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Acknowledges that a screencast frame has been received by the frontend.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param session_id: Frame number.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.screencast_frame_ack(session_id=session_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def search_in_resource(self, frame_id: _page_module.FrameId, url: str,
        query: str, case_sensitive: typing.Optional[bool]=None, is_regex:
        typing.Optional[bool]=None, _response_timeout: typing.Optional[
        float]=None) ->typing.List[debugger.SearchMatch]:
        """Searches for given string in resource content.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param frame_id: Frame id for resource to search in.

:param url: URL of the resource to search in.

:param query: String to search for.

:param case_sensitive: *(Optional)* If true, search is case sensitive.

:param is_regex: *(Optional)* If true, treats string parameter as regex.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: List of search matches."""
        gen = _page_module.search_in_resource(frame_id=frame_id, url=url,
            query=query, case_sensitive=case_sensitive, is_regex=is_regex)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_ad_blocking_enabled(self, enabled: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enable Chrome's experimental ad filter on all sites.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: Whether to block ads.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_ad_blocking_enabled(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_bypass_csp(self, enabled: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Enable page Content Security Policy by-passing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enabled: Whether to bypass page CSP.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_bypass_csp(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_device_metrics_override(self, width: int, height: int,
        device_scale_factor: float, mobile: bool, scale: typing.Optional[
        float]=None, screen_width: typing.Optional[int]=None, screen_height:
        typing.Optional[int]=None, position_x: typing.Optional[int]=None,
        position_y: typing.Optional[int]=None, dont_set_visible_size:
        typing.Optional[bool]=None, screen_orientation: typing.Optional[
        emulation.ScreenOrientation]=None, viewport: typing.Optional[
        _page_module.Viewport]=None, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
query results).

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Emulation'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.

:param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.

:param device_scale_factor: Overriding device scale factor value. 0 disables the override.

:param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.

:param scale: *(Optional)* Scale to apply to resulting view image.

:param screen_width: *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).

:param screen_height: *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).

:param position_x: *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).

:param position_y: *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).

:param dont_set_visible_size: *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.

:param screen_orientation: *(Optional)* Screen orientation override.

:param viewport: *(Optional)* The viewport dimensions and scale. If not set, the override is cleared.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_device_metrics_override(width=width, height=
            height, device_scale_factor=device_scale_factor, mobile=mobile,
            scale=scale, screen_width=screen_width, screen_height=
            screen_height, position_x=position_x, position_y=position_y,
            dont_set_visible_size=dont_set_visible_size, screen_orientation
            =screen_orientation, viewport=viewport)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_device_orientation_override(self, alpha: float, beta: float,
        gamma: float, _response_timeout: typing.Optional[float]=None) ->None:
        """Overrides the Device Orientation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'DeviceOrientation'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param alpha: Mock alpha

:param beta: Mock beta

:param gamma: Mock gamma

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_device_orientation_override(alpha=alpha,
            beta=beta, gamma=gamma)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_document_content(self, frame_id: _page_module.FrameId, html:
        str, _response_timeout: typing.Optional[float]=None) ->None:
        """Sets given markup as the document's HTML.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param frame_id: Frame id to set HTML for.

:param html: HTML content to set.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_document_content(frame_id=frame_id, html=html)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_download_behavior(self, behavior: str, download_path: typing.
        Optional[str]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Set the behavior when downloading a file.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny).

:param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow'

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_download_behavior(behavior=behavior,
            download_path=download_path)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_font_families(self, font_families: _page_module.FontFamilies,
        for_scripts: typing.Optional[typing.List[_page_module.
        ScriptFontFamilies]]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """Set generic font families.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param font_families: Specifies font families to set. If a font family is not specified, it won't be changed.

:param for_scripts: *(Optional)* Specifies font families to set for individual scripts.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_font_families(font_families=font_families,
            for_scripts=for_scripts)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_font_sizes(self, font_sizes: _page_module.FontSizes,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Set default font sizes.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param font_sizes: Specifies font sizes to set. If a font size is not specified, it won't be changed.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_font_sizes(font_sizes=font_sizes)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_geolocation_override(self, latitude: typing.Optional[float]=
        None, longitude: typing.Optional[float]=None, accuracy: typing.
        Optional[float]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
unavailable.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Emulation'.

.. deprecated:: 1.3


:param ...:

:param latitude: *(Optional)* Mock latitude

:param longitude: *(Optional)* Mock longitude

:param accuracy: *(Optional)* Mock accuracy

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_geolocation_override(latitude=latitude,
            longitude=longitude, accuracy=accuracy)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_intercept_file_chooser_dialog(self, enabled: bool, cancel:
        typing.Optional[bool]=None, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Intercept file chooser requests and transfer control to protocol clients.
When file chooser interception is enabled, native file chooser dialog is not shown.
Instead, a protocol event ``Page.fileChooserOpened`` is emitted.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enabled:

:param cancel: **(EXPERIMENTAL)** *(Optional)* If true, cancels the dialog by emitting relevant events (if any) in addition to not showing it if the interception is enabled (default: false).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_intercept_file_chooser_dialog(enabled=
            enabled, cancel=cancel)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_lifecycle_events_enabled(self, enabled: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Controls whether page will emit lifecycle events.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enabled: If true, starts emitting lifecycle events.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_lifecycle_events_enabled(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_prerendering_allowed(self, is_allowed: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enable/disable prerendering manually.

This command is a short-term solution for https://crbug.com/1440085.
See https://docs.google.com/document/d/12HVmFxYj5Jc-eJr5OmWsa2bqTJsbgGLKI6ZIyx0_wpA
for more details.

TODO(https://crbug.com/1440085): Remove this once Puppeteer supports tab targets.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param is_allowed:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_prerendering_allowed(is_allowed=is_allowed)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_rph_registration_mode(self, mode: _page_module.AutoResponseMode,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Extensions for Custom Handlers API:
https://html.spec.whatwg.org/multipage/system-state.html#rph-automation

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param mode:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_rph_registration_mode(mode=mode)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_spc_transaction_mode(self, mode: _page_module.AutoResponseMode,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets the Secure Payment Confirmation transaction mode.
https://w3c.github.io/secure-payment-confirmation/#sctn-automation-set-spc-transaction-mode

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param mode:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_spc_transaction_mode(mode=mode)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_touch_emulation_enabled(self, enabled: bool, configuration:
        typing.Optional[str]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """Toggles mouse event-based touch event emulation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

Redirects to command 'Emulation'.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param enabled: Whether the touch event emulation should be enabled.

:param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_touch_emulation_enabled(enabled=enabled,
            configuration=configuration)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_web_lifecycle_state(self, state: str, _response_timeout: typing
        .Optional[float]=None) ->None:
        """Tries to update the web lifecycle state of the page.
It will transition the page to the given state according to:
https://github.com/WICG/web-lifecycle/

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param state: Target lifecycle state

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.set_web_lifecycle_state(state=state)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_screencast(self, format_: typing.Optional[str]=None, quality:
        typing.Optional[int]=None, max_width: typing.Optional[int]=None,
        max_height: typing.Optional[int]=None, every_nth_frame: typing.
        Optional[int]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Starts sending each frame using the ``screencastFrame`` event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param format_: *(Optional)* Image compression format.

:param quality: *(Optional)* Compression quality from range [0..100].

:param max_width: *(Optional)* Maximum screenshot width.

:param max_height: *(Optional)* Maximum screenshot height.

:param every_nth_frame: *(Optional)* Send every n-th frame.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.start_screencast(format_=format_, quality=
            quality, max_width=max_width, max_height=max_height,
            every_nth_frame=every_nth_frame)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_loading(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Force the page stop all navigations and pending resource fetches.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.stop_loading()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_screencast(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Stops sending each frame in the ``screencastFrame``.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.stop_screencast()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def wait_for_debugger(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _page_module.wait_for_debugger()
        return self.client.send(gen, _response_timeout=_response_timeout)
