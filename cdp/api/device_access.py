# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the DeviceAccess domain."""
import typing
from ..util import CDPClient
from .. import device_access as _device_access_module
None


class DeviceAccessAPI:
    """Provides an API wrapper for the 'DeviceAccess' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def cancel_prompt(self, id_: _device_access_module.RequestId,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _device_access_module.cancel_prompt(id_=id_)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disable events in this domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _device_access_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enable events in this domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _device_access_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def select_prompt(self, id_: _device_access_module.RequestId, device_id:
        _device_access_module.DeviceId, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Select a device in response to a DeviceAccess.deviceRequestPrompted event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_:

:param device_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _device_access_module.select_prompt(id_=id_, device_id=device_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
