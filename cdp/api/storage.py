# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Storage domain."""
import typing
from ..util import CDPClient
from .. import storage as _storage_module
from .. import browser
from .. import network
from .. import page
None


class StorageAPI:
    """Provides an API wrapper for the 'Storage' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear_cookies(self, browser_context_id: typing.Optional[browser.
        BrowserContextID]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Clears cookies.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.clear_cookies(browser_context_id=
            browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_data_for_origin(self, origin: str, storage_types: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Clears storage for origin.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param storage_types: Comma separated list of StorageType to clear.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.clear_data_for_origin(origin=origin,
            storage_types=storage_types)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_data_for_storage_key(self, storage_key: str, storage_types:
        str, _response_timeout: typing.Optional[float]=None) ->None:
        """Clears storage for storage key.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_key: Storage key.

:param storage_types: Comma separated list of StorageType to clear.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.clear_data_for_storage_key(storage_key=
            storage_key, storage_types=storage_types)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_shared_storage_entries(self, owner_origin: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Clears all entries for a given origin's shared storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.clear_shared_storage_entries(owner_origin=
            owner_origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_trust_tokens(self, issuer_origin: str, _response_timeout:
        typing.Optional[float]=None) ->bool:
        """Removes all Trust Tokens issued by the provided issuerOrigin.
Leaves other stored data, including the issuer's Redemption Records, intact.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param issuer_origin:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: True if any tokens were deleted, false otherwise."""
        gen = _storage_module.clear_trust_tokens(issuer_origin=issuer_origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def delete_shared_storage_entry(self, owner_origin: str, key: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Deletes entry for ``key`` (if it exists) for a given origin's shared storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param key:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.delete_shared_storage_entry(owner_origin=
            owner_origin, key=key)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def delete_storage_bucket(self, bucket: _storage_module.StorageBucket,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Deletes the Storage Bucket with the given storage key and bucket name.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param bucket:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.delete_storage_bucket(bucket=bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_affected_urls_for_third_party_cookie_metadata(self,
        first_party_url: str, third_party_urls: typing.List[str],
        _response_timeout: typing.Optional[float]=None) ->typing.List[str]:
        """Returns the list of URLs from a page and its embedded resources that match
existing grace period URL pattern rules.
https://developers.google.com/privacy-sandbox/cookies/temporary-exceptions/grace-period

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param first_party_url: The URL of the page currently being visited.

:param third_party_urls: The list of embedded resource URLs from the page.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Array of matching URLs. If there is a primary pattern match for the first- party URL, only the first-party URL is returned in the array."""
        gen = (_storage_module.
            get_affected_urls_for_third_party_cookie_metadata(
            first_party_url=first_party_url, third_party_urls=third_party_urls)
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_cookies(self, browser_context_id: typing.Optional[browser.
        BrowserContextID]=None, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[network.Cookie]:
        """Returns all browser cookies.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Array of cookie objects."""
        gen = _storage_module.get_cookies(browser_context_id=browser_context_id
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_interest_group_details(self, owner_origin: str, name: str,
        _response_timeout: typing.Optional[float]=None) ->T_JSON_DICT:
        """Gets details for a named interest group.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param name:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: This largely corresponds to: https://wicg.github.io/turtledove/#dictdef-generatebidinterestgroup but has absolute expirationTime instead of relative lifetimeMs and also adds joiningOrigin."""
        gen = _storage_module.get_interest_group_details(owner_origin=
            owner_origin, name=name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_related_website_sets(self, _response_timeout: typing.Optional[
        float]=None) ->typing.List[_storage_module.RelatedWebsiteSet]:
        """Returns the effective Related Website Sets in use by this profile for the browser
session. The effective Related Website Sets will not change during a browser session.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.get_related_website_sets()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_shared_storage_entries(self, owner_origin: str,
        _response_timeout: typing.Optional[float]=None) ->typing.List[
        _storage_module.SharedStorageEntry]:
        """Gets the entries in an given origin's shared storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.get_shared_storage_entries(owner_origin=
            owner_origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_shared_storage_metadata(self, owner_origin: str,
        _response_timeout: typing.Optional[float]=None
        ) ->_storage_module.SharedStorageMetadata:
        """Gets metadata for an origin's shared storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.get_shared_storage_metadata(owner_origin=
            owner_origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_storage_key_for_frame(self, frame_id: page.FrameId,
        _response_timeout: typing.Optional[float]=None
        ) ->_storage_module.SerializedStorageKey:
        """Returns a storage key given a frame id.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param frame_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.get_storage_key_for_frame(frame_id=frame_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_trust_tokens(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[_storage_module.TrustTokens]:
        """Returns the number of stored Trust Tokens per issuer for the
current browsing context.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.get_trust_tokens()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_usage_and_quota(self, origin: str, _response_timeout: typing.
        Optional[float]=None) ->typing.Tuple[float, float, bool, typing.
        List[_storage_module.UsageForType]]:
        """Returns usage and quota in bytes.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **usage** - Storage usage (bytes).
    2. **quota** - Storage quota (bytes).
    3. **overrideActive** - Whether or not the origin has an active storage quota override
    4. **usageBreakdown** - Storage usage per type (bytes)."""
        gen = _storage_module.get_usage_and_quota(origin=origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def override_quota_for_origin(self, origin: str, quota_size: typing.
        Optional[float]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Override quota for the specified origin

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param origin: Security origin.

:param quota_size: *(Optional)* The quota size (in bytes) to override the original quota with. If this is called multiple times, the overridden quota will be equal to the quotaSize provided in the final call. If this is called without specifying a quotaSize, the quota will be reset to the default value for the specified origin. If this is called multiple times with different origins, the override will be maintained for each origin until it is disabled (called without a quotaSize).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.override_quota_for_origin(origin=origin,
            quota_size=quota_size)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reset_shared_storage_budget(self, owner_origin: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Resets the budget for ``ownerOrigin`` by clearing all budget withdrawals.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.reset_shared_storage_budget(owner_origin=
            owner_origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def run_bounce_tracking_mitigations(self, _response_timeout: typing.
        Optional[float]=None) ->typing.List[str]:
        """Deletes state for sites identified as potential bounce trackers, immediately.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _storage_module.run_bounce_tracking_mitigations()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def send_pending_attribution_reports(self, _response_timeout: typing.
        Optional[float]=None) ->int:
        """Sends all pending Attribution Reports immediately, regardless of their
scheduled report time.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The number of reports that were sent."""
        gen = _storage_module.send_pending_attribution_reports()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_attribution_reporting_local_testing_mode(self, enabled: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """https://wicg.github.io/attribution-reporting-api/

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: If enabled, noise is suppressed and reports are sent immediately.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_attribution_reporting_local_testing_mode(
            enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_attribution_reporting_tracking(self, enable: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Enables/disables issuing of Attribution Reporting events.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enable:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_attribution_reporting_tracking(enable=enable)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_cookies(self, cookies: typing.List[network.CookieParam],
        browser_context_id: typing.Optional[browser.BrowserContextID]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets given cookies.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param cookies: Cookies to be set.

:param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_cookies(cookies=cookies,
            browser_context_id=browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_interest_group_auction_tracking(self, enable: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Enables/Disables issuing of interestGroupAuctionEventOccurred and
interestGroupAuctionNetworkRequestCreated.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enable:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_interest_group_auction_tracking(enable=enable
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_interest_group_tracking(self, enable: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enables/Disables issuing of interestGroupAccessed events.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enable:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_interest_group_tracking(enable=enable)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_protected_audience_k_anonymity(self, owner: str, name: str,
        hashes: typing.List[str], _response_timeout: typing.Optional[float]
        =None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param owner:

:param name:

:param hashes:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_protected_audience_k_anonymity(owner=
            owner, name=name, hashes=hashes)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_shared_storage_entry(self, owner_origin: str, key: str, value:
        str, ignore_if_present: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets entry with ``key`` and ``value`` for a given origin's shared storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param owner_origin:

:param key:

:param value:

:param ignore_if_present: *(Optional)* If ``ignoreIfPresent`` is included and true, then only sets the entry if ``key`` doesn't already exist.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_shared_storage_entry(owner_origin=
            owner_origin, key=key, value=value, ignore_if_present=
            ignore_if_present)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_shared_storage_tracking(self, enable: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enables/disables issuing of sharedStorageAccessed events.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enable:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_shared_storage_tracking(enable=enable)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_storage_bucket_tracking(self, storage_key: str, enable: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Set tracking for a storage key's buckets.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param storage_key:

:param enable:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.set_storage_bucket_tracking(storage_key=
            storage_key, enable=enable)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def trac_typeexed_db_for_origin(self, origin: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Registers origin to be notified when an update occurs to its IndexedDB.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.trac_typeexed_db_for_origin(origin=origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def trac_typeexed_db_for_storage_key(self, storage_key: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Registers storage key to be notified when an update occurs to its IndexedDB.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_key: Storage key.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.trac_typeexed_db_for_storage_key(storage_key=
            storage_key)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def track_cache_storage_for_origin(self, origin: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Registers origin to be notified when an update occurs to its cache storage list.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.track_cache_storage_for_origin(origin=origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def track_cache_storage_for_storage_key(self, storage_key: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Registers storage key to be notified when an update occurs to its cache storage list.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_key: Storage key.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.track_cache_storage_for_storage_key(storage_key
            =storage_key)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def untrac_typeexed_db_for_origin(self, origin: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Unregisters origin from receiving notifications for IndexedDB.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.untrac_typeexed_db_for_origin(origin=origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def untrac_typeexed_db_for_storage_key(self, storage_key: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Unregisters storage key from receiving notifications for IndexedDB.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_key: Storage key.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.untrac_typeexed_db_for_storage_key(storage_key
            =storage_key)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def untrack_cache_storage_for_origin(self, origin: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Unregisters origin from receiving notifications for cache storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param origin: Security origin.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.untrack_cache_storage_for_origin(origin=origin)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def untrack_cache_storage_for_storage_key(self, storage_key: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Unregisters storage key from receiving notifications for cache storage.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_key: Storage key.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _storage_module.untrack_cache_storage_for_storage_key(storage_key
            =storage_key)
        return self.client.send(gen, _response_timeout=_response_timeout)
