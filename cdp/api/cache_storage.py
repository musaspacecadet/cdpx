# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the CacheStorage domain."""
import typing
from ..util import CDPClient
from .. import cache_storage as _cache_storage_module
from .. import storage
None


class CacheStorageAPI:
    """Provides an API wrapper for the 'CacheStorage' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def delete_cache(self, cache_id: _cache_storage_module.CacheId,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Deletes a cache.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param cache_id: Id of cache for deletion.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cache_storage_module.delete_cache(cache_id=cache_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def delete_entry(self, cache_id: _cache_storage_module.CacheId, request:
        str, _response_timeout: typing.Optional[float]=None) ->None:
        """Deletes a cache entry.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param cache_id: Id of cache where the entry will be deleted.

:param request: URL spec of the request.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cache_storage_module.delete_entry(cache_id=cache_id, request
            =request)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_cache_names(self, security_origin: typing.Optional[str]=
        None, storage_key: typing.Optional[str]=None, storage_bucket:
        typing.Optional[storage.StorageBucket]=None, _response_timeout:
        typing.Optional[float]=None) ->typing.List[_cache_storage_module.Cache
        ]:
        """Requests cache names.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Caches for the security origin."""
        gen = _cache_storage_module.request_cache_names(security_origin=
            security_origin, storage_key=storage_key, storage_bucket=
            storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_cached_response(self, cache_id: _cache_storage_module.
        CacheId, request_url: str, request_headers: typing.List[
        _cache_storage_module.Header], _response_timeout: typing.Optional[
        float]=None) ->_cache_storage_module.CachedResponse:
        """Fetches cache entry.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param cache_id: Id of cache that contains the entry.

:param request_url: URL spec of the request.

:param request_headers: headers of the request.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Response read from the cache."""
        gen = _cache_storage_module.request_cached_response(cache_id=
            cache_id, request_url=request_url, request_headers=request_headers)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_entries(self, cache_id: _cache_storage_module.CacheId,
        skip_count: typing.Optional[int]=None, page_size: typing.Optional[
        int]=None, path_filter: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[
        typing.List[_cache_storage_module.DataEntry], float]:
        """Requests data from cache.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param cache_id: ID of cache to get entries from.

:param skip_count: *(Optional)* Number of records to skip.

:param page_size: *(Optional)* Number of records to fetch.

:param path_filter: *(Optional)* If present, only return the entries containing this substring in the path

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **cacheDataEntries** - Array of object store data entries.
    2. **returnCount** - Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage."""
        gen = _cache_storage_module.request_entries(cache_id=cache_id,
            skip_count=skip_count, page_size=page_size, path_filter=path_filter
            )
        return self.client.send(gen, _response_timeout=_response_timeout)
