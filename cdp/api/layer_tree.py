# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the LayerTree domain."""
import typing
from ..util import CDPClient
from .. import layer_tree as _layer_tree_module
from .. import dom
None


class LayerTreeAPI:
    """Provides an API wrapper for the 'LayerTree' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def compositing_reasons(self, layer_id: _layer_tree_module.LayerId,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[
        typing.List[str], typing.List[str]]:
        """Provides the reasons why the given layer was composited.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param layer_id: The id of the layer for which we want to get the reasons it was composited.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **compositingReasons** - A list of strings specifying reasons for the given layer to become composited.
    2. **compositingReasonIds** - A list of strings specifying reason IDs for the given layer to become composited."""
        gen = _layer_tree_module.compositing_reasons(layer_id=layer_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables compositing tree inspection.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _layer_tree_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables compositing tree inspection.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _layer_tree_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def load_snapshot(self, tiles: typing.List[_layer_tree_module.
        PictureTile], _response_timeout: typing.Optional[float]=None
        ) ->_layer_tree_module.SnapshotId:
        """Returns the snapshot identifier.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param tiles: An array of tiles composing the snapshot.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The id of the snapshot."""
        gen = _layer_tree_module.load_snapshot(tiles=tiles)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def make_snapshot(self, layer_id: _layer_tree_module.LayerId,
        _response_timeout: typing.Optional[float]=None
        ) ->_layer_tree_module.SnapshotId:
        """Returns the layer snapshot identifier.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param layer_id: The id of the layer.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The id of the layer snapshot."""
        gen = _layer_tree_module.make_snapshot(layer_id=layer_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def profile_snapshot(self, snapshot_id: _layer_tree_module.SnapshotId,
        min_repeat_count: typing.Optional[int]=None, min_duration: typing.
        Optional[float]=None, clip_rect: typing.Optional[dom.Rect]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.List[
        _layer_tree_module.PaintProfile]:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param snapshot_id: The id of the layer snapshot.

:param min_repeat_count: *(Optional)* The maximum number of times to replay the snapshot (1, if not specified).

:param min_duration: *(Optional)* The minimum duration (in seconds) to replay the snapshot.

:param clip_rect: *(Optional)* The clip rectangle to apply when replaying the snapshot.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The array of paint profiles, one per run."""
        gen = _layer_tree_module.profile_snapshot(snapshot_id=snapshot_id,
            min_repeat_count=min_repeat_count, min_duration=min_duration,
            clip_rect=clip_rect)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def release_snapshot(self, snapshot_id: _layer_tree_module.SnapshotId,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Releases layer snapshot captured by the back-end.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param snapshot_id: The id of the layer snapshot.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _layer_tree_module.release_snapshot(snapshot_id=snapshot_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def replay_snapshot(self, snapshot_id: _layer_tree_module.SnapshotId,
        from_step: typing.Optional[int]=None, to_step: typing.Optional[int]
        =None, scale: typing.Optional[float]=None, _response_timeout:
        typing.Optional[float]=None) ->str:
        """Replays the layer snapshot and returns the resulting bitmap.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param snapshot_id: The id of the layer snapshot.

:param from_step: *(Optional)* The first step to replay from (replay from the very start if not specified).

:param to_step: *(Optional)* The last step to replay to (replay till the end if not specified).

:param scale: *(Optional)* The scale to apply while replaying (defaults to 1).

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A data: URL for resulting image."""
        gen = _layer_tree_module.replay_snapshot(snapshot_id=snapshot_id,
            from_step=from_step, to_step=to_step, scale=scale)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def snapshot_command_log(self, snapshot_id: _layer_tree_module.
        SnapshotId, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[T_JSON_DICT]:
        """Replays the layer snapshot and returns canvas log.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param snapshot_id: The id of the layer snapshot.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: The array of canvas function calls."""
        gen = _layer_tree_module.snapshot_command_log(snapshot_id=snapshot_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
