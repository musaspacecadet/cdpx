# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Audits domain."""
import typing
from ..util import CDPClient
from .. import audits as _audits_module
from .. import network
from deprecated.sphinx import deprecated
None


class AuditsAPI:
    """Provides an API wrapper for the 'Audits' domain commands.

**EXPERIMENTAL**

Domain Description:
Audits domain allows investigation of page violations and possible improvements."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def check_contrast(self, report_aaa: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Runs the contrast check for the target page. Found issues are reported
using Audits.issueAdded event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param report_aaa: *(Optional)* Whether to report WCAG AAA level issues. Default is false.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _audits_module.check_contrast(report_aaa=report_aaa)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def check_forms_issues(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[_audits_module.GenericIssueDetails]:
        """Runs the form issues check for the target page. Found issues are reported
using Audits.issueAdded event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _audits_module.check_forms_issues()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables issues domain, prevents further issues from being reported to the client.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _audits_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables issues domain, sends the issues collected so far to the client by means of the
``issueAdded`` event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _audits_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_encoded_response(self, request_id: network.RequestId, encoding:
        str, quality: typing.Optional[float]=None, size_only: typing.
        Optional[bool]=None, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[typing.Optional[str], int, int]:
        """Returns the response body and size if it were re-encoded with the specified settings. Only
applies to images.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param request_id: Identifier of the network request to get content for.

:param encoding: The encoding to use.

:param quality: *(Optional)* The quality of the encoding (0-1). (defaults to 1)

:param size_only: *(Optional)* Whether to only return the size information (defaults to false).

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **body** - *(Optional)* The encoded body as a base64 string. Omitted if sizeOnly is true. (Encoded as a base64 string when passed over JSON)
    2. **originalSize** - Size before re-encoding.
    3. **encodedSize** - Size after re-encoding."""
        gen = _audits_module.get_encoded_response(request_id=request_id,
            encoding=encoding, quality=quality, size_only=size_only)
        return self.client.send(gen, _response_timeout=_response_timeout)
