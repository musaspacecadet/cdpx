# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the FedCm domain."""
import typing
from ..util import CDPClient
from .. import fed_cm as _fed_cm_module
None


class FedCmAPI:
    """Provides an API wrapper for the 'FedCm' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain allows interacting with the FedCM dialog."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def click_dialog_button(self, dialog_id: str, dialog_button:
        _fed_cm_module.DialogButton, _response_timeout: typing.Optional[
        float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param dialog_id:

:param dialog_button:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.click_dialog_button(dialog_id=dialog_id,
            dialog_button=dialog_button)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def dismiss_dialog(self, dialog_id: str, trigger_cooldown: typing.
        Optional[bool]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param dialog_id:

:param trigger_cooldown: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.dismiss_dialog(dialog_id=dialog_id,
            trigger_cooldown=trigger_cooldown)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, disable_rejection_delay: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param disable_rejection_delay: *(Optional)* Allows callers to disable the promise rejection delay that would normally happen, if this is unimportant to what's being tested. (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.enable(disable_rejection_delay=
            disable_rejection_delay)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def open_url(self, dialog_id: str, account_index: int, account_url_type:
        _fed_cm_module.AccountUrlType, _response_timeout: typing.Optional[
        float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param dialog_id:

:param account_index:

:param account_url_type:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.open_url(dialog_id=dialog_id, account_index=
            account_index, account_url_type=account_url_type)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reset_cooldown(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Resets the cooldown time, if any, to allow the next FedCM call to show
a dialog even if one was recently dismissed by the user.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.reset_cooldown()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def select_account(self, dialog_id: str, account_index: int,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param dialog_id:

:param account_index:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _fed_cm_module.select_account(dialog_id=dialog_id,
            account_index=account_index)
        return self.client.send(gen, _response_timeout=_response_timeout)
