# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Cast domain."""
import typing
from ..util import CDPClient
from .. import cast as _cast_module
None


class CastAPI:
    """Provides an API wrapper for the 'Cast' domain commands.

**EXPERIMENTAL**

Domain Description:
A domain for interacting with Cast, Presentation API, and Remote Playback API
functionalities."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Stops observing for sinks and issues.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, presentation_url: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Starts observing for sinks that can be used for tab mirroring, and if set,
sinks compatible with |presentationUrl| as well. When sinks are found, a
|sinksUpdated| event is fired.
Also starts observing for issue messages. When an issue is added or removed,
an |issueUpdated| event is fired.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param presentation_url: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.enable(presentation_url=presentation_url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_sink_to_use(self, sink_name: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Sets a sink to be used when the web page requests the browser to choose a
sink via Presentation API, Remote Playback API, or Cast SDK.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param sink_name:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.set_sink_to_use(sink_name=sink_name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_desktop_mirroring(self, sink_name: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Starts mirroring the desktop to the sink.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param sink_name:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.start_desktop_mirroring(sink_name=sink_name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_tab_mirroring(self, sink_name: str, _response_timeout: typing
        .Optional[float]=None) ->None:
        """Starts mirroring the tab to the sink.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param sink_name:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.start_tab_mirroring(sink_name=sink_name)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_casting(self, sink_name: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Stops the active Cast session on the sink.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param sink_name:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _cast_module.stop_casting(sink_name=sink_name)
        return self.client.send(gen, _response_timeout=_response_timeout)
