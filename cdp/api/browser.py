# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Browser domain."""
import typing
from ..util import CDPClient
from .. import browser as _browser_module
from .. import target
None


class BrowserAPI:
    """Provides an API wrapper for the 'Browser' domain commands.

Domain Description:
The Browser domain defines methods and events for browser managing."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def add_privacy_sandbox_coordinator_key_config(self, api:
        _browser_module.PrivacySandboxAPI, coordinator_origin: str,
        key_config: str, browser_context_id: typing.Optional[
        _browser_module.BrowserContextID]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Configures encryption keys used with a given privacy sandbox API to talk
to a trusted coordinator.  Since this is intended for test automation only,
coordinatorOrigin must be a .test domain. No existing coordinator
configuration for the origin may exist.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param api:

:param coordinator_origin:

:param key_config:

:param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.add_privacy_sandbox_coordinator_key_config(api
            =api, coordinator_origin=coordinator_origin, key_config=
            key_config, browser_context_id=browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def add_privacy_sandbox_enrollment_override(self, url: str,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Allows a site to use privacy sandbox features that require enrollment
without the site actually being enrolled. Only supported on page targets.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param url:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.add_privacy_sandbox_enrollment_override(url=url)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def cancel_download(self, guid: str, browser_context_id: typing.
        Optional[_browser_module.BrowserContextID]=None, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Cancel a download if in progress

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param guid: Global unique identifier of the download.

:param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.cancel_download(guid=guid, browser_context_id
            =browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def close(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Close browser gracefully.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.close()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def crash(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Crashes browser on the main thread.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.crash()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def crash_gpu_process(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Crashes GPU process.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.crash_gpu_process()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def execute_browser_command(self, command_id: _browser_module.
        BrowserCommandId, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Invoke custom browser commands used by telemetry.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param command_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.execute_browser_command(command_id=command_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_browser_command_line(self, _response_timeout: typing.Optional[
        float]=None) ->typing.List[str]:
        """Returns the command line switches for the browser process if, and only if
--enable-automation is on the commandline.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Commandline parameters"""
        gen = _browser_module.get_browser_command_line()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_histogram(self, name: str, delta: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None
        ) ->_browser_module.Histogram:
        """Get a Chrome histogram by name.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param name: Requested histogram name.

:param delta: *(Optional)* If true, retrieve delta since last delta call.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Histogram."""
        gen = _browser_module.get_histogram(name=name, delta=delta)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_histograms(self, query: typing.Optional[str]=None, delta:
        typing.Optional[bool]=None, _response_timeout: typing.Optional[
        float]=None) ->typing.List[_browser_module.Histogram]:
        """Get Chrome histograms.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.

:param delta: *(Optional)* If true, retrieve delta since last delta call.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Histograms."""
        gen = _browser_module.get_histograms(query=query, delta=delta)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_version(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[str, str, str, str, str]:
        """Returns version information.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **protocolVersion** - Protocol version.
    2. **product** - Product name.
    3. **revision** - Product revision.
    4. **userAgent** - User-Agent.
    5. **jsVersion** - V8 version."""
        gen = _browser_module.get_version()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_window_bounds(self, window_id: _browser_module.WindowID,
        _response_timeout: typing.Optional[float]=None
        ) ->_browser_module.Bounds:
        """Get position and size of the browser window.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param window_id: Browser window id.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned."""
        gen = _browser_module.get_window_bounds(window_id=window_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_window_for_target(self, target_id: typing.Optional[target.
        TargetID]=None, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[_browser_module.WindowID, _browser_module.Bounds]:
        """Get the browser window that contains the devtools target.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **windowId** - Browser window id.
    2. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned."""
        gen = _browser_module.get_window_for_target(target_id=target_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def grant_permissions(self, permissions: typing.List[_browser_module.
        PermissionType], origin: typing.Optional[str]=None,
        browser_context_id: typing.Optional[_browser_module.
        BrowserContextID]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Grant specific permissions to the given origin and reject all others.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param permissions:

:param origin: *(Optional)* Origin the permission applies to, all origins if not specified.

:param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.grant_permissions(permissions=permissions,
            origin=origin, browser_context_id=browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reset_permissions(self, browser_context_id: typing.Optional[
        _browser_module.BrowserContextID]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Reset all permission management for all origins.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.reset_permissions(browser_context_id=
            browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_dock_tile(self, badge_label: typing.Optional[str]=None, image:
        typing.Optional[str]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """Set dock tile details, platform-specific.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param badge_label: *(Optional)*

:param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.set_dock_tile(badge_label=badge_label, image=
            image)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_download_behavior(self, behavior: str, browser_context_id:
        typing.Optional[_browser_module.BrowserContextID]=None,
        download_path: typing.Optional[str]=None, events_enabled: typing.
        Optional[bool]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Set the behavior when downloading a file.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). |allowAndName| allows download and names files according to their download guids.

:param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.

:param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.

:param events_enabled: *(Optional)* Whether to emit download events (defaults to false).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.set_download_behavior(behavior=behavior,
            browser_context_id=browser_context_id, download_path=
            download_path, events_enabled=events_enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_permission(self, permission: _browser_module.
        PermissionDescriptor, setting: _browser_module.PermissionSetting,
        origin: typing.Optional[str]=None, browser_context_id: typing.
        Optional[_browser_module.BrowserContextID]=None, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Set permission settings for given origin.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param permission: Descriptor of permission to override.

:param setting: Setting of the permission.

:param origin: *(Optional)* Origin the permission applies to, all origins if not specified.

:param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.set_permission(permission=permission, setting
            =setting, origin=origin, browser_context_id=browser_context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_window_bounds(self, window_id: _browser_module.WindowID, bounds:
        _browser_module.Bounds, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Set position and/or size of the browser window.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param window_id: Browser window id.

:param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _browser_module.set_window_bounds(window_id=window_id, bounds
            =bounds)
        return self.client.send(gen, _response_timeout=_response_timeout)
