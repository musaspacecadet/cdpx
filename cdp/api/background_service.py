# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the BackgroundService domain."""
import typing
from ..util import CDPClient
from .. import background_service as _background_service_module
None


class BackgroundServiceAPI:
    """Provides an API wrapper for the 'BackgroundService' domain commands.

**EXPERIMENTAL**

Domain Description:
Defines events for background web platform features."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear_events(self, service: _background_service_module.ServiceName,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Clears all stored data for the service.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param service:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _background_service_module.clear_events(service=service)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_recording(self, should_record: bool, service:
        _background_service_module.ServiceName, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Set the recording state for the service.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param should_record:

:param service:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _background_service_module.set_recording(should_record=
            should_record, service=service)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def start_observing(self, service: _background_service_module.
        ServiceName, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables event updates for the service.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param service:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _background_service_module.start_observing(service=service)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def stop_observing(self, service: _background_service_module.
        ServiceName, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables event updates for the service.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param service:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _background_service_module.stop_observing(service=service)
        return self.client.send(gen, _response_timeout=_response_timeout)
