# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Emulation domain."""
import typing
from ..util import CDPClient
from .. import emulation as _emulation_module
from .. import dom
from .. import network
from .. import page
from deprecated.sphinx import deprecated
None


class EmulationAPI:
    """Provides an API wrapper for the 'Emulation' domain commands.

Domain Description:
This domain emulates different environments for the page."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    @deprecated(version='1.3')
    def can_emulate(self, _response_timeout: typing.Optional[float]=None
        ) ->bool:
        """Tells whether emulation is supported.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: True if emulation is supported."""
        gen = _emulation_module.can_emulate()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_device_metrics_override(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Clears the overridden device metrics.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.clear_device_metrics_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_device_posture_override(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Clears a device posture override set with either setDeviceMetricsOverride()
or setDevicePostureOverride() and starts using posture information from the
platform again.
Does nothing if no override is set.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.clear_device_posture_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_display_features_override(self, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Clears the display features override set with either setDeviceMetricsOverride()
or setDisplayFeaturesOverride() and starts using display features from the
platform again.
Does nothing if no override is set.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.clear_display_features_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_geolocation_override(self, _response_timeout: typing.Optional
        [float]=None) ->None:
        """Clears the overridden Geolocation Position and Error.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.clear_geolocation_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_idle_override(self, _response_timeout: typing.Optional[float]
        =None) ->None:
        """Clears Idle state overrides.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.clear_idle_override()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_overridden_sensor_information(self, type_: _emulation_module.
        SensorType, _response_timeout: typing.Optional[float]=None) ->float:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param type_:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _emulation_module.get_overridden_sensor_information(type_=type_)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def reset_page_scale_factor(self, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Requests that page scale factor is reset to initial values.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.reset_page_scale_factor()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_auto_dark_mode_override(self, enabled: typing.Optional[bool]=
        None, _response_timeout: typing.Optional[float]=None) ->None:
        """Automatically render all web contents using a dark theme.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_auto_dark_mode_override(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_automation_override(self, enabled: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Allows overriding the automation flag.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: Whether the override should be enabled.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_automation_override(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_cpu_throttling_rate(self, rate: float, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enables CPU throttling to emulate slow CPUs.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_cpu_throttling_rate(rate=rate)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_default_background_color_override(self, color: typing.Optional[
        dom.RGBA]=None, _response_timeout: typing.Optional[float]=None) ->None:
        """Sets or clears an override of the default background color of the frame. This override is used
if the content does not specify one.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_default_background_color_override(color
            =color)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_device_metrics_override(self, width: int, height: int,
        device_scale_factor: float, mobile: bool, scale: typing.Optional[
        float]=None, screen_width: typing.Optional[int]=None, screen_height:
        typing.Optional[int]=None, position_x: typing.Optional[int]=None,
        position_y: typing.Optional[int]=None, dont_set_visible_size:
        typing.Optional[bool]=None, screen_orientation: typing.Optional[
        _emulation_module.ScreenOrientation]=None, viewport: typing.
        Optional[page.Viewport]=None, display_feature: typing.Optional[
        _emulation_module.DisplayFeature]=None, device_posture: typing.
        Optional[_emulation_module.DevicePosture]=None, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
query results).

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.

:param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.

:param device_scale_factor: Overriding device scale factor value. 0 disables the override.

:param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.

:param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.

:param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).

:param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).

:param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).

:param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).

:param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.

:param screen_orientation: *(Optional)* Screen orientation override.

:param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.

:param display_feature: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.

:param device_posture: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_device_metrics_override(width=width,
            height=height, device_scale_factor=device_scale_factor, mobile=
            mobile, scale=scale, screen_width=screen_width, screen_height=
            screen_height, position_x=position_x, position_y=position_y,
            dont_set_visible_size=dont_set_visible_size, screen_orientation
            =screen_orientation, viewport=viewport, display_feature=
            display_feature, device_posture=device_posture)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_device_posture_override(self, posture: _emulation_module.
        DevicePosture, _response_timeout: typing.Optional[float]=None) ->None:
        """Start reporting the given posture value to the Device Posture API.
This override can also be set in setDeviceMetricsOverride().

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param posture:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_device_posture_override(posture=posture)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_disabled_image_types(self, image_types: typing.List[
        _emulation_module.DisabledImageType], _response_timeout: typing.
        Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param image_types: Image types to disable.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_disabled_image_types(image_types=
            image_types)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_display_features_override(self, features: typing.List[
        _emulation_module.DisplayFeature], _response_timeout: typing.
        Optional[float]=None) ->None:
        """Start using the given display features to pupulate the Viewport Segments API.
This override can also be set in setDeviceMetricsOverride().

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param features:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_display_features_override(features=features
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_document_cookie_disabled(self, disabled: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param disabled: Whether document.coookie API should be disabled.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_document_cookie_disabled(disabled=disabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_emit_touch_events_for_mouse(self, enabled: bool, configuration:
        typing.Optional[str]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: Whether touch emulation based on mouse input should be enabled.

:param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_emit_touch_events_for_mouse(enabled=
            enabled, configuration=configuration)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_emulated_media(self, media: typing.Optional[str]=None, features:
        typing.Optional[typing.List[_emulation_module.MediaFeature]]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Emulates the given media type or media feature for CSS media queries.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param media: *(Optional)* Media type to emulate. Empty string disables the override.

:param features: *(Optional)* Media features to emulate.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_emulated_media(media=media, features=
            features)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_emulated_vision_deficiency(self, type_: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Emulates the given vision deficiency.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_emulated_vision_deficiency(type_=type_)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_focus_emulation_enabled(self, enabled: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enables or disables simulating a focused and active page.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled: Whether to enable to disable focus emulation.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_focus_emulation_enabled(enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_geolocation_override(self, latitude: typing.Optional[float]=
        None, longitude: typing.Optional[float]=None, accuracy: typing.
        Optional[float]=None, altitude: typing.Optional[float]=None,
        altitude_accuracy: typing.Optional[float]=None, heading: typing.
        Optional[float]=None, speed: typing.Optional[float]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Overrides the Geolocation Position or Error. Omitting latitude, longitude or
accuracy emulates position unavailable.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param latitude: *(Optional)* Mock latitude

:param longitude: *(Optional)* Mock longitude

:param accuracy: *(Optional)* Mock accuracy

:param altitude: *(Optional)* Mock altitude

:param altitude_accuracy: *(Optional)* Mock altitudeAccuracy

:param heading: *(Optional)* Mock heading

:param speed: *(Optional)* Mock speed

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_geolocation_override(latitude=latitude,
            longitude=longitude, accuracy=accuracy, altitude=altitude,
            altitude_accuracy=altitude_accuracy, heading=heading, speed=speed)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_hardware_concurrency_override(self, hardware_concurrency: int,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param hardware_concurrency: Hardware concurrency to report

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_hardware_concurrency_override(
            hardware_concurrency=hardware_concurrency)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_idle_override(self, is_user_active: bool, is_screen_unlocked:
        bool, _response_timeout: typing.Optional[float]=None) ->None:
        """Overrides the Idle state.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param is_user_active: Mock isUserActive

:param is_screen_unlocked: Mock isScreenUnlocked

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_idle_override(is_user_active=
            is_user_active, is_screen_unlocked=is_screen_unlocked)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_locale_override(self, locale: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Overrides default host system locale with the specified one.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_locale_override(locale=locale)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_navigator_overrides(self, platform: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Overrides value returned by the javascript navigator object.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param platform: The platform navigator.platform should return.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_navigator_overrides(platform=platform)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_page_scale_factor(self, page_scale_factor: float,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets a specified page scale factor.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param page_scale_factor: Page scale factor.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_page_scale_factor(page_scale_factor=
            page_scale_factor)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_pressure_source_override_enabled(self, enabled: bool, source:
        _emulation_module.PressureSource, metadata: typing.Optional[
        _emulation_module.PressureMetadata]=None, _response_timeout: typing
        .Optional[float]=None) ->None:
        """Overrides a pressure source of a given type, as used by the Compute
Pressure API, so that updates to PressureObserver.observe() are provided
via setPressureStateOverride instead of being retrieved from
platform-provided telemetry data.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled:

:param source:

:param metadata: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_pressure_source_override_enabled(enabled
            =enabled, source=source, metadata=metadata)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_pressure_state_override(self, source: _emulation_module.
        PressureSource, state: _emulation_module.PressureState,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Provides a given pressure state that will be processed and eventually be
delivered to PressureObserver users. |source| must have been previously
overridden by setPressureSourceOverrideEnabled.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param source:

:param state:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_pressure_state_override(source=source,
            state=state)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_safe_area_insets_override(self, insets: _emulation_module.
        SafeAreaInsets, _response_timeout: typing.Optional[float]=None) ->None:
        """Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
respective variables to be undefined, even if previously overridden.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param insets:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_safe_area_insets_override(insets=insets)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_script_execution_disabled(self, value: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Switches script execution in the page.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param value: Whether script execution should be disabled in the page.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_script_execution_disabled(value=value)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_scrollbars_hidden(self, hidden: bool, _response_timeout: typing
        .Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param hidden: Whether scrollbars should be always hidden.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_scrollbars_hidden(hidden=hidden)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_sensor_override_enabled(self, enabled: bool, type_:
        _emulation_module.SensorType, metadata: typing.Optional[
        _emulation_module.SensorMetadata]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Overrides a platform sensor of a given type. If |enabled| is true, calls to
Sensor.start() will use a virtual sensor as backend rather than fetching
data from a real hardware sensor. Otherwise, existing virtual
sensor-backend Sensor objects will fire an error event and new calls to
Sensor.start() will attempt to use a real sensor instead.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param enabled:

:param type_:

:param metadata: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_sensor_override_enabled(enabled=enabled,
            type_=type_, metadata=metadata)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_sensor_override_readings(self, type_: _emulation_module.
        SensorType, reading: _emulation_module.SensorReading,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Updates the sensor readings reported by a sensor type previously overridden
by setSensorOverrideEnabled.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param type_:

:param reading:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_sensor_override_readings(type_=type_,
            reading=reading)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_timezone_override(self, timezone_id: str, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Overrides default host system timezone with the specified one.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_timezone_override(timezone_id=timezone_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_touch_emulation_enabled(self, enabled: bool, max_touch_points:
        typing.Optional[int]=None, _response_timeout: typing.Optional[float
        ]=None) ->None:
        """Enables touch on platforms which do not support them.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enabled: Whether the touch event emulation should be enabled.

:param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_touch_emulation_enabled(enabled=enabled,
            max_touch_points=max_touch_points)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_user_agent_override(self, user_agent: str, accept_language:
        typing.Optional[str]=None, platform: typing.Optional[str]=None,
        user_agent_metadata: typing.Optional[_emulation_module.
        UserAgentMetadata]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Allows overriding user agent with the given string.
``userAgentMetadata`` must be set for Client Hint headers to be sent.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param user_agent: User agent to use.

:param accept_language: *(Optional)* Browser language to emulate.

:param platform: *(Optional)* The platform navigator.platform should return.

:param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_user_agent_override(user_agent=
            user_agent, accept_language=accept_language, platform=platform,
            user_agent_metadata=user_agent_metadata)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_virtual_time_policy(self, policy: _emulation_module.
        VirtualTimePolicy, budget: typing.Optional[float]=None,
        max_virtual_time_task_starvation_count: typing.Optional[int]=None,
        initial_virtual_time: typing.Optional[network.TimeSinceEpoch]=None,
        _response_timeout: typing.Optional[float]=None) ->float:
        """Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
the current virtual time policy.  Note this supersedes any previous time budget.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

**EXPERIMENTAL**


:param ...:

:param policy:

:param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.

:param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.

:param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds)."""
        gen = _emulation_module.set_virtual_time_policy(policy=policy,
            budget=budget, max_virtual_time_task_starvation_count=
            max_virtual_time_task_starvation_count, initial_virtual_time=
            initial_virtual_time)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_visible_size(self, width: int, height: int, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Resizes the frame/viewport of the page. Note that this does not affect the frame's container
(e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
on Android.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param width: Frame width (DIP).

:param height: Frame height (DIP).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _emulation_module.set_visible_size(width=width, height=height)
        return self.client.send(gen, _response_timeout=_response_timeout)
