# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the WebAuthn domain."""
import typing
from ..util import CDPClient
from .. import web_authn as _web_authn_module
None


class WebAuthnAPI:
    """Provides an API wrapper for the 'WebAuthn' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain allows configuring virtual authenticators to test the WebAuthn
API."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def add_credential(self, authenticator_id: _web_authn_module.
        AuthenticatorId, credential: _web_authn_module.Credential,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Adds the credential to the specified authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param credential:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.add_credential(authenticator_id=
            authenticator_id, credential=credential)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def add_virtual_authenticator(self, options: _web_authn_module.
        VirtualAuthenticatorOptions, _response_timeout: typing.Optional[
        float]=None) ->_web_authn_module.AuthenticatorId:
        """Creates and adds a virtual authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param options:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _web_authn_module.add_virtual_authenticator(options=options)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def clear_credentials(self, authenticator_id: _web_authn_module.
        AuthenticatorId, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Clears all the credentials from the specified device.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.clear_credentials(authenticator_id=
            authenticator_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disable the WebAuthn domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, enable_ui: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Enable the WebAuthn domain and start intercepting credential storage and
retrieval with a virtual authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param enable_ui: *(Optional)* Whether to enable the WebAuthn user interface. Enabling the UI is recommended for debugging and demo purposes, as it is closer to the real experience. Disabling the UI is recommended for automated testing. Supported at the embedder's discretion if UI is available. Defaults to false.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.enable(enable_ui=enable_ui)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_credential(self, authenticator_id: _web_authn_module.
        AuthenticatorId, credential_id: str, _response_timeout: typing.
        Optional[float]=None) ->_web_authn_module.Credential:
        """Returns a single credential stored in the given virtual authenticator that
matches the credential ID.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param credential_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _web_authn_module.get_credential(authenticator_id=
            authenticator_id, credential_id=credential_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_credentials(self, authenticator_id: _web_authn_module.
        AuthenticatorId, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[_web_authn_module.Credential]:
        """Returns all the credentials stored in the given virtual authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _web_authn_module.get_credentials(authenticator_id=
            authenticator_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_credential(self, authenticator_id: _web_authn_module.
        AuthenticatorId, credential_id: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Removes a credential from the authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param credential_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.remove_credential(authenticator_id=
            authenticator_id, credential_id=credential_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_virtual_authenticator(self, authenticator_id:
        _web_authn_module.AuthenticatorId, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Removes the given authenticator.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.remove_virtual_authenticator(authenticator_id
            =authenticator_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_automatic_presence_simulation(self, authenticator_id:
        _web_authn_module.AuthenticatorId, enabled: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.
The default is true.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param enabled:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.set_automatic_presence_simulation(
            authenticator_id=authenticator_id, enabled=enabled)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_credential_properties(self, authenticator_id: _web_authn_module
        .AuthenticatorId, credential_id: str, backup_eligibility: typing.
        Optional[bool]=None, backup_state: typing.Optional[bool]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Allows setting credential properties.
https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param credential_id:

:param backup_eligibility: *(Optional)*

:param backup_state: *(Optional)*

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.set_credential_properties(authenticator_id=
            authenticator_id, credential_id=credential_id,
            backup_eligibility=backup_eligibility, backup_state=backup_state)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_response_override_bits(self, authenticator_id:
        _web_authn_module.AuthenticatorId, is_bogus_signature: typing.
        Optional[bool]=None, is_bad_uv: typing.Optional[bool]=None,
        is_bad_up: typing.Optional[bool]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param is_bogus_signature: *(Optional)* If isBogusSignature is set, overrides the signature in the authenticator response to be zero. Defaults to false.

:param is_bad_uv: *(Optional)* If isBadUV is set, overrides the UV bit in the flags in the authenticator response to be zero. Defaults to false.

:param is_bad_up: *(Optional)* If isBadUP is set, overrides the UP bit in the flags in the authenticator response to be zero. Defaults to false.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.set_response_override_bits(authenticator_id
            =authenticator_id, is_bogus_signature=is_bogus_signature,
            is_bad_uv=is_bad_uv, is_bad_up=is_bad_up)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_user_verified(self, authenticator_id: _web_authn_module.
        AuthenticatorId, is_user_verified: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Sets whether User Verification succeeds or fails for an authenticator.
The default is true.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param authenticator_id:

:param is_user_verified:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_authn_module.set_user_verified(authenticator_id=
            authenticator_id, is_user_verified=is_user_verified)
        return self.client.send(gen, _response_timeout=_response_timeout)
