# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the WebAudio domain."""
import typing
from ..util import CDPClient
from .. import web_audio as _web_audio_module
None


class WebAudioAPI:
    """Provides an API wrapper for the 'WebAudio' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain allows inspection of Web Audio API.
https://webaudio.github.io/web-audio-api/"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables the WebAudio domain.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_audio_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables the WebAudio domain and starts sending context lifetime events.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _web_audio_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_realtime_data(self, context_id: _web_audio_module.GraphObjectId,
        _response_timeout: typing.Optional[float]=None
        ) ->_web_audio_module.ContextRealtimeData:
        """Fetch the realtime data from the registered contexts.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param context_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _web_audio_module.get_realtime_data(context_id=context_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
