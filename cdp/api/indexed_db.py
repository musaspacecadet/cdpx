# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the IndexedDB domain."""
import typing
from ..util import CDPClient
from .. import indexed_db as _indexed_db_module
from .. import storage
None


class IndexedDbAPI:
    """Provides an API wrapper for the 'IndexedDB' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear_object_store(self, database_name: str, object_store_name: str,
        security_origin: typing.Optional[str]=None, storage_key: typing.
        Optional[str]=None, storage_bucket: typing.Optional[storage.
        StorageBucket]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Clears all entries from an object store.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name: Database name.

:param object_store_name: Object store name.

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _indexed_db_module.clear_object_store(database_name=
            database_name, object_store_name=object_store_name,
            security_origin=security_origin, storage_key=storage_key,
            storage_bucket=storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def delete_database(self, database_name: str, security_origin: typing.
        Optional[str]=None, storage_key: typing.Optional[str]=None,
        storage_bucket: typing.Optional[storage.StorageBucket]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Deletes a database.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name: Database name.

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _indexed_db_module.delete_database(database_name=
            database_name, security_origin=security_origin, storage_key=
            storage_key, storage_bucket=storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def delete_object_store_entries(self, database_name: str,
        object_store_name: str, key_range: _indexed_db_module.KeyRange,
        security_origin: typing.Optional[str]=None, storage_key: typing.
        Optional[str]=None, storage_bucket: typing.Optional[storage.
        StorageBucket]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Delete a range of entries from an object store

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name:

:param object_store_name:

:param key_range: Range of entry keys to delete

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _indexed_db_module.delete_object_store_entries(database_name=
            database_name, object_store_name=object_store_name, key_range=
            key_range, security_origin=security_origin, storage_key=
            storage_key, storage_bucket=storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables events from backend.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _indexed_db_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables events from backend.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _indexed_db_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_metadata(self, database_name: str, object_store_name: str,
        security_origin: typing.Optional[str]=None, storage_key: typing.
        Optional[str]=None, storage_bucket: typing.Optional[storage.
        StorageBucket]=None, _response_timeout: typing.Optional[float]=None
        ) ->typing.Tuple[float, float]:
        """Gets metadata of an object store.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name: Database name.

:param object_store_name: Object store name.

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **entriesCount** - the entries count
    2. **keyGeneratorValue** - the current value of key generator, to become the next inserted key into the object store. Valid if objectStore.autoIncrement is true."""
        gen = _indexed_db_module.get_metadata(database_name=database_name,
            object_store_name=object_store_name, security_origin=
            security_origin, storage_key=storage_key, storage_bucket=
            storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_data(self, database_name: str, object_store_name: str,
        index_name: str, skip_count: int, page_size: int, security_origin:
        typing.Optional[str]=None, storage_key: typing.Optional[str]=None,
        storage_bucket: typing.Optional[storage.StorageBucket]=None,
        key_range: typing.Optional[_indexed_db_module.KeyRange]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[
        typing.List[_indexed_db_module.DataEntry], bool]:
        """Requests data from object store or index.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name: Database name.

:param object_store_name: Object store name.

:param index_name: Index name, empty string for object store data requests.

:param skip_count: Number of records to skip.

:param page_size: Number of records to fetch.

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param key_range: *(Optional)* Key range.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **objectStoreDataEntries** - Array of object store data entries.
    2. **hasMore** - If true, there are more entries to fetch in the given range."""
        gen = _indexed_db_module.request_data(database_name=database_name,
            object_store_name=object_store_name, index_name=index_name,
            skip_count=skip_count, page_size=page_size, security_origin=
            security_origin, storage_key=storage_key, storage_bucket=
            storage_bucket, key_range=key_range)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_database(self, database_name: str, security_origin: typing.
        Optional[str]=None, storage_key: typing.Optional[str]=None,
        storage_bucket: typing.Optional[storage.StorageBucket]=None,
        _response_timeout: typing.Optional[float]=None
        ) ->_indexed_db_module.DatabaseWithObjectStores:
        """Requests database with given name in given frame.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param database_name: Database name.

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Database with an array of object stores."""
        gen = _indexed_db_module.request_database(database_name=
            database_name, security_origin=security_origin, storage_key=
            storage_key, storage_bucket=storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def request_database_names(self, security_origin: typing.Optional[str]=
        None, storage_key: typing.Optional[str]=None, storage_bucket:
        typing.Optional[storage.StorageBucket]=None, _response_timeout:
        typing.Optional[float]=None) ->typing.List[str]:
        """Requests database names for given security origin.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.

:param storage_key: *(Optional)* Storage key.

:param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Database names for origin."""
        gen = _indexed_db_module.request_database_names(security_origin=
            security_origin, storage_key=storage_key, storage_bucket=
            storage_bucket)
        return self.client.send(gen, _response_timeout=_response_timeout)
