# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Security domain."""
import typing
from ..util import CDPClient
from .. import security as _security_module
from deprecated.sphinx import deprecated
None


class SecurityAPI:
    """Provides an API wrapper for the 'Security' domain commands.

Domain Description:
Security"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables tracking security state changes.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _security_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables tracking security state changes.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _security_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def handle_certificate_error(self, event_id: int, action:
        _security_module.CertificateErrorAction, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Handles a certificate error that fired a certificateError event.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param event_id: The ID of the event.

:param action: The action to take on the certificate error.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _security_module.handle_certificate_error(event_id=event_id,
            action=action)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_ignore_certificate_errors(self, ignore: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Enable/disable whether all certificate errors should be ignored.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param ignore: If true, all certificate errors will be ignored.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _security_module.set_ignore_certificate_errors(ignore=ignore)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_override_certificate_errors(self, override: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Enable/disable overriding certificate errors. If enabled, all certificate error events need to
be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param override: If true, certificate errors will be overridden.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _security_module.set_override_certificate_errors(override=
            override)
        return self.client.send(gen, _response_timeout=_response_timeout)
