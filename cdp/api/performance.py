# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Performance domain."""
import typing
from ..util import CDPClient
from .. import performance as _performance_module
from deprecated.sphinx import deprecated
None


class PerformanceAPI:
    """Provides an API wrapper for the 'Performance' domain commands."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disable collecting and reporting metrics.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _performance_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, time_domain: typing.Optional[str]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Enable collecting and reporting metrics.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param time_domain: *(Optional)* Time domain to use for collecting and reporting duration metrics.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _performance_module.enable(time_domain=time_domain)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_metrics(self, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[_performance_module.Metric]:
        """Retrieve current values of run-time metrics.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Current values for run-time metrics."""
        gen = _performance_module.get_metrics()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_time_domain(self, time_domain: str, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Sets time domain to use for collecting and reporting duration metrics.
Note that this must be called before enabling metrics collection. Calling
this method while metrics collection is enabled returns an error.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3

**EXPERIMENTAL**


:param ...:

:param time_domain: Time domain

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _performance_module.set_time_domain(time_domain=time_domain)
        return self.client.send(gen, _response_timeout=_response_timeout)
