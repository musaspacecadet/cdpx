# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Extensions domain."""
import typing
from ..util import CDPClient
from .. import extensions as _extensions_module
None


class ExtensionsAPI:
    """Provides an API wrapper for the 'Extensions' domain commands.

**EXPERIMENTAL**

Domain Description:
Defines commands and events for browser extensions."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear_storage_items(self, id_: str, storage_area:
        _extensions_module.StorageArea, _response_timeout: typing.Optional[
        float]=None) ->None:
        """Clears extension storage in the given ``storageArea``.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to remove data from.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _extensions_module.clear_storage_items(id_=id_, storage_area=
            storage_area)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_storage_items(self, id_: str, storage_area: _extensions_module.
        StorageArea, keys: typing.Optional[typing.List[str]]=None,
        _response_timeout: typing.Optional[float]=None) ->T_JSON_DICT:
        """Gets data from extension storage in the given ``storageArea``. If ``keys`` is
specified, these are used to filter the result.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to retrieve data from.

:param keys: *(Optional)* Keys to retrieve.

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _extensions_module.get_storage_items(id_=id_, storage_area=
            storage_area, keys=keys)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def load_unpacked(self, path: str, _response_timeout: typing.Optional[
        float]=None) ->str:
        """Installs an unpacked extension from the filesystem similar to
--load-extension CLI flags. Returns extension ID once the extension
has been installed. Available if the client is connected using the
--remote-debugging-pipe flag and the --enable-unsafe-extension-debugging
flag is set.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param path: Absolute file path.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Extension id."""
        gen = _extensions_module.load_unpacked(path=path)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_storage_items(self, id_: str, storage_area:
        _extensions_module.StorageArea, keys: typing.List[str],
        _response_timeout: typing.Optional[float]=None) ->None:
        """Removes ``keys`` from extension storage in the given ``storageArea``.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to remove data from.

:param keys: Keys to remove.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _extensions_module.remove_storage_items(id_=id_, storage_area
            =storage_area, keys=keys)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_storage_items(self, id_: str, storage_area: _extensions_module.
        StorageArea, values: T_JSON_DICT, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Sets ``values`` in extension storage in the given ``storageArea``. The provided ``values``
will be merged with existing values in the storage area.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to set data in.

:param values: Values to set.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _extensions_module.set_storage_items(id_=id_, storage_area=
            storage_area, values=values)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def uninstall(self, id_: str, _response_timeout: typing.Optional[float]
        =None) ->None:
        """Uninstalls an unpacked extension (others not supported) from the profile.
Available if the client is connected using the --remote-debugging-pipe flag
and the --enable-unsafe-extension-debugging.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: Extension id.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _extensions_module.uninstall(id_=id_)
        return self.client.send(gen, _response_timeout=_response_timeout)
