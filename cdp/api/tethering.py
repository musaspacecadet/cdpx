# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Tethering domain."""
import typing
from ..util import CDPClient
from .. import tethering as _tethering_module
None


class TetheringAPI:
    """Provides an API wrapper for the 'Tethering' domain commands.

**EXPERIMENTAL**

Domain Description:
The Tethering domain defines methods and events for browser port binding."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def bind(self, port: int, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Request browser port binding.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param port: Port number to bind.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _tethering_module.bind(port=port)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def unbind(self, port: int, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Request browser port unbinding.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param port: Port number to unbind.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _tethering_module.unbind(port=port)
        return self.client.send(gen, _response_timeout=_response_timeout)
