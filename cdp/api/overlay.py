# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Overlay domain."""
import typing
from ..util import CDPClient
from .. import overlay as _overlay_module
from .. import dom
from .. import page
from .. import runtime
from deprecated.sphinx import deprecated
None


class OverlayAPI:
    """Provides an API wrapper for the 'Overlay' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain provides various functionality related to drawing atop the inspected page."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_grid_highlight_objects_for_test(self, node_ids: typing.List[dom
        .NodeId], _response_timeout: typing.Optional[float]=None
        ) ->T_JSON_DICT:
        """For Persistent Grid testing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param node_ids: Ids of the node to get highlight object for.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Grid Highlight data for the node ids provided."""
        gen = _overlay_module.get_grid_highlight_objects_for_test(node_ids=
            node_ids)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_highlight_object_for_test(self, node_id: dom.NodeId,
        include_distance: typing.Optional[bool]=None, include_style: typing
        .Optional[bool]=None, color_format: typing.Optional[_overlay_module
        .ColorFormat]=None, show_accessibility_info: typing.Optional[bool]=
        None, _response_timeout: typing.Optional[float]=None) ->T_JSON_DICT:
        """For testing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param node_id: Id of the node to get highlight object for.

:param include_distance: *(Optional)* Whether to include distance info.

:param include_style: *(Optional)* Whether to include style info.

:param color_format: *(Optional)* The color format to get config with (default: hex).

:param show_accessibility_info: *(Optional)* Whether to show accessibility info (default: true).

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Highlight data for the node."""
        gen = _overlay_module.get_highlight_object_for_test(node_id=node_id,
            include_distance=include_distance, include_style=include_style,
            color_format=color_format, show_accessibility_info=
            show_accessibility_info)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_source_order_highlight_object_for_test(self, node_id: dom.
        NodeId, _response_timeout: typing.Optional[float]=None) ->T_JSON_DICT:
        """For Source Order Viewer testing.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param node_id: Id of the node to highlight.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Source order highlight data for the node id provided."""
        gen = _overlay_module.get_source_order_highlight_object_for_test(
            node_id=node_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def hide_highlight(self, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Hides any highlight.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.hide_highlight()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def highlight_frame(self, frame_id: page.FrameId, content_color: typing
        .Optional[dom.RGBA]=None, content_outline_color: typing.Optional[
        dom.RGBA]=None, _response_timeout: typing.Optional[float]=None) ->None:
        """Highlights owner element of the frame with given id.
Deprecated: Doesn't work reliably and cannot be fixed due to process
separation (the owner node might be in a different process). Determine
the owner node in the client and use highlightNode.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param frame_id: Identifier of the frame to highlight.

:param content_color: *(Optional)* The content box highlight fill color (default: transparent).

:param content_outline_color: *(Optional)* The content box highlight outline color (default: transparent).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.highlight_frame(frame_id=frame_id,
            content_color=content_color, content_outline_color=
            content_outline_color)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def highlight_node(self, highlight_config: _overlay_module.
        HighlightConfig, node_id: typing.Optional[dom.NodeId]=None,
        backend_node_id: typing.Optional[dom.BackendNodeId]=None, object_id:
        typing.Optional[runtime.RemoteObjectId]=None, selector: typing.
        Optional[str]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
objectId must be specified.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param highlight_config: A descriptor for the highlight appearance.

:param node_id: *(Optional)* Identifier of the node to highlight.

:param backend_node_id: *(Optional)* Identifier of the backend node to highlight.

:param object_id: *(Optional)* JavaScript object id of the node to be highlighted.

:param selector: *(Optional)* Selectors to highlight relevant nodes.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.highlight_node(highlight_config=
            highlight_config, node_id=node_id, backend_node_id=
            backend_node_id, object_id=object_id, selector=selector)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def highlight_quad(self, quad: dom.Quad, color: typing.Optional[dom.
        RGBA]=None, outline_color: typing.Optional[dom.RGBA]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Highlights given quad. Coordinates are absolute with respect to the main frame viewport.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param quad: Quad to highlight

:param color: *(Optional)* The highlight fill color (default: transparent).

:param outline_color: *(Optional)* The highlight outline color (default: transparent).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.highlight_quad(quad=quad, color=color,
            outline_color=outline_color)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def highlight_rect(self, x: int, y: int, width: int, height: int, color:
        typing.Optional[dom.RGBA]=None, outline_color: typing.Optional[dom.
        RGBA]=None, _response_timeout: typing.Optional[float]=None) ->None:
        """Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param x: X coordinate

:param y: Y coordinate

:param width: Rectangle width

:param height: Rectangle height

:param color: *(Optional)* The highlight fill color (default: transparent).

:param outline_color: *(Optional)* The highlight outline color (default: transparent).

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.highlight_rect(x=x, y=y, width=width, height=
            height, color=color, outline_color=outline_color)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def highlight_source_order(self, source_order_config: _overlay_module.
        SourceOrderConfig, node_id: typing.Optional[dom.NodeId]=None,
        backend_node_id: typing.Optional[dom.BackendNodeId]=None, object_id:
        typing.Optional[runtime.RemoteObjectId]=None, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Highlights the source order of the children of the DOM node with given id or with the given
JavaScript object wrapper. Either nodeId or objectId must be specified.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param source_order_config: A descriptor for the appearance of the overlay drawing.

:param node_id: *(Optional)* Identifier of the node to highlight.

:param backend_node_id: *(Optional)* Identifier of the backend node to highlight.

:param object_id: *(Optional)* JavaScript object id of the node to be highlighted.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.highlight_source_order(source_order_config=
            source_order_config, node_id=node_id, backend_node_id=
            backend_node_id, object_id=object_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_inspect_mode(self, mode: _overlay_module.InspectMode,
        highlight_config: typing.Optional[_overlay_module.HighlightConfig]=
        None, _response_timeout: typing.Optional[float]=None) ->None:
        """Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
Backend then generates 'inspectNodeRequested' event upon element selection.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param mode: Set an inspection mode.

:param highlight_config: *(Optional)* A descriptor for the highlight appearance of hovered-over nodes. May be omitted if ``enabled == false``.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_inspect_mode(mode=mode, highlight_config=
            highlight_config)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_paused_in_debugger_message(self, message: typing.Optional[str]=
        None, _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param message: *(Optional)* The message to display, also triggers resume and step over controls.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_paused_in_debugger_message(message=message)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_ad_highlights(self, show: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Highlights owner element of all frames detected to be ads.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param show: True for showing ad highlights

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_ad_highlights(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_container_query_overlays(self,
        container_query_highlight_configs: typing.List[_overlay_module.
        ContainerQueryHighlightConfig], _response_timeout: typing.Optional[
        float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param container_query_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_container_query_overlays(
            container_query_highlight_configs=container_query_highlight_configs
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_debug_borders(self, show: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Requests that backend shows debug borders on layers

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param show: True for showing debug borders

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_debug_borders(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_fps_counter(self, show: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Requests that backend shows the FPS counter

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param show: True for showing the FPS counter

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_fps_counter(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_flex_overlays(self, flex_node_highlight_configs: typing.
        List[_overlay_module.FlexNodeHighlightConfig], _response_timeout:
        typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param flex_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_flex_overlays(
            flex_node_highlight_configs=flex_node_highlight_configs)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_grid_overlays(self, grid_node_highlight_configs: typing.
        List[_overlay_module.GridNodeHighlightConfig], _response_timeout:
        typing.Optional[float]=None) ->None:
        """Highlight multiple elements with the CSS Grid overlay.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param grid_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_grid_overlays(
            grid_node_highlight_configs=grid_node_highlight_configs)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_hinge(self, hinge_config: typing.Optional[_overlay_module.
        HingeConfig]=None, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """Add a dual screen device hinge

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param hinge_config: *(Optional)* hinge data, null means hideHinge

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_hinge(hinge_config=hinge_config)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_show_hit_test_borders(self, show: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Deprecated, no longer has any effect.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param show: True for showing hit-test borders

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_hit_test_borders(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_isolated_elements(self, isolated_element_highlight_configs:
        typing.List[_overlay_module.IsolatedElementHighlightConfig],
        _response_timeout: typing.Optional[float]=None) ->None:
        """Show elements in isolation mode with overlays.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param isolated_element_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_isolated_elements(
            isolated_element_highlight_configs=
            isolated_element_highlight_configs)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_layout_shift_regions(self, result: bool, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Requests that backend shows layout shift regions

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param result: True for showing layout shift regions

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_layout_shift_regions(result=result)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_paint_rects(self, result: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Requests that backend shows paint rectangles

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param result: True for showing paint rectangles

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_paint_rects(result=result)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_scroll_bottleneck_rects(self, show: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Requests that backend shows scroll bottleneck rects

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param show: True for showing scroll bottleneck rects

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_scroll_bottleneck_rects(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_scroll_snap_overlays(self, scroll_snap_highlight_configs:
        typing.List[_overlay_module.ScrollSnapHighlightConfig],
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param scroll_snap_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_scroll_snap_overlays(
            scroll_snap_highlight_configs=scroll_snap_highlight_configs)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_viewport_size_on_resize(self, show: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Paints viewport size upon main frame resize.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param show: Whether to paint size or not.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_viewport_size_on_resize(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def set_show_web_vitals(self, show: bool, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Deprecated, no longer has any effect.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param show:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_web_vitals(show=show)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_show_window_controls_overlay(self,
        window_controls_overlay_config: typing.Optional[_overlay_module.
        WindowControlsOverlayConfig]=None, _response_timeout: typing.
        Optional[float]=None) ->None:
        """Show Window Controls Overlay for PWA

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param window_controls_overlay_config: *(Optional)* Window Controls Overlay data, null means hide Window Controls Overlay

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _overlay_module.set_show_window_controls_overlay(
            window_controls_overlay_config=window_controls_overlay_config)
        return self.client.send(gen, _response_timeout=_response_timeout)
