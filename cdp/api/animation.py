# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Animation domain."""
import typing
from ..util import CDPClient
from .. import animation as _animation_module
from .. import runtime
None


class AnimationAPI:
    """Provides an API wrapper for the 'Animation' domain commands.

**EXPERIMENTAL**"""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables animation domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables animation domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_current_time(self, id_: str, _response_timeout: typing.Optional
        [float]=None) ->float:
        """Returns the current time of the an animation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param id_: Id of animation.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Current time of the page."""
        gen = _animation_module.get_current_time(id_=id_)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_playback_rate(self, _response_timeout: typing.Optional[float]=None
        ) ->float:
        """Gets the playback rate of the document timeline.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Playback rate for animations on page."""
        gen = _animation_module.get_playback_rate()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def release_animations(self, animations: typing.List[str],
        _response_timeout: typing.Optional[float]=None) ->None:
        """Releases a set of animations to no longer be manipulated.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param animations: List of animation ids to seek.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.release_animations(animations=animations)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def resolve_animation(self, animation_id: str, _response_timeout:
        typing.Optional[float]=None) ->runtime.RemoteObject:
        """Gets the remote object of the Animation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param animation_id: Animation id.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: Corresponding remote object."""
        gen = _animation_module.resolve_animation(animation_id=animation_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def seek_animations(self, animations: typing.List[str], current_time:
        float, _response_timeout: typing.Optional[float]=None) ->None:
        """Seek a set of animations to a particular time within each animation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param animations: List of animation ids to seek.

:param current_time: Set the current time of each animation.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.seek_animations(animations=animations,
            current_time=current_time)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_paused(self, animations: typing.List[str], paused: bool,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets the paused state of a set of animations.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param animations: Animations to set the pause state of.

:param paused: Paused state to set to.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.set_paused(animations=animations, paused=paused
            )
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_playback_rate(self, playback_rate: float, _response_timeout:
        typing.Optional[float]=None) ->None:
        """Sets the playback rate of the document timeline.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param playback_rate: Playback rate for animations on page

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.set_playback_rate(playback_rate=playback_rate)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_timing(self, animation_id: str, duration: float, delay: float,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Sets the timing of an animation node.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param animation_id: Animation id.

:param duration: Duration of the animation.

:param delay: Delay of the animation.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _animation_module.set_timing(animation_id=animation_id,
            duration=duration, delay=delay)
        return self.client.send(gen, _response_timeout=_response_timeout)
