# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the HeadlessExperimental domain."""
import typing
from ..util import CDPClient
from .. import headless_experimental as _headless_experimental_module
from deprecated.sphinx import deprecated
None


class HeadlessExperimentalAPI:
    """Provides an API wrapper for the 'HeadlessExperimental' domain commands.

**EXPERIMENTAL**

Domain Description:
This domain provides experimental commands only supported in headless mode."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def begin_frame(self, frame_time_ticks: typing.Optional[float]=None,
        interval: typing.Optional[float]=None, no_display_updates: typing.
        Optional[bool]=None, screenshot: typing.Optional[
        _headless_experimental_module.ScreenshotParams]=None,
        _response_timeout: typing.Optional[float]=None) ->typing.Tuple[bool,
        typing.Optional[str]]:
        """Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a
screenshot from the resulting frame. Requires that the target was created with enabled
BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also
https://goo.gle/chrome-headless-rendering for more background.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param frame_time_ticks: *(Optional)* Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set, the current time will be used.

:param interval: *(Optional)* The interval between BeginFrames that is reported to the compositor, in milliseconds. Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.

:param no_display_updates: *(Optional)* Whether updates should not be committed and drawn onto the display. False by default. If true, only side effects of the BeginFrame will be run, such as layout and animations, but any visual updates may not be visible on the display or in screenshots.

:param screenshot: *(Optional)* If set, a screenshot of the frame will be captured and returned in the response. Otherwise, no screenshot will be captured. Note that capturing a screenshot can fail, for example, during renderer initialization. In such a case, no screenshot data will be returned.

:param _response_timeout: Optional timeout in seconds for the command.


:returns: A tuple with the following items:

    1. **hasDamage** - Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the display. Reported for diagnostic uses, may be removed in the future.
    2. **screenshotData** - *(Optional)* Base64-encoded image data of the screenshot, if one was requested and successfully taken. (Encoded as a base64 string when passed over JSON)"""
        gen = _headless_experimental_module.begin_frame(frame_time_ticks=
            frame_time_ticks, interval=interval, no_display_updates=
            no_display_updates, screenshot=screenshot)
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables headless events for the target.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _headless_experimental_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    @deprecated(version='1.3')
    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables headless events for the target.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.

.. deprecated:: 1.3


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _headless_experimental_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)
