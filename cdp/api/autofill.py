# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the Autofill domain."""
import typing
from ..util import CDPClient
from .. import autofill as _autofill_module
from .. import dom
from .. import page
None


class AutofillAPI:
    """Provides an API wrapper for the 'Autofill' domain commands.

**EXPERIMENTAL**

Domain Description:
Defines commands and events for Autofill."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables autofill domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _autofill_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables autofill domain notifications.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _autofill_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_addresses(self, addresses: typing.List[_autofill_module.Address
        ], _response_timeout: typing.Optional[float]=None) ->None:
        """Set addresses so that developers can verify their forms implementation.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param addresses:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _autofill_module.set_addresses(addresses=addresses)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def trigger(self, field_id: dom.BackendNodeId, card: _autofill_module.
        CreditCard, frame_id: typing.Optional[page.FrameId]=None,
        _response_timeout: typing.Optional[float]=None) ->None:
        """Trigger autofill on a form identified by the fieldId.
If the field and related form cannot be autofilled, returns an error.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param field_id: Identifies a field that serves as an anchor for autofill.

:param card: Credit card information to fill out the form. Credit card data is not saved.

:param frame_id: *(Optional)* Identifies the frame that field belongs to.

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _autofill_module.trigger(field_id=field_id, card=card,
            frame_id=frame_id)
        return self.client.send(gen, _response_timeout=_response_timeout)
