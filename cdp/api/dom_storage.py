# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""API wrapper for the DOMStorage domain."""
import typing
from ..util import CDPClient
from .. import dom_storage as _dom_storage_module
None


class DomStorageAPI:
    """Provides an API wrapper for the 'DOMStorage' domain commands.

**EXPERIMENTAL**

Domain Description:
Query and modify DOM storage."""

    def __init__(self, client: CDPClient) ->None:
        self.client: CDPClient = client

    def clear(self, storage_id: _dom_storage_module.StorageId,
        _response_timeout: typing.Optional[float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_id:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _dom_storage_module.clear(storage_id=storage_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def disable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Disables storage tracking, prevents storage events from being sent to the client.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _dom_storage_module.disable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def enable(self, _response_timeout: typing.Optional[float]=None) ->None:
        """Enables storage tracking, storage events will now be delivered to the client.

NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _dom_storage_module.enable()
        return self.client.send(gen, _response_timeout=_response_timeout)

    def get_dom_storage_items(self, storage_id: _dom_storage_module.
        StorageId, _response_timeout: typing.Optional[float]=None
        ) ->typing.List[_dom_storage_module.Item]:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_id:

:param _response_timeout: Optional timeout in seconds for the command.


:returns:"""
        gen = _dom_storage_module.get_dom_storage_items(storage_id=storage_id)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def remove_dom_storage_item(self, storage_id: _dom_storage_module.
        StorageId, key: str, _response_timeout: typing.Optional[float]=None
        ) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_id:

:param key:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _dom_storage_module.remove_dom_storage_item(storage_id=
            storage_id, key=key)
        return self.client.send(gen, _response_timeout=_response_timeout)

    def set_dom_storage_item(self, storage_id: _dom_storage_module.
        StorageId, key: str, value: str, _response_timeout: typing.Optional
        [float]=None) ->None:
        """NOTE: This is a blocking wrapper method that executes the underlying generator command using the client.


:param ...:

:param storage_id:

:param key:

:param value:

:param _response_timeout: Optional timeout in seconds for the command."""
        gen = _dom_storage_module.set_dom_storage_item(storage_id=
            storage_id, key=key, value=value)
        return self.client.send(gen, _response_timeout=_response_timeout)
