# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: DOMStorage (experimental)

Query and modify DOM storage."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class StorageId:
    """DOM Storage identifier."""
    is_local_storage: bool
    security_origin: typing.Optional[str] = None
    storage_key: typing.Optional[SerializedStorageKey] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['isLocalStorage'] = self.is_local_storage
        if self.security_origin is not None:
            json_data['securityOrigin'] = self.security_origin
        if self.storage_key is not None:
            json_data['storageKey'] = self.storage_key.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->StorageId:
        return cls(is_local_storage=json_obj['isLocalStorage'],
            security_origin=json_obj['securityOrigin'] if json_obj.get(
            'securityOrigin') is not None else None, storage_key=
            SerializedStorageKey.from_json(json_obj['storageKey']) if 
            json_obj.get('storageKey') is not None else None)


class SerializedStorageKey(str):
    """Represents the CDP type 'DOMStorage.SerializedStorageKey'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->SerializedStorageKey:
        return cls(json)

    def __repr__(self) ->str:
        return 'SerializedStorageKey({})'.format(super().__repr__())


class Item(list):
    """DOM Storage item.

Represents the CDP array type 'DOMStorage.Item'."""

    def to_json(self) ->typing.List[str]:
        return self

    @classmethod
    def from_json(cls, json: typing.List[str]) ->Item:
        return cls(json)

    def __repr__(self) ->str:
        return 'Item({})'.format(super().__repr__())


def clear(storage_id: StorageId) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """:param ...:

:param storage_id:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['storageId'] = storage_id.to_json()
    cmd_dict = {'method': 'DOMStorage.clear', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables storage tracking, prevents storage events from being sent to the client."""
    cmd_dict = {'method': 'DOMStorage.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables storage tracking, storage events will now be delivered to the client."""
    cmd_dict = {'method': 'DOMStorage.enable'}
    json_result = yield cmd_dict
    return None


def get_dom_storage_items(storage_id: StorageId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.List[Item]]:
    """:param ...:

:param storage_id:


:returns:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['storageId'] = storage_id.to_json()
    cmd_dict = {'method': 'DOMStorage.getDOMStorageItems', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [Item.from_json(i) for i in json_result['entries']]


def remove_dom_storage_item(storage_id: StorageId, key: str
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """:param ...:

:param storage_id:

:param key:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['storageId'] = storage_id.to_json()
    params_dict['key'] = key
    cmd_dict = {'method': 'DOMStorage.removeDOMStorageItem', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_dom_storage_item(storage_id: StorageId, key: str, value: str
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """:param ...:

:param storage_id:

:param key:

:param value:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['storageId'] = storage_id.to_json()
    params_dict['key'] = key
    params_dict['value'] = value
    cmd_dict = {'method': 'DOMStorage.setDOMStorageItem', 'params': params_dict
        }
    json_result = yield cmd_dict
    return None


@event_class('DOMStorage.domStorageItemAdded')
@dataclass
class DomStorageItemAdded:
    storage_id: StorageId
    key: str
    new_value: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DomStorageItemAdded:
        return cls(storage_id=StorageId.from_json(json_obj['storageId']),
            key=json_obj['key'], new_value=json_obj['newValue'])


@event_class('DOMStorage.domStorageItemRemoved')
@dataclass
class DomStorageItemRemoved:
    storage_id: StorageId
    key: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DomStorageItemRemoved:
        return cls(storage_id=StorageId.from_json(json_obj['storageId']),
            key=json_obj['key'])


@event_class('DOMStorage.domStorageItemUpdated')
@dataclass
class DomStorageItemUpdated:
    storage_id: StorageId
    key: str
    old_value: str
    new_value: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DomStorageItemUpdated:
        return cls(storage_id=StorageId.from_json(json_obj['storageId']),
            key=json_obj['key'], old_value=json_obj['oldValue'], new_value=
            json_obj['newValue'])


@event_class('DOMStorage.domStorageItemsCleared')
@dataclass
class DomStorageItemsCleared:
    storage_id: StorageId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DomStorageItemsCleared:
        return cls(storage_id=StorageId.from_json(json_obj['storageId']))
