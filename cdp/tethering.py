# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Tethering (experimental)

The Tethering domain defines methods and events for browser port binding."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


def bind(port: int) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Request browser port binding.

:param ...:

:param port: Port number to bind."""
    params_dict: T_JSON_DICT = dict()
    params_dict['port'] = port
    cmd_dict = {'method': 'Tethering.bind', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def unbind(port: int) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Request browser port unbinding.

:param ...:

:param port: Port number to unbind."""
    params_dict: T_JSON_DICT = dict()
    params_dict['port'] = port
    cmd_dict = {'method': 'Tethering.unbind', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@event_class('Tethering.accepted')
@dataclass
class Accepted:
    """Informs that port was successfully bound and got a specified connection id."""
    port: int
    connection_id: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Accepted:
        return cls(port=json_obj['port'], connection_id=json_obj[
            'connectionId'])
