# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Memory (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT
None


@dataclass
class DOMCounter:
    """DOM object counter data."""
    name: str
    count: int

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['count'] = self.count
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DOMCounter:
        return cls(name=json_obj['name'], count=json_obj['count'])


@dataclass
class Module:
    """Executable module information"""
    name: str
    uuid: str
    base_address: str
    size: float

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['uuid'] = self.uuid
        json_data['baseAddress'] = self.base_address
        json_data['size'] = self.size
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Module:
        return cls(name=json_obj['name'], uuid=json_obj['uuid'],
            base_address=json_obj['baseAddress'], size=json_obj['size'])


@dataclass
class SamplingProfile:
    """Array of heap profile samples."""
    samples: typing.List[SamplingProfileNode]
    modules: typing.List[Module]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['samples'] = [i.to_json() for i in self.samples]
        json_data['modules'] = [i.to_json() for i in self.modules]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SamplingProfile:
        return cls(samples=[SamplingProfileNode.from_json(i) for i in
            json_obj['samples']], modules=[Module.from_json(i) for i in
            json_obj['modules']])


@dataclass
class SamplingProfileNode:
    """Heap profile sample."""
    size: float
    total: float
    stack: typing.List[str]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['size'] = self.size
        json_data['total'] = self.total
        json_data['stack'] = [i for i in self.stack]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SamplingProfileNode:
        return cls(size=json_obj['size'], total=json_obj['total'], stack=[i for
            i in json_obj['stack']])


class PressureLevel(enum.Enum):
    """Memory pressure level."""
    MODERATE = 'moderate'
    CRITICAL = 'critical'

    @classmethod
    def from_json(cls, json: str) ->PressureLevel:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<PressureLevel.{}>'.format(self.value)


def forcibly_purge_java_script_memory() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Simulate OomIntervention by purging V8 memory."""
    cmd_dict = {'method': 'Memory.forciblyPurgeJavaScriptMemory'}
    json_result = yield cmd_dict
    return None


def get_all_time_sampling_profile() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, SamplingProfile]:
    """Retrieve native memory allocations profile
collected since renderer process startup.


:returns:"""
    cmd_dict = {'method': 'Memory.getAllTimeSamplingProfile'}
    json_result = yield cmd_dict
    return SamplingProfile.from_json(json_result['profile'])


def get_browser_sampling_profile() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, SamplingProfile]:
    """Retrieve native memory allocations profile
collected since browser process startup.


:returns:"""
    cmd_dict = {'method': 'Memory.getBrowserSamplingProfile'}
    json_result = yield cmd_dict
    return SamplingProfile.from_json(json_result['profile'])


def get_dom_counters() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.
    Tuple[int, int, int]]:
    """Retruns current DOM object counters.


:returns: A tuple with the following items:

    1. **documents** - 
    2. **nodes** - 
    3. **jsEventListeners** -"""
    cmd_dict = {'method': 'Memory.getDOMCounters'}
    json_result = yield cmd_dict
    return json_result['documents'], json_result['nodes'], json_result[
        'jsEventListeners']


def get_dom_counters_for_leak_detection() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, typing.List[DOMCounter]]:
    """Retruns DOM object counters after preparing renderer for leak detection.


:returns: DOM object counters."""
    cmd_dict = {'method': 'Memory.getDOMCountersForLeakDetection'}
    json_result = yield cmd_dict
    return [DOMCounter.from_json(i) for i in json_result['counters']]


def get_sampling_profile() ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    SamplingProfile]:
    """Retrieve native memory allocations profile collected since last
``startSampling`` call.


:returns:"""
    cmd_dict = {'method': 'Memory.getSamplingProfile'}
    json_result = yield cmd_dict
    return SamplingProfile.from_json(json_result['profile'])


def prepare_for_leak_detection() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Prepares for leak detection by terminating workers, stopping spellcheckers,
dropping non-essential internal caches, running garbage collections, etc."""
    cmd_dict = {'method': 'Memory.prepareForLeakDetection'}
    json_result = yield cmd_dict
    return None


def set_pressure_notifications_suppressed(suppressed: bool) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Enable/disable suppressing memory pressure notifications in all processes.

:param ...:

:param suppressed: If true, memory pressure notifications will be suppressed."""
    params_dict: T_JSON_DICT = dict()
    params_dict['suppressed'] = suppressed
    cmd_dict = {'method': 'Memory.setPressureNotificationsSuppressed',
        'params': params_dict}
    json_result = yield cmd_dict
    return None


def simulate_pressure_notification(level: PressureLevel) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Simulate a memory pressure notification in all processes.

:param ...:

:param level: Memory pressure level of the notification."""
    params_dict: T_JSON_DICT = dict()
    params_dict['level'] = level.to_json()
    cmd_dict = {'method': 'Memory.simulatePressureNotification', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def start_sampling(sampling_interval: typing.Optional[int]=None,
    suppress_randomness: typing.Optional[bool]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Start collecting native memory profile.

:param ...:

:param sampling_interval: *(Optional)* Average number of bytes between samples.

:param suppress_randomness: *(Optional)* Do not randomize intervals between samples."""
    params_dict: T_JSON_DICT = dict()
    if sampling_interval is not None:
        params_dict['samplingInterval'] = sampling_interval
    if suppress_randomness is not None:
        params_dict['suppressRandomness'] = suppress_randomness
    cmd_dict = {'method': 'Memory.startSampling', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def stop_sampling() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Stop collecting native memory profile."""
    cmd_dict = {'method': 'Memory.stopSampling'}
    json_result = yield cmd_dict
    return None
