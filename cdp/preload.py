# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Preload (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from . import dom
from . import network
from . import page
None


@dataclass
class PreloadingAttemptKey:
    """A key that identifies a preloading attempt.

The url used is the url specified by the trigger (i.e. the initial URL), and
not the final url that is navigated to. For example, prerendering allows
same-origin main frame navigations during the attempt, but the attempt is
still keyed with the initial URL."""
    loader_id: network.LoaderId
    action: SpeculationAction
    url: str
    target_hint: typing.Optional[SpeculationTargetHint] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['loaderId'] = self.loader_id.to_json()
        json_data['action'] = self.action.to_json()
        json_data['url'] = self.url
        if self.target_hint is not None:
            json_data['targetHint'] = self.target_hint.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PreloadingAttemptKey:
        return cls(loader_id=network.LoaderId.from_json(json_obj['loaderId'
            ]), action=SpeculationAction.from_json(json_obj['action']), url
            =json_obj['url'], target_hint=SpeculationTargetHint.from_json(
            json_obj['targetHint']) if json_obj.get('targetHint') is not
            None else None)


@dataclass
class PreloadingAttemptSource:
    """Lists sources for a preloading attempt, specifically the ids of rule sets
that had a speculation rule that triggered the attempt, and the
BackendNodeIds of <a href> or <area href> elements that triggered the
attempt (in the case of attempts triggered by a document rule). It is
possible for multiple rule sets and links to trigger a single attempt."""
    key: PreloadingAttemptKey
    rule_set_ids: typing.List[RuleSetId]
    node_ids: typing.List[dom.BackendNodeId]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['key'] = self.key.to_json()
        json_data['ruleSetIds'] = [i.to_json() for i in self.rule_set_ids]
        json_data['nodeIds'] = [i.to_json() for i in self.node_ids]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PreloadingAttemptSource:
        return cls(key=PreloadingAttemptKey.from_json(json_obj['key']),
            rule_set_ids=[RuleSetId.from_json(i) for i in json_obj[
            'ruleSetIds']], node_ids=[dom.BackendNodeId.from_json(i) for i in
            json_obj['nodeIds']])


@dataclass
class PrerenderMismatchedHeaders:
    """Information of headers to be displayed when the header mismatch occurred."""
    header_name: str
    initial_value: typing.Optional[str] = None
    activation_value: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['headerName'] = self.header_name
        if self.initial_value is not None:
            json_data['initialValue'] = self.initial_value
        if self.activation_value is not None:
            json_data['activationValue'] = self.activation_value
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PrerenderMismatchedHeaders:
        return cls(header_name=json_obj['headerName'], initial_value=
            json_obj['initialValue'] if json_obj.get('initialValue') is not
            None else None, activation_value=json_obj['activationValue'] if
            json_obj.get('activationValue') is not None else None)


@dataclass
class RuleSet:
    """Corresponds to SpeculationRuleSet"""
    id_: RuleSetId
    loader_id: network.LoaderId
    source_text: str
    backend_node_id: typing.Optional[dom.BackendNodeId] = None
    url: typing.Optional[str] = None
    request_id: typing.Optional[network.RequestId] = None
    error_type: typing.Optional[RuleSetErrorType] = None
    error_message: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['id'] = self.id_.to_json()
        json_data['loaderId'] = self.loader_id.to_json()
        json_data['sourceText'] = self.source_text
        if self.backend_node_id is not None:
            json_data['backendNodeId'] = self.backend_node_id.to_json()
        if self.url is not None:
            json_data['url'] = self.url
        if self.request_id is not None:
            json_data['requestId'] = self.request_id.to_json()
        if self.error_type is not None:
            json_data['errorType'] = self.error_type.to_json()
        if self.error_message is not None:
            json_data['errorMessage'] = self.error_message
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->RuleSet:
        return cls(id_=RuleSetId.from_json(json_obj['id']), loader_id=
            network.LoaderId.from_json(json_obj['loaderId']), source_text=
            json_obj['sourceText'], backend_node_id=dom.BackendNodeId.
            from_json(json_obj['backendNodeId']) if json_obj.get(
            'backendNodeId') is not None else None, url=json_obj['url'] if 
            json_obj.get('url') is not None else None, request_id=network.
            RequestId.from_json(json_obj['requestId']) if json_obj.get(
            'requestId') is not None else None, error_type=RuleSetErrorType
            .from_json(json_obj['errorType']) if json_obj.get('errorType')
             is not None else None, error_message=json_obj['errorMessage'] if
            json_obj.get('errorMessage') is not None else None)


class PrefetchStatus(enum.Enum):
    """TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and
filter out the ones that aren't necessary to the developers."""
    PREFETCH_ALLOWED = 'PrefetchAllowed'
    PREFETCH_FAILED_INELIGIBLE_REDIRECT = 'PrefetchFailedIneligibleRedirect'
    PREFETCH_FAILED_INVALID_REDIRECT = 'PrefetchFailedInvalidRedirect'
    PREFETCH_FAILED_MIME_NOT_SUPPORTED = 'PrefetchFailedMIMENotSupported'
    PREFETCH_FAILED_NET_ERROR = 'PrefetchFailedNetError'
    PREFETCH_FAILED_NON2_XX = 'PrefetchFailedNon2XX'
    PREFETCH_EVICTED_AFTER_BROWSING_DATA_REMOVED = (
        'PrefetchEvictedAfterBrowsingDataRemoved')
    PREFETCH_EVICTED_AFTER_CANDIDATE_REMOVED = (
        'PrefetchEvictedAfterCandidateRemoved')
    PREFETCH_EVICTED_FOR_NEWER_PREFETCH = 'PrefetchEvictedForNewerPrefetch'
    PREFETCH_HELDBACK = 'PrefetchHeldback'
    PREFETCH_INELIGIBLE_RETRY_AFTER = 'PrefetchIneligibleRetryAfter'
    PREFETCH_IS_PRIVACY_DECOY = 'PrefetchIsPrivacyDecoy'
    PREFETCH_IS_STALE = 'PrefetchIsStale'
    PREFETCH_NOT_ELIGIBLE_BROWSER_CONTEXT_OFF_THE_RECORD = (
        'PrefetchNotEligibleBrowserContextOffTheRecord')
    PREFETCH_NOT_ELIGIBLE_DATA_SAVER_ENABLED = (
        'PrefetchNotEligibleDataSaverEnabled')
    PREFETCH_NOT_ELIGIBLE_EXISTING_PROXY = 'PrefetchNotEligibleExistingProxy'
    PREFETCH_NOT_ELIGIBLE_HOST_IS_NON_UNIQUE = (
        'PrefetchNotEligibleHostIsNonUnique')
    PREFETCH_NOT_ELIGIBLE_NON_DEFAULT_STORAGE_PARTITION = (
        'PrefetchNotEligibleNonDefaultStoragePartition')
    (PREFETCH_NOT_ELIGIBLE_SAME_SITE_CROSS_ORIGIN_PREFETCH_REQUIRED_PROXY
        ) = 'PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy'
    PREFETCH_NOT_ELIGIBLE_SCHEME_IS_NOT_HTTPS = (
        'PrefetchNotEligibleSchemeIsNotHttps')
    PREFETCH_NOT_ELIGIBLE_USER_HAS_COOKIES = (
        'PrefetchNotEligibleUserHasCookies')
    PREFETCH_NOT_ELIGIBLE_USER_HAS_SERVICE_WORKER = (
        'PrefetchNotEligibleUserHasServiceWorker')
    PREFETCH_NOT_ELIGIBLE_USER_HAS_SERVICE_WORKER_NO_FETCH_HANDLER = (
        'PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler')
    PREFETCH_NOT_ELIGIBLE_REDIRECT_FROM_SERVICE_WORKER = (
        'PrefetchNotEligibleRedirectFromServiceWorker')
    PREFETCH_NOT_ELIGIBLE_REDIRECT_TO_SERVICE_WORKER = (
        'PrefetchNotEligibleRedirectToServiceWorker')
    PREFETCH_NOT_ELIGIBLE_BATTERY_SAVER_ENABLED = (
        'PrefetchNotEligibleBatterySaverEnabled')
    PREFETCH_NOT_ELIGIBLE_PRELOADING_DISABLED = (
        'PrefetchNotEligiblePreloadingDisabled')
    PREFETCH_NOT_FINISHED_IN_TIME = 'PrefetchNotFinishedInTime'
    PREFETCH_NOT_STARTED = 'PrefetchNotStarted'
    PREFETCH_NOT_USED_COOKIES_CHANGED = 'PrefetchNotUsedCookiesChanged'
    PREFETCH_PROXY_NOT_AVAILABLE = 'PrefetchProxyNotAvailable'
    PREFETCH_RESPONSE_USED = 'PrefetchResponseUsed'
    PREFETCH_SUCCESSFUL_BUT_NOT_USED = 'PrefetchSuccessfulButNotUsed'
    PREFETCH_NOT_USED_PROBE_FAILED = 'PrefetchNotUsedProbeFailed'

    @classmethod
    def from_json(cls, json: str) ->PrefetchStatus:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<PrefetchStatus.{}>'.format(self.value)


class PreloadingStatus(enum.Enum):
    """Preloading status values, see also PreloadingTriggeringOutcome. This
status is shared by prefetchStatusUpdated and prerenderStatusUpdated."""
    PENDING = 'Pending'
    RUNNING = 'Running'
    READY = 'Ready'
    SUCCESS = 'Success'
    FAILURE = 'Failure'
    NOT_SUPPORTED = 'NotSupported'

    @classmethod
    def from_json(cls, json: str) ->PreloadingStatus:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<PreloadingStatus.{}>'.format(self.value)


class PrerenderFinalStatus(enum.Enum):
    """List of FinalStatus reasons for Prerender2."""
    ACTIVATED = 'Activated'
    DESTROYED = 'Destroyed'
    LOW_END_DEVICE = 'LowEndDevice'
    INVALID_SCHEME_REDIRECT = 'InvalidSchemeRedirect'
    INVALID_SCHEME_NAVIGATION = 'InvalidSchemeNavigation'
    NAVIGATION_REQUEST_BLOCKED_BY_CSP = 'NavigationRequestBlockedByCsp'
    MAIN_FRAME_NAVIGATION = 'MainFrameNavigation'
    MOJO_BINDER_POLICY = 'MojoBinderPolicy'
    RENDERER_PROCESS_CRASHED = 'RendererProcessCrashed'
    RENDERER_PROCESS_KILLED = 'RendererProcessKilled'
    DOWNLOAD = 'Download'
    TRIGGER_DESTROYED = 'TriggerDestroyed'
    NAVIGATION_NOT_COMMITTED = 'NavigationNotCommitted'
    NAVIGATION_BAD_HTTP_STATUS = 'NavigationBadHttpStatus'
    CLIENT_CERT_REQUESTED = 'ClientCertRequested'
    NAVIGATION_REQUEST_NETWORK_ERROR = 'NavigationRequestNetworkError'
    CANCEL_ALL_HOSTS_FOR_TESTING = 'CancelAllHostsForTesting'
    DID_FAIL_LOAD = 'DidFailLoad'
    STOP = 'Stop'
    SSL_CERTIFICATE_ERROR = 'SslCertificateError'
    LOGIN_AUTH_REQUESTED = 'LoginAuthRequested'
    UA_CHANGE_REQUIRES_RELOAD = 'UaChangeRequiresReload'
    BLOCKED_BY_CLIENT = 'BlockedByClient'
    AUDIO_OUTPUT_DEVICE_REQUESTED = 'AudioOutputDeviceRequested'
    MIXED_CONTENT = 'MixedContent'
    TRIGGER_BACKGROUNDED = 'TriggerBackgrounded'
    MEMORY_LIMIT_EXCEEDED = 'MemoryLimitExceeded'
    DATA_SAVER_ENABLED = 'DataSaverEnabled'
    TRIGGER_URL_HAS_EFFECTIVE_URL = 'TriggerUrlHasEffectiveUrl'
    ACTIVATED_BEFORE_STARTED = 'ActivatedBeforeStarted'
    INACTIVE_PAGE_RESTRICTION = 'InactivePageRestriction'
    START_FAILED = 'StartFailed'
    TIMEOUT_BACKGROUNDED = 'TimeoutBackgrounded'
    CROSS_SITE_REDIRECT_IN_INITIAL_NAVIGATION = (
        'CrossSiteRedirectInInitialNavigation')
    CROSS_SITE_NAVIGATION_IN_INITIAL_NAVIGATION = (
        'CrossSiteNavigationInInitialNavigation')
    SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_INITIAL_NAVIGATION = (
        'SameSiteCrossOriginRedirectNotOptInInInitialNavigation')
    SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_INITIAL_NAVIGATION = (
        'SameSiteCrossOriginNavigationNotOptInInInitialNavigation')
    ACTIVATION_NAVIGATION_PARAMETER_MISMATCH = (
        'ActivationNavigationParameterMismatch')
    ACTIVATED_IN_BACKGROUND = 'ActivatedInBackground'
    EMBEDDER_HOST_DISALLOWED = 'EmbedderHostDisallowed'
    ACTIVATION_NAVIGATION_DESTROYED_BEFORE_SUCCESS = (
        'ActivationNavigationDestroyedBeforeSuccess')
    TAB_CLOSED_BY_USER_GESTURE = 'TabClosedByUserGesture'
    TAB_CLOSED_WITHOUT_USER_GESTURE = 'TabClosedWithoutUserGesture'
    PRIMARY_MAIN_FRAME_RENDERER_PROCESS_CRASHED = (
        'PrimaryMainFrameRendererProcessCrashed')
    PRIMARY_MAIN_FRAME_RENDERER_PROCESS_KILLED = (
        'PrimaryMainFrameRendererProcessKilled')
    ACTIVATION_FRAME_POLICY_NOT_COMPATIBLE = (
        'ActivationFramePolicyNotCompatible')
    PRELOADING_DISABLED = 'PreloadingDisabled'
    BATTERY_SAVER_ENABLED = 'BatterySaverEnabled'
    ACTIVATED_DURING_MAIN_FRAME_NAVIGATION = (
        'ActivatedDuringMainFrameNavigation')
    PRELOADING_UNSUPPORTED_BY_WEB_CONTENTS = (
        'PreloadingUnsupportedByWebContents')
    CROSS_SITE_REDIRECT_IN_MAIN_FRAME_NAVIGATION = (
        'CrossSiteRedirectInMainFrameNavigation')
    CROSS_SITE_NAVIGATION_IN_MAIN_FRAME_NAVIGATION = (
        'CrossSiteNavigationInMainFrameNavigation')
    SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION = (
        'SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation')
    (SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION
        ) = 'SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation'
    MEMORY_PRESSURE_ON_TRIGGER = 'MemoryPressureOnTrigger'
    MEMORY_PRESSURE_AFTER_TRIGGERED = 'MemoryPressureAfterTriggered'
    PRERENDERING_DISABLED_BY_DEV_TOOLS = 'PrerenderingDisabledByDevTools'
    SPECULATION_RULE_REMOVED = 'SpeculationRuleRemoved'
    ACTIVATED_WITH_AUXILIARY_BROWSING_CONTEXTS = (
        'ActivatedWithAuxiliaryBrowsingContexts')
    MAX_NUM_OF_RUNNING_EAGER_PRERENDERS_EXCEEDED = (
        'MaxNumOfRunningEagerPrerendersExceeded')
    MAX_NUM_OF_RUNNING_NON_EAGER_PRERENDERS_EXCEEDED = (
        'MaxNumOfRunningNonEagerPrerendersExceeded')
    MAX_NUM_OF_RUNNING_EMBEDDER_PRERENDERS_EXCEEDED = (
        'MaxNumOfRunningEmbedderPrerendersExceeded')
    PRERENDERING_URL_HAS_EFFECTIVE_URL = 'PrerenderingUrlHasEffectiveUrl'
    REDIRECTED_PRERENDERING_URL_HAS_EFFECTIVE_URL = (
        'RedirectedPrerenderingUrlHasEffectiveUrl')
    ACTIVATION_URL_HAS_EFFECTIVE_URL = 'ActivationUrlHasEffectiveUrl'
    JAVA_SCRIPT_INTERFACE_ADDED = 'JavaScriptInterfaceAdded'
    JAVA_SCRIPT_INTERFACE_REMOVED = 'JavaScriptInterfaceRemoved'
    ALL_PRERENDERING_CANCELED = 'AllPrerenderingCanceled'
    WINDOW_CLOSED = 'WindowClosed'
    SLOW_NETWORK = 'SlowNetwork'
    OTHER_PRERENDERED_PAGE_ACTIVATED = 'OtherPrerenderedPageActivated'
    V8_OPTIMIZER_DISABLED = 'V8OptimizerDisabled'
    PRERENDER_FAILED_DURING_PREFETCH = 'PrerenderFailedDuringPrefetch'
    BROWSING_DATA_REMOVED = 'BrowsingDataRemoved'

    @classmethod
    def from_json(cls, json: str) ->PrerenderFinalStatus:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<PrerenderFinalStatus.{}>'.format(self.value)


class RuleSetErrorType(enum.Enum):
    SOURCE_IS_NOT_JSON_OBJECT = 'SourceIsNotJsonObject'
    INVALID_RULES_SKIPPED = 'InvalidRulesSkipped'

    @classmethod
    def from_json(cls, json: str) ->RuleSetErrorType:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<RuleSetErrorType.{}>'.format(self.value)


class SpeculationAction(enum.Enum):
    """The type of preloading attempted. It corresponds to
mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it
isn't being used by clients)."""
    PREFETCH = 'Prefetch'
    PRERENDER = 'Prerender'

    @classmethod
    def from_json(cls, json: str) ->SpeculationAction:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<SpeculationAction.{}>'.format(self.value)


class SpeculationTargetHint(enum.Enum):
    """Corresponds to mojom::SpeculationTargetHint.
See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints"""
    BLANK = 'Blank'
    SELF = 'Self'

    @classmethod
    def from_json(cls, json: str) ->SpeculationTargetHint:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<SpeculationTargetHint.{}>'.format(self.value)


class PreloadPipelineId(str):
    """Chrome manages different types of preloads together using a
concept of preloading pipeline. For example, if a site uses a
SpeculationRules for prerender, Chrome first starts a prefetch and
then upgrades it to prerender.

CDP events for them are emitted separately but they share
``PreloadPipelineId``.

Represents the CDP type 'Preload.PreloadPipelineId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->PreloadPipelineId:
        return cls(json)

    def __repr__(self) ->str:
        return 'PreloadPipelineId({})'.format(super().__repr__())


class RuleSetId(str):
    """Unique id

Represents the CDP type 'Preload.RuleSetId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->RuleSetId:
        return cls(json)

    def __repr__(self) ->str:
        return 'RuleSetId({})'.format(super().__repr__())


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    cmd_dict = {'method': 'Preload.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    cmd_dict = {'method': 'Preload.enable'}
    json_result = yield cmd_dict
    return None


@event_class('Preload.prefetchStatusUpdated')
@dataclass
class PrefetchStatusUpdated:
    """Fired when a prefetch attempt is updated."""
    key: PreloadingAttemptKey
    pipeline_id: PreloadPipelineId
    initiating_frame_id: page.FrameId
    prefetch_url: str
    status: PreloadingStatus
    prefetch_status: PrefetchStatus
    request_id: network.RequestId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PrefetchStatusUpdated:
        return cls(key=PreloadingAttemptKey.from_json(json_obj['key']),
            pipeline_id=PreloadPipelineId.from_json(json_obj['pipelineId']),
            initiating_frame_id=page.FrameId.from_json(json_obj[
            'initiatingFrameId']), prefetch_url=json_obj['prefetchUrl'],
            status=PreloadingStatus.from_json(json_obj['status']),
            prefetch_status=PrefetchStatus.from_json(json_obj[
            'prefetchStatus']), request_id=network.RequestId.from_json(
            json_obj['requestId']))


@event_class('Preload.preloadEnabledStateUpdated')
@dataclass
class PreloadEnabledStateUpdated:
    """Fired when a preload enabled state is updated."""
    disabled_by_preference: bool
    disabled_by_data_saver: bool
    disabled_by_battery_saver: bool
    disabled_by_holdback_prefetch_speculation_rules: bool
    disabled_by_holdback_prerender_speculation_rules: bool

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PreloadEnabledStateUpdated:
        return cls(disabled_by_preference=json_obj['disabledByPreference'],
            disabled_by_data_saver=json_obj['disabledByDataSaver'],
            disabled_by_battery_saver=json_obj['disabledByBatterySaver'],
            disabled_by_holdback_prefetch_speculation_rules=json_obj[
            'disabledByHoldbackPrefetchSpeculationRules'],
            disabled_by_holdback_prerender_speculation_rules=json_obj[
            'disabledByHoldbackPrerenderSpeculationRules'])


@event_class('Preload.preloadingAttemptSourcesUpdated')
@dataclass
class PreloadingAttemptSourcesUpdated:
    """Send a list of sources for all preloading attempts in a document."""
    loader_id: network.LoaderId
    preloading_attempt_sources: typing.List[PreloadingAttemptSource]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT
        ) ->PreloadingAttemptSourcesUpdated:
        return cls(loader_id=network.LoaderId.from_json(json_obj['loaderId'
            ]), preloading_attempt_sources=[PreloadingAttemptSource.
            from_json(i) for i in json_obj['preloadingAttemptSources']])


@event_class('Preload.prerenderStatusUpdated')
@dataclass
class PrerenderStatusUpdated:
    """Fired when a prerender attempt is updated."""
    key: PreloadingAttemptKey
    pipeline_id: PreloadPipelineId
    status: PreloadingStatus
    prerender_status: typing.Optional[PrerenderFinalStatus] = None
    disallowed_mojo_interface: typing.Optional[str] = None
    mismatched_headers: typing.Optional[typing.List[PrerenderMismatchedHeaders]
        ] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PrerenderStatusUpdated:
        return cls(key=PreloadingAttemptKey.from_json(json_obj['key']),
            pipeline_id=PreloadPipelineId.from_json(json_obj['pipelineId']),
            status=PreloadingStatus.from_json(json_obj['status']),
            prerender_status=PrerenderFinalStatus.from_json(json_obj[
            'prerenderStatus']) if json_obj.get('prerenderStatus') is not
            None else None, disallowed_mojo_interface=json_obj[
            'disallowedMojoInterface'] if json_obj.get(
            'disallowedMojoInterface') is not None else None,
            mismatched_headers=[PrerenderMismatchedHeaders.from_json(i) for
            i in json_obj['mismatchedHeaders']] if json_obj.get(
            'mismatchedHeaders') is not None else None)


@event_class('Preload.ruleSetRemoved')
@dataclass
class RuleSetRemoved:
    id_: RuleSetId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->RuleSetRemoved:
        return cls(id_=RuleSetId.from_json(json_obj['id']))


@event_class('Preload.ruleSetUpdated')
@dataclass
class RuleSetUpdated:
    """Upsert. Currently, it is only emitted when a rule set added."""
    rule_set: RuleSet

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->RuleSetUpdated:
        return cls(rule_set=RuleSet.from_json(json_obj['ruleSet']))
