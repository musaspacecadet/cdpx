# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Extensions (experimental)

Defines commands and events for browser extensions."""
import typing
import enum
from .util import T_JSON_DICT
None


class StorageArea(enum.Enum):
    """Storage areas."""
    SESSION = 'session'
    LOCAL = 'local'
    SYNC = 'sync'
    MANAGED = 'managed'

    @classmethod
    def from_json(cls, json: str) ->StorageArea:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<StorageArea.{}>'.format(self.value)


def clear_storage_items(id_: str, storage_area: StorageArea
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Clears extension storage in the given ``storageArea``.

:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to remove data from."""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_
    params_dict['storageArea'] = storage_area.to_json()
    cmd_dict = {'method': 'Extensions.clearStorageItems', 'params': params_dict
        }
    json_result = yield cmd_dict
    return None


def get_storage_items(id_: str, storage_area: StorageArea, keys: typing.
    Optional[typing.List[str]]=None) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, T_JSON_DICT]:
    """Gets data from extension storage in the given ``storageArea``. If ``keys`` is
specified, these are used to filter the result.

:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to retrieve data from.

:param keys: *(Optional)* Keys to retrieve.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_
    params_dict['storageArea'] = storage_area.to_json()
    if keys is not None:
        params_dict['keys'] = [i for i in keys]
    cmd_dict = {'method': 'Extensions.getStorageItems', 'params': params_dict}
    json_result = yield cmd_dict
    return json_result['data']


def load_unpacked(path: str) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:
    """Installs an unpacked extension from the filesystem similar to
--load-extension CLI flags. Returns extension ID once the extension
has been installed. Available if the client is connected using the
--remote-debugging-pipe flag and the --enable-unsafe-extension-debugging
flag is set.

:param ...:

:param path: Absolute file path.


:returns: Extension id."""
    params_dict: T_JSON_DICT = dict()
    params_dict['path'] = path
    cmd_dict = {'method': 'Extensions.loadUnpacked', 'params': params_dict}
    json_result = yield cmd_dict
    return json_result['id']


def remove_storage_items(id_: str, storage_area: StorageArea, keys: typing.
    List[str]) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Removes ``keys`` from extension storage in the given ``storageArea``.

:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to remove data from.

:param keys: Keys to remove."""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_
    params_dict['storageArea'] = storage_area.to_json()
    params_dict['keys'] = [i for i in keys]
    cmd_dict = {'method': 'Extensions.removeStorageItems', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_storage_items(id_: str, storage_area: StorageArea, values: T_JSON_DICT
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Sets ``values`` in extension storage in the given ``storageArea``. The provided ``values``
will be merged with existing values in the storage area.

:param ...:

:param id_: ID of extension.

:param storage_area: StorageArea to set data in.

:param values: Values to set."""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_
    params_dict['storageArea'] = storage_area.to_json()
    params_dict['values'] = values
    cmd_dict = {'method': 'Extensions.setStorageItems', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def uninstall(id_: str) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Uninstalls an unpacked extension (others not supported) from the profile.
Available if the client is connected using the --remote-debugging-pipe flag
and the --enable-unsafe-extension-debugging.

:param ...:

:param id_: Extension id."""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_
    cmd_dict = {'method': 'Extensions.uninstall', 'params': params_dict}
    json_result = yield cmd_dict
    return None
