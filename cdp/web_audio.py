# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: WebAudio (experimental)

This domain allows inspection of Web Audio API.
https://webaudio.github.io/web-audio-api/"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class AudioListener:
    """Protocol object for AudioListener"""
    listener_id: GraphObjectId
    context_id: GraphObjectId

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['listenerId'] = self.listener_id.to_json()
        json_data['contextId'] = self.context_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioListener:
        return cls(listener_id=GraphObjectId.from_json(json_obj[
            'listenerId']), context_id=GraphObjectId.from_json(json_obj[
            'contextId']))


@dataclass
class AudioNode:
    """Protocol object for AudioNode"""
    node_id: GraphObjectId
    context_id: GraphObjectId
    node_type: NodeType
    number_of_inputs: float
    number_of_outputs: float
    channel_count: float
    channel_count_mode: ChannelCountMode
    channel_interpretation: ChannelInterpretation

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['nodeId'] = self.node_id.to_json()
        json_data['contextId'] = self.context_id.to_json()
        json_data['nodeType'] = self.node_type.to_json()
        json_data['numberOfInputs'] = self.number_of_inputs
        json_data['numberOfOutputs'] = self.number_of_outputs
        json_data['channelCount'] = self.channel_count
        json_data['channelCountMode'] = self.channel_count_mode.to_json()
        json_data['channelInterpretation'
            ] = self.channel_interpretation.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioNode:
        return cls(node_id=GraphObjectId.from_json(json_obj['nodeId']),
            context_id=GraphObjectId.from_json(json_obj['contextId']),
            node_type=NodeType.from_json(json_obj['nodeType']),
            number_of_inputs=json_obj['numberOfInputs'], number_of_outputs=
            json_obj['numberOfOutputs'], channel_count=json_obj[
            'channelCount'], channel_count_mode=ChannelCountMode.from_json(
            json_obj['channelCountMode']), channel_interpretation=
            ChannelInterpretation.from_json(json_obj['channelInterpretation']))


@dataclass
class AudioParam:
    """Protocol object for AudioParam"""
    param_id: GraphObjectId
    node_id: GraphObjectId
    context_id: GraphObjectId
    param_type: ParamType
    rate: AutomationRate
    default_value: float
    min_value: float
    max_value: float

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['paramId'] = self.param_id.to_json()
        json_data['nodeId'] = self.node_id.to_json()
        json_data['contextId'] = self.context_id.to_json()
        json_data['paramType'] = self.param_type.to_json()
        json_data['rate'] = self.rate.to_json()
        json_data['defaultValue'] = self.default_value
        json_data['minValue'] = self.min_value
        json_data['maxValue'] = self.max_value
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioParam:
        return cls(param_id=GraphObjectId.from_json(json_obj['paramId']),
            node_id=GraphObjectId.from_json(json_obj['nodeId']), context_id
            =GraphObjectId.from_json(json_obj['contextId']), param_type=
            ParamType.from_json(json_obj['paramType']), rate=AutomationRate
            .from_json(json_obj['rate']), default_value=json_obj[
            'defaultValue'], min_value=json_obj['minValue'], max_value=
            json_obj['maxValue'])


@dataclass
class BaseAudioContext:
    """Protocol object for BaseAudioContext"""
    context_id: GraphObjectId
    context_type: ContextType
    context_state: ContextState
    callback_buffer_size: float
    max_output_channel_count: float
    sample_rate: float
    realtime_data: typing.Optional[ContextRealtimeData] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['contextId'] = self.context_id.to_json()
        json_data['contextType'] = self.context_type.to_json()
        json_data['contextState'] = self.context_state.to_json()
        json_data['callbackBufferSize'] = self.callback_buffer_size
        json_data['maxOutputChannelCount'] = self.max_output_channel_count
        json_data['sampleRate'] = self.sample_rate
        if self.realtime_data is not None:
            json_data['realtimeData'] = self.realtime_data.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BaseAudioContext:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), context_type=ContextType.from_json(json_obj['contextType']),
            context_state=ContextState.from_json(json_obj['contextState']),
            callback_buffer_size=json_obj['callbackBufferSize'],
            max_output_channel_count=json_obj['maxOutputChannelCount'],
            sample_rate=json_obj['sampleRate'], realtime_data=
            ContextRealtimeData.from_json(json_obj['realtimeData']) if 
            json_obj.get('realtimeData') is not None else None)


@dataclass
class ContextRealtimeData:
    """Fields in AudioContext that change in real-time."""
    current_time: float
    render_capacity: float
    callback_interval_mean: float
    callback_interval_variance: float

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['currentTime'] = self.current_time
        json_data['renderCapacity'] = self.render_capacity
        json_data['callbackIntervalMean'] = self.callback_interval_mean
        json_data['callbackIntervalVariance'] = self.callback_interval_variance
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ContextRealtimeData:
        return cls(current_time=json_obj['currentTime'], render_capacity=
            json_obj['renderCapacity'], callback_interval_mean=json_obj[
            'callbackIntervalMean'], callback_interval_variance=json_obj[
            'callbackIntervalVariance'])


class AutomationRate(enum.Enum):
    """Enum of AudioParam::AutomationRate from the spec"""
    A_RATE = 'a-rate'
    K_RATE = 'k-rate'

    @classmethod
    def from_json(cls, json: str) ->AutomationRate:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<AutomationRate.{}>'.format(self.value)


class ChannelCountMode(enum.Enum):
    """Enum of AudioNode::ChannelCountMode from the spec"""
    CLAMPED_MAX = 'clamped-max'
    EXPLICIT = 'explicit'
    MAX_ = 'max'

    @classmethod
    def from_json(cls, json: str) ->ChannelCountMode:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ChannelCountMode.{}>'.format(self.value)


class ChannelInterpretation(enum.Enum):
    """Enum of AudioNode::ChannelInterpretation from the spec"""
    DISCRETE = 'discrete'
    SPEAKERS = 'speakers'

    @classmethod
    def from_json(cls, json: str) ->ChannelInterpretation:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ChannelInterpretation.{}>'.format(self.value)


class ContextState(enum.Enum):
    """Enum of AudioContextState from the spec"""
    SUSPENDED = 'suspended'
    RUNNING = 'running'
    CLOSED = 'closed'
    INTERRUPTED = 'interrupted'

    @classmethod
    def from_json(cls, json: str) ->ContextState:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ContextState.{}>'.format(self.value)


class ContextType(enum.Enum):
    """Enum of BaseAudioContext types"""
    REALTIME = 'realtime'
    OFFLINE = 'offline'

    @classmethod
    def from_json(cls, json: str) ->ContextType:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<ContextType.{}>'.format(self.value)


class GraphObjectId(str):
    """An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API

Represents the CDP type 'WebAudio.GraphObjectId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->GraphObjectId:
        return cls(json)

    def __repr__(self) ->str:
        return 'GraphObjectId({})'.format(super().__repr__())


class NodeType(str):
    """Enum of AudioNode types

Represents the CDP type 'WebAudio.NodeType'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->NodeType:
        return cls(json)

    def __repr__(self) ->str:
        return 'NodeType({})'.format(super().__repr__())


class ParamType(str):
    """Enum of AudioParam types

Represents the CDP type 'WebAudio.ParamType'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->ParamType:
        return cls(json)

    def __repr__(self) ->str:
        return 'ParamType({})'.format(super().__repr__())


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables the WebAudio domain."""
    cmd_dict = {'method': 'WebAudio.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables the WebAudio domain and starts sending context lifetime events."""
    cmd_dict = {'method': 'WebAudio.enable'}
    json_result = yield cmd_dict
    return None


def get_realtime_data(context_id: GraphObjectId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, ContextRealtimeData]:
    """Fetch the realtime data from the registered contexts.

:param ...:

:param context_id:


:returns:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['contextId'] = context_id.to_json()
    cmd_dict = {'method': 'WebAudio.getRealtimeData', 'params': params_dict}
    json_result = yield cmd_dict
    return ContextRealtimeData.from_json(json_result['realtimeData'])


@event_class('WebAudio.audioListenerCreated')
@dataclass
class AudioListenerCreated:
    """Notifies that the construction of an AudioListener has finished."""
    listener: AudioListener

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioListenerCreated:
        return cls(listener=AudioListener.from_json(json_obj['listener']))


@event_class('WebAudio.audioListenerWillBeDestroyed')
@dataclass
class AudioListenerWillBeDestroyed:
    """Notifies that a new AudioListener has been created."""
    context_id: GraphObjectId
    listener_id: GraphObjectId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioListenerWillBeDestroyed:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), listener_id=GraphObjectId.from_json(json_obj['listenerId']))


@event_class('WebAudio.audioNodeCreated')
@dataclass
class AudioNodeCreated:
    """Notifies that a new AudioNode has been created."""
    node: AudioNode

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioNodeCreated:
        return cls(node=AudioNode.from_json(json_obj['node']))


@event_class('WebAudio.audioNodeWillBeDestroyed')
@dataclass
class AudioNodeWillBeDestroyed:
    """Notifies that an existing AudioNode has been destroyed."""
    context_id: GraphObjectId
    node_id: GraphObjectId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioNodeWillBeDestroyed:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), node_id=GraphObjectId.from_json(json_obj['nodeId']))


@event_class('WebAudio.audioParamCreated')
@dataclass
class AudioParamCreated:
    """Notifies that a new AudioParam has been created."""
    param: AudioParam

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioParamCreated:
        return cls(param=AudioParam.from_json(json_obj['param']))


@event_class('WebAudio.audioParamWillBeDestroyed')
@dataclass
class AudioParamWillBeDestroyed:
    """Notifies that an existing AudioParam has been destroyed."""
    context_id: GraphObjectId
    node_id: GraphObjectId
    param_id: GraphObjectId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->AudioParamWillBeDestroyed:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), node_id=GraphObjectId.from_json(json_obj['nodeId']),
            param_id=GraphObjectId.from_json(json_obj['paramId']))


@event_class('WebAudio.contextChanged')
@dataclass
class ContextChanged:
    """Notifies that existing BaseAudioContext has changed some properties (id stays the same).."""
    context: BaseAudioContext

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ContextChanged:
        return cls(context=BaseAudioContext.from_json(json_obj['context']))


@event_class('WebAudio.contextCreated')
@dataclass
class ContextCreated:
    """Notifies that a new BaseAudioContext has been created."""
    context: BaseAudioContext

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ContextCreated:
        return cls(context=BaseAudioContext.from_json(json_obj['context']))


@event_class('WebAudio.contextWillBeDestroyed')
@dataclass
class ContextWillBeDestroyed:
    """Notifies that an existing BaseAudioContext will be destroyed."""
    context_id: GraphObjectId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ContextWillBeDestroyed:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']))


@event_class('WebAudio.nodeParamConnected')
@dataclass
class NodeParamConnected:
    """Notifies that an AudioNode is connected to an AudioParam."""
    context_id: GraphObjectId
    source_id: GraphObjectId
    destination_id: GraphObjectId
    source_output_index: typing.Optional[float] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodeParamConnected:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), source_id=GraphObjectId.from_json(json_obj['sourceId']),
            destination_id=GraphObjectId.from_json(json_obj['destinationId'
            ]), source_output_index=json_obj['sourceOutputIndex'] if 
            json_obj.get('sourceOutputIndex') is not None else None)


@event_class('WebAudio.nodeParamDisconnected')
@dataclass
class NodeParamDisconnected:
    """Notifies that an AudioNode is disconnected to an AudioParam."""
    context_id: GraphObjectId
    source_id: GraphObjectId
    destination_id: GraphObjectId
    source_output_index: typing.Optional[float] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodeParamDisconnected:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), source_id=GraphObjectId.from_json(json_obj['sourceId']),
            destination_id=GraphObjectId.from_json(json_obj['destinationId'
            ]), source_output_index=json_obj['sourceOutputIndex'] if 
            json_obj.get('sourceOutputIndex') is not None else None)


@event_class('WebAudio.nodesConnected')
@dataclass
class NodesConnected:
    """Notifies that two AudioNodes are connected."""
    context_id: GraphObjectId
    source_id: GraphObjectId
    destination_id: GraphObjectId
    source_output_index: typing.Optional[float] = None
    destination_input_index: typing.Optional[float] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodesConnected:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), source_id=GraphObjectId.from_json(json_obj['sourceId']),
            destination_id=GraphObjectId.from_json(json_obj['destinationId'
            ]), source_output_index=json_obj['sourceOutputIndex'] if 
            json_obj.get('sourceOutputIndex') is not None else None,
            destination_input_index=json_obj['destinationInputIndex'] if 
            json_obj.get('destinationInputIndex') is not None else None)


@event_class('WebAudio.nodesDisconnected')
@dataclass
class NodesDisconnected:
    """Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected."""
    context_id: GraphObjectId
    source_id: GraphObjectId
    destination_id: GraphObjectId
    source_output_index: typing.Optional[float] = None
    destination_input_index: typing.Optional[float] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->NodesDisconnected:
        return cls(context_id=GraphObjectId.from_json(json_obj['contextId']
            ), source_id=GraphObjectId.from_json(json_obj['sourceId']),
            destination_id=GraphObjectId.from_json(json_obj['destinationId'
            ]), source_output_index=json_obj['sourceOutputIndex'] if 
            json_obj.get('sourceOutputIndex') is not None else None,
            destination_input_index=json_obj['destinationInputIndex'] if 
            json_obj.get('destinationInputIndex') is not None else None)
