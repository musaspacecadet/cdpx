# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: FileSystem (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT
from . import network
from . import storage
None


@dataclass
class BucketFileSystemLocator:
    storage_key: storage.SerializedStorageKey
    path_components: typing.List[str]
    bucket_name: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['storageKey'] = self.storage_key.to_json()
        json_data['pathComponents'] = [i for i in self.path_components]
        if self.bucket_name is not None:
            json_data['bucketName'] = self.bucket_name
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BucketFileSystemLocator:
        return cls(storage_key=storage.SerializedStorageKey.from_json(
            json_obj['storageKey']), path_components=[i for i in json_obj[
            'pathComponents']], bucket_name=json_obj['bucketName'] if 
            json_obj.get('bucketName') is not None else None)


@dataclass
class Directory:
    name: str
    nested_directories: typing.List[str]
    nested_files: typing.List[File]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['nestedDirectories'] = [i for i in self.nested_directories]
        json_data['nestedFiles'] = [i.to_json() for i in self.nested_files]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Directory:
        return cls(name=json_obj['name'], nested_directories=[i for i in
            json_obj['nestedDirectories']], nested_files=[File.from_json(i) for
            i in json_obj['nestedFiles']])


@dataclass
class File:
    name: str
    last_modified: network.TimeSinceEpoch
    size: float
    type_: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['lastModified'] = self.last_modified.to_json()
        json_data['size'] = self.size
        json_data['type'] = self.type_
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->File:
        return cls(name=json_obj['name'], last_modified=network.
            TimeSinceEpoch.from_json(json_obj['lastModified']), size=
            json_obj['size'], type_=json_obj['type'])


def get_directory(bucket_file_system_locator: BucketFileSystemLocator
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, Directory]:
    """:param ...:

:param bucket_file_system_locator:


:returns: Returns the directory object at the path."""
    params_dict: T_JSON_DICT = dict()
    params_dict['bucketFileSystemLocator'
        ] = bucket_file_system_locator.to_json()
    cmd_dict = {'method': 'FileSystem.getDirectory', 'params': params_dict}
    json_result = yield cmd_dict
    return Directory.from_json(json_result['directory'])
