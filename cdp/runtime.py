# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Runtime

Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
Evaluation results are returned as mirror object that expose object type, string representation
and unique identifier that can be used for further object reference. Original objects are
maintained in memory unless they are either explicitly released or are released along with the
other objects in their object group."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class CallArgument:
    """Represents function call argument. Either remote object id ``objectId``, primitive ``value``,
unserializable primitive value or neither of (for undefined) them should be specified."""
    value: typing.Optional[typing.Any] = None
    unserializable_value: typing.Optional[UnserializableValue] = None
    object_id: typing.Optional[RemoteObjectId] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        if self.value is not None:
            json_data['value'] = self.value
        if self.unserializable_value is not None:
            json_data['unserializableValue'
                ] = self.unserializable_value.to_json()
        if self.object_id is not None:
            json_data['objectId'] = self.object_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->CallArgument:
        return cls(value=json_obj['value'] if json_obj.get('value') is not
            None else None, unserializable_value=UnserializableValue.
            from_json(json_obj['unserializableValue']) if json_obj.get(
            'unserializableValue') is not None else None, object_id=
            RemoteObjectId.from_json(json_obj['objectId']) if json_obj.get(
            'objectId') is not None else None)


@dataclass
class CallFrame:
    """Stack entry for runtime errors and assertions."""
    function_name: str
    script_id: ScriptId
    url: str
    line_number: int
    column_number: int

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['functionName'] = self.function_name
        json_data['scriptId'] = self.script_id.to_json()
        json_data['url'] = self.url
        json_data['lineNumber'] = self.line_number
        json_data['columnNumber'] = self.column_number
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->CallFrame:
        return cls(function_name=json_obj['functionName'], script_id=
            ScriptId.from_json(json_obj['scriptId']), url=json_obj['url'],
            line_number=json_obj['lineNumber'], column_number=json_obj[
            'columnNumber'])


@dataclass
class CustomPreview:
    header: str
    body_getter_id: typing.Optional[RemoteObjectId] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['header'] = self.header
        if self.body_getter_id is not None:
            json_data['bodyGetterId'] = self.body_getter_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->CustomPreview:
        return cls(header=json_obj['header'], body_getter_id=RemoteObjectId
            .from_json(json_obj['bodyGetterId']) if json_obj.get(
            'bodyGetterId') is not None else None)


@dataclass
class DeepSerializedValue:
    """Represents deep serialized value."""
    type_: str
    value: typing.Optional[typing.Any] = None
    object_id: typing.Optional[str] = None
    weak_local_object_reference: typing.Optional[int] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_
        if self.value is not None:
            json_data['value'] = self.value
        if self.object_id is not None:
            json_data['objectId'] = self.object_id
        if self.weak_local_object_reference is not None:
            json_data['weakLocalObjectReference'
                ] = self.weak_local_object_reference
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DeepSerializedValue:
        return cls(type_=json_obj['type'], value=json_obj['value'] if 
            json_obj.get('value') is not None else None, object_id=json_obj
            ['objectId'] if json_obj.get('objectId') is not None else None,
            weak_local_object_reference=json_obj['weakLocalObjectReference'
            ] if json_obj.get('weakLocalObjectReference') is not None else None
            )


@dataclass
class EntryPreview:
    value: ObjectPreview
    key: typing.Optional[ObjectPreview] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['value'] = self.value.to_json()
        if self.key is not None:
            json_data['key'] = self.key.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->EntryPreview:
        return cls(value=ObjectPreview.from_json(json_obj['value']), key=
            ObjectPreview.from_json(json_obj['key']) if json_obj.get('key')
             is not None else None)


@dataclass
class ExceptionDetails:
    """Detailed information about exception (or error) that was thrown during script compilation or
execution."""
    exception_id: int
    text: str
    line_number: int
    column_number: int
    script_id: typing.Optional[ScriptId] = None
    url: typing.Optional[str] = None
    stack_trace: typing.Optional[StackTrace] = None
    exception: typing.Optional[RemoteObject] = None
    execution_context_id: typing.Optional[ExecutionContextId] = None
    exception_meta_data: typing.Optional[T_JSON_DICT] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['exceptionId'] = self.exception_id
        json_data['text'] = self.text
        json_data['lineNumber'] = self.line_number
        json_data['columnNumber'] = self.column_number
        if self.script_id is not None:
            json_data['scriptId'] = self.script_id.to_json()
        if self.url is not None:
            json_data['url'] = self.url
        if self.stack_trace is not None:
            json_data['stackTrace'] = self.stack_trace.to_json()
        if self.exception is not None:
            json_data['exception'] = self.exception.to_json()
        if self.execution_context_id is not None:
            json_data['executionContextId'
                ] = self.execution_context_id.to_json()
        if self.exception_meta_data is not None:
            json_data['exceptionMetaData'] = self.exception_meta_data
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExceptionDetails:
        return cls(exception_id=json_obj['exceptionId'], text=json_obj[
            'text'], line_number=json_obj['lineNumber'], column_number=
            json_obj['columnNumber'], script_id=ScriptId.from_json(json_obj
            ['scriptId']) if json_obj.get('scriptId') is not None else None,
            url=json_obj['url'] if json_obj.get('url') is not None else
            None, stack_trace=StackTrace.from_json(json_obj['stackTrace']) if
            json_obj.get('stackTrace') is not None else None, exception=
            RemoteObject.from_json(json_obj['exception']) if json_obj.get(
            'exception') is not None else None, execution_context_id=
            ExecutionContextId.from_json(json_obj['executionContextId']) if
            json_obj.get('executionContextId') is not None else None,
            exception_meta_data=json_obj['exceptionMetaData'] if json_obj.
            get('exceptionMetaData') is not None else None)


@dataclass
class ExecutionContextDescription:
    """Description of an isolated world."""
    id_: ExecutionContextId
    origin: str
    name: str
    unique_id: str
    aux_data: typing.Optional[T_JSON_DICT] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['id'] = self.id_.to_json()
        json_data['origin'] = self.origin
        json_data['name'] = self.name
        json_data['uniqueId'] = self.unique_id
        if self.aux_data is not None:
            json_data['auxData'] = self.aux_data
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExecutionContextDescription:
        return cls(id_=ExecutionContextId.from_json(json_obj['id']), origin
            =json_obj['origin'], name=json_obj['name'], unique_id=json_obj[
            'uniqueId'], aux_data=json_obj['auxData'] if json_obj.get(
            'auxData') is not None else None)


@dataclass
class InternalPropertyDescriptor:
    """Object internal property descriptor. This property isn't normally visible in JavaScript code."""
    name: str
    value: typing.Optional[RemoteObject] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        if self.value is not None:
            json_data['value'] = self.value.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->InternalPropertyDescriptor:
        return cls(name=json_obj['name'], value=RemoteObject.from_json(
            json_obj['value']) if json_obj.get('value') is not None else None)


@dataclass
class ObjectPreview:
    """Object containing abbreviated remote object value."""
    type_: str
    overflow: bool
    properties: typing.List[PropertyPreview]
    subtype: typing.Optional[str] = None
    description: typing.Optional[str] = None
    entries: typing.Optional[typing.List[EntryPreview]] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_
        json_data['overflow'] = self.overflow
        json_data['properties'] = [i.to_json() for i in self.properties]
        if self.subtype is not None:
            json_data['subtype'] = self.subtype
        if self.description is not None:
            json_data['description'] = self.description
        if self.entries is not None:
            json_data['entries'] = [i.to_json() for i in self.entries]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ObjectPreview:
        return cls(type_=json_obj['type'], overflow=json_obj['overflow'],
            properties=[PropertyPreview.from_json(i) for i in json_obj[
            'properties']], subtype=json_obj['subtype'] if json_obj.get(
            'subtype') is not None else None, description=json_obj[
            'description'] if json_obj.get('description') is not None else
            None, entries=[EntryPreview.from_json(i) for i in json_obj[
            'entries']] if json_obj.get('entries') is not None else None)


@dataclass
class PrivatePropertyDescriptor:
    """Object private field descriptor."""
    name: str
    value: typing.Optional[RemoteObject] = None
    get: typing.Optional[RemoteObject] = None
    set_: typing.Optional[RemoteObject] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        if self.value is not None:
            json_data['value'] = self.value.to_json()
        if self.get is not None:
            json_data['get'] = self.get.to_json()
        if self.set_ is not None:
            json_data['set'] = self.set_.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PrivatePropertyDescriptor:
        return cls(name=json_obj['name'], value=RemoteObject.from_json(
            json_obj['value']) if json_obj.get('value') is not None else
            None, get=RemoteObject.from_json(json_obj['get']) if json_obj.
            get('get') is not None else None, set_=RemoteObject.from_json(
            json_obj['set']) if json_obj.get('set') is not None else None)


@dataclass
class PropertyDescriptor:
    """Object property descriptor."""
    name: str
    configurable: bool
    enumerable: bool
    value: typing.Optional[RemoteObject] = None
    writable: typing.Optional[bool] = None
    get: typing.Optional[RemoteObject] = None
    set_: typing.Optional[RemoteObject] = None
    was_thrown: typing.Optional[bool] = None
    is_own: typing.Optional[bool] = None
    symbol: typing.Optional[RemoteObject] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['configurable'] = self.configurable
        json_data['enumerable'] = self.enumerable
        if self.value is not None:
            json_data['value'] = self.value.to_json()
        if self.writable is not None:
            json_data['writable'] = self.writable
        if self.get is not None:
            json_data['get'] = self.get.to_json()
        if self.set_ is not None:
            json_data['set'] = self.set_.to_json()
        if self.was_thrown is not None:
            json_data['wasThrown'] = self.was_thrown
        if self.is_own is not None:
            json_data['isOwn'] = self.is_own
        if self.symbol is not None:
            json_data['symbol'] = self.symbol.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PropertyDescriptor:
        return cls(name=json_obj['name'], configurable=json_obj[
            'configurable'], enumerable=json_obj['enumerable'], value=
            RemoteObject.from_json(json_obj['value']) if json_obj.get(
            'value') is not None else None, writable=json_obj['writable'] if
            json_obj.get('writable') is not None else None, get=
            RemoteObject.from_json(json_obj['get']) if json_obj.get('get')
             is not None else None, set_=RemoteObject.from_json(json_obj[
            'set']) if json_obj.get('set') is not None else None,
            was_thrown=json_obj['wasThrown'] if json_obj.get('wasThrown')
             is not None else None, is_own=json_obj['isOwn'] if json_obj.
            get('isOwn') is not None else None, symbol=RemoteObject.
            from_json(json_obj['symbol']) if json_obj.get('symbol') is not
            None else None)


@dataclass
class PropertyPreview:
    name: str
    type_: str
    value: typing.Optional[str] = None
    value_preview: typing.Optional[ObjectPreview] = None
    subtype: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['type'] = self.type_
        if self.value is not None:
            json_data['value'] = self.value
        if self.value_preview is not None:
            json_data['valuePreview'] = self.value_preview.to_json()
        if self.subtype is not None:
            json_data['subtype'] = self.subtype
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PropertyPreview:
        return cls(name=json_obj['name'], type_=json_obj['type'], value=
            json_obj['value'] if json_obj.get('value') is not None else
            None, value_preview=ObjectPreview.from_json(json_obj[
            'valuePreview']) if json_obj.get('valuePreview') is not None else
            None, subtype=json_obj['subtype'] if json_obj.get('subtype') is not
            None else None)


@dataclass
class RemoteObject:
    """Mirror object referencing original JavaScript object."""
    type_: str
    subtype: typing.Optional[str] = None
    class_name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None
    unserializable_value: typing.Optional[UnserializableValue] = None
    description: typing.Optional[str] = None
    deep_serialized_value: typing.Optional[DeepSerializedValue] = None
    object_id: typing.Optional[RemoteObjectId] = None
    preview: typing.Optional[ObjectPreview] = None
    custom_preview: typing.Optional[CustomPreview] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['type'] = self.type_
        if self.subtype is not None:
            json_data['subtype'] = self.subtype
        if self.class_name is not None:
            json_data['className'] = self.class_name
        if self.value is not None:
            json_data['value'] = self.value
        if self.unserializable_value is not None:
            json_data['unserializableValue'
                ] = self.unserializable_value.to_json()
        if self.description is not None:
            json_data['description'] = self.description
        if self.deep_serialized_value is not None:
            json_data['deepSerializedValue'
                ] = self.deep_serialized_value.to_json()
        if self.object_id is not None:
            json_data['objectId'] = self.object_id.to_json()
        if self.preview is not None:
            json_data['preview'] = self.preview.to_json()
        if self.custom_preview is not None:
            json_data['customPreview'] = self.custom_preview.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->RemoteObject:
        return cls(type_=json_obj['type'], subtype=json_obj['subtype'] if 
            json_obj.get('subtype') is not None else None, class_name=
            json_obj['className'] if json_obj.get('className') is not None else
            None, value=json_obj['value'] if json_obj.get('value') is not
            None else None, unserializable_value=UnserializableValue.
            from_json(json_obj['unserializableValue']) if json_obj.get(
            'unserializableValue') is not None else None, description=
            json_obj['description'] if json_obj.get('description') is not
            None else None, deep_serialized_value=DeepSerializedValue.
            from_json(json_obj['deepSerializedValue']) if json_obj.get(
            'deepSerializedValue') is not None else None, object_id=
            RemoteObjectId.from_json(json_obj['objectId']) if json_obj.get(
            'objectId') is not None else None, preview=ObjectPreview.
            from_json(json_obj['preview']) if json_obj.get('preview') is not
            None else None, custom_preview=CustomPreview.from_json(json_obj
            ['customPreview']) if json_obj.get('customPreview') is not None
             else None)


@dataclass
class SerializationOptions:
    """Represents options for serialization. Overrides ``generatePreview`` and ``returnByValue``."""
    serialization: str
    max_depth: typing.Optional[int] = None
    additional_parameters: typing.Optional[T_JSON_DICT] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['serialization'] = self.serialization
        if self.max_depth is not None:
            json_data['maxDepth'] = self.max_depth
        if self.additional_parameters is not None:
            json_data['additionalParameters'] = self.additional_parameters
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SerializationOptions:
        return cls(serialization=json_obj['serialization'], max_depth=
            json_obj['maxDepth'] if json_obj.get('maxDepth') is not None else
            None, additional_parameters=json_obj['additionalParameters'] if
            json_obj.get('additionalParameters') is not None else None)


@dataclass
class StackTrace:
    """Call frames for assertions or error messages."""
    call_frames: typing.List[CallFrame]
    description: typing.Optional[str] = None
    parent: typing.Optional[StackTrace] = None
    parent_id: typing.Optional[StackTraceId] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['callFrames'] = [i.to_json() for i in self.call_frames]
        if self.description is not None:
            json_data['description'] = self.description
        if self.parent is not None:
            json_data['parent'] = self.parent.to_json()
        if self.parent_id is not None:
            json_data['parentId'] = self.parent_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->StackTrace:
        return cls(call_frames=[CallFrame.from_json(i) for i in json_obj[
            'callFrames']], description=json_obj['description'] if json_obj
            .get('description') is not None else None, parent=StackTrace.
            from_json(json_obj['parent']) if json_obj.get('parent') is not
            None else None, parent_id=StackTraceId.from_json(json_obj[
            'parentId']) if json_obj.get('parentId') is not None else None)


@dataclass
class StackTraceId:
    """If ``debuggerId`` is set stack trace comes from another debugger and can be resolved there. This
allows to track cross-debugger calls. See ``Runtime.StackTrace`` and ``Debugger.paused`` for usages."""
    id_: str
    debugger_id: typing.Optional[UniqueDebuggerId] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['id'] = self.id_
        if self.debugger_id is not None:
            json_data['debuggerId'] = self.debugger_id.to_json()
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->StackTraceId:
        return cls(id_=json_obj['id'], debugger_id=UniqueDebuggerId.
            from_json(json_obj['debuggerId']) if json_obj.get('debuggerId')
             is not None else None)


class ExecutionContextId(int):
    """Id of an execution context.

Represents the CDP type 'Runtime.ExecutionContextId'."""

    def to_json(self) ->int:
        return self

    @classmethod
    def from_json(cls, json: int) ->ExecutionContextId:
        return cls(json)

    def __repr__(self) ->str:
        return 'ExecutionContextId({})'.format(super().__repr__())


class RemoteObjectId(str):
    """Unique object identifier.

Represents the CDP type 'Runtime.RemoteObjectId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->RemoteObjectId:
        return cls(json)

    def __repr__(self) ->str:
        return 'RemoteObjectId({})'.format(super().__repr__())


class ScriptId(str):
    """Unique script identifier.

Represents the CDP type 'Runtime.ScriptId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->ScriptId:
        return cls(json)

    def __repr__(self) ->str:
        return 'ScriptId({})'.format(super().__repr__())


class TimeDelta(float):
    """Number of milliseconds.

Represents the CDP type 'Runtime.TimeDelta'."""

    def to_json(self) ->float:
        return self

    @classmethod
    def from_json(cls, json: float) ->TimeDelta:
        return cls(json)

    def __repr__(self) ->str:
        return 'TimeDelta({})'.format(super().__repr__())


class Timestamp(float):
    """Number of milliseconds since epoch.

Represents the CDP type 'Runtime.Timestamp'."""

    def to_json(self) ->float:
        return self

    @classmethod
    def from_json(cls, json: float) ->Timestamp:
        return cls(json)

    def __repr__(self) ->str:
        return 'Timestamp({})'.format(super().__repr__())


class UniqueDebuggerId(str):
    """Unique identifier of current debugger.

Represents the CDP type 'Runtime.UniqueDebuggerId'.

**EXPERIMENTAL**"""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->UniqueDebuggerId:
        return cls(json)

    def __repr__(self) ->str:
        return 'UniqueDebuggerId({})'.format(super().__repr__())


class UnserializableValue(str):
    """Primitive value which cannot be JSON-stringified. Includes values ``-0``, ``NaN``, ``Infinity``,
``-Infinity``, and bigint literals.

Represents the CDP type 'Runtime.UnserializableValue'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->UnserializableValue:
        return cls(json)

    def __repr__(self) ->str:
        return 'UnserializableValue({})'.format(super().__repr__())


def add_binding(name: str, execution_context_id: typing.Optional[
    ExecutionContextId]=None, execution_context_name: typing.Optional[str]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """If executionContextId is empty, adds binding with the given name on the
global objects of all inspected contexts, including those created later,
bindings survive reloads.
Binding function takes exactly one argument, this argument should be string,
in case of any other input, function throws an exception.
Each binding function call produces Runtime.bindingCalled notification.

:param ...:

:param name:

:param execution_context_id: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If specified, the binding would only be exposed to the specified execution context. If omitted and ``executionContextName`` is not set, the binding is exposed to all execution contexts of the target. This parameter is mutually exclusive with ``executionContextName``. Deprecated in favor of ``executionContextName`` due to an unclear use case and bugs in implementation (crbug.com/1169639). ``executionContextId`` will be removed in the future.

:param execution_context_name: *(Optional)* If specified, the binding is exposed to the executionContext with matching name, even for contexts created after the binding is added. See also ``ExecutionContext.name`` and ``worldName`` parameter to ``Page.addScriptToEvaluateOnNewDocument``. This parameter is mutually exclusive with ``executionContextId``."""
    params_dict: T_JSON_DICT = dict()
    params_dict['name'] = name
    if execution_context_id is not None:
        params_dict['executionContextId'] = execution_context_id.to_json()
    if execution_context_name is not None:
        params_dict['executionContextName'] = execution_context_name
    cmd_dict = {'method': 'Runtime.addBinding', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def await_promise(promise_object_id: RemoteObjectId, return_by_value:
    typing.Optional[bool]=None, generate_preview: typing.Optional[bool]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[
    RemoteObject, typing.Optional[ExceptionDetails]]]:
    """Add handler to promise with given promise object id.

:param ...:

:param promise_object_id: Identifier of the promise.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.

:param generate_preview: *(Optional)* Whether preview should be generated for the result.


:returns: A tuple with the following items:

    1. **result** - Promise result. Will contain rejected value if promise was rejected.
    2. **exceptionDetails** - *(Optional)* Exception details if stack strace is available."""
    params_dict: T_JSON_DICT = dict()
    params_dict['promiseObjectId'] = promise_object_id.to_json()
    if return_by_value is not None:
        params_dict['returnByValue'] = return_by_value
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    cmd_dict = {'method': 'Runtime.awaitPromise', 'params': params_dict}
    json_result = yield cmd_dict
    return RemoteObject.from_json(json_result['result']
        ), ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def call_function_on(function_declaration: str, object_id: typing.Optional[
    RemoteObjectId]=None, arguments: typing.Optional[typing.List[
    CallArgument]]=None, silent: typing.Optional[bool]=None,
    return_by_value: typing.Optional[bool]=None, generate_preview: typing.
    Optional[bool]=None, user_gesture: typing.Optional[bool]=None,
    await_promise: typing.Optional[bool]=None, execution_context_id: typing
    .Optional[ExecutionContextId]=None, object_group: typing.Optional[str]=
    None, throw_on_side_effect: typing.Optional[bool]=None,
    unique_context_id: typing.Optional[str]=None, serialization_options:
    typing.Optional[SerializationOptions]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.Tuple[RemoteObject, typing.Optional[
    ExceptionDetails]]]:
    """Calls function with given declaration on the given object. Object group of the result is
inherited from the target object.

:param ...:

:param function_declaration: Declaration of the function to call.

:param object_id: *(Optional)* Identifier of the object to call function on. Either objectId or executionContextId should be specified.

:param arguments: *(Optional)* Call arguments. All call arguments must belong to the same JavaScript world as the target object.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value. Can be overriden by ``serializationOptions``.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.

:param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.

:param execution_context_id: *(Optional)* Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.

:param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation.

:param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to call function on. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental function call in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ``executionContextId``.

:param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ``generatePreview`` and ``returnByValue``.


:returns: A tuple with the following items:

    1. **result** - Call result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['functionDeclaration'] = function_declaration
    if object_id is not None:
        params_dict['objectId'] = object_id.to_json()
    if arguments is not None:
        params_dict['arguments'] = [i.to_json() for i in arguments]
    if silent is not None:
        params_dict['silent'] = silent
    if return_by_value is not None:
        params_dict['returnByValue'] = return_by_value
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    if user_gesture is not None:
        params_dict['userGesture'] = user_gesture
    if await_promise is not None:
        params_dict['awaitPromise'] = await_promise
    if execution_context_id is not None:
        params_dict['executionContextId'] = execution_context_id.to_json()
    if object_group is not None:
        params_dict['objectGroup'] = object_group
    if throw_on_side_effect is not None:
        params_dict['throwOnSideEffect'] = throw_on_side_effect
    if unique_context_id is not None:
        params_dict['uniqueContextId'] = unique_context_id
    if serialization_options is not None:
        params_dict['serializationOptions'] = serialization_options.to_json()
    cmd_dict = {'method': 'Runtime.callFunctionOn', 'params': params_dict}
    json_result = yield cmd_dict
    return RemoteObject.from_json(json_result['result']
        ), ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def compile_script(expression: str, source_url: str, persist_script: bool,
    execution_context_id: typing.Optional[ExecutionContextId]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.
    Optional[ScriptId], typing.Optional[ExceptionDetails]]]:
    """Compiles expression.

:param ...:

:param expression: Expression to compile.

:param source_url: Source url to be set for the script.

:param persist_script: Specifies whether the compiled script should be persisted.

:param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.


:returns: A tuple with the following items:

    1. **scriptId** - *(Optional)* Id of the script.
    2. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['expression'] = expression
    params_dict['sourceURL'] = source_url
    params_dict['persistScript'] = persist_script
    if execution_context_id is not None:
        params_dict['executionContextId'] = execution_context_id.to_json()
    cmd_dict = {'method': 'Runtime.compileScript', 'params': params_dict}
    json_result = yield cmd_dict
    return ScriptId.from_json(json_result['scriptId']) if json_result.get(
        'scriptId') is not None else None, ExceptionDetails.from_json(
        json_result['exceptionDetails']) if json_result.get('exceptionDetails'
        ) is not None else None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables reporting of execution contexts creation."""
    cmd_dict = {'method': 'Runtime.disable'}
    json_result = yield cmd_dict
    return None


def discard_console_entries() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None
    ]:
    """Discards collected exceptions and console API calls."""
    cmd_dict = {'method': 'Runtime.discardConsoleEntries'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables reporting of execution contexts creation by means of ``executionContextCreated`` event.
When the reporting gets enabled the event will be sent immediately for each existing execution
context."""
    cmd_dict = {'method': 'Runtime.enable'}
    json_result = yield cmd_dict
    return None


def evaluate(expression: str, object_group: typing.Optional[str]=None,
    include_command_line_api: typing.Optional[bool]=None, silent: typing.
    Optional[bool]=None, context_id: typing.Optional[ExecutionContextId]=
    None, return_by_value: typing.Optional[bool]=None, generate_preview:
    typing.Optional[bool]=None, user_gesture: typing.Optional[bool]=None,
    await_promise: typing.Optional[bool]=None, throw_on_side_effect: typing
    .Optional[bool]=None, timeout: typing.Optional[TimeDelta]=None,
    disable_breaks: typing.Optional[bool]=None, repl_mode: typing.Optional[
    bool]=None, allow_unsafe_eval_blocked_by_csp: typing.Optional[bool]=
    None, unique_context_id: typing.Optional[str]=None,
    serialization_options: typing.Optional[SerializationOptions]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[
    RemoteObject, typing.Optional[ExceptionDetails]]]:
    """Evaluates expression on global object.

:param ...:

:param expression: Expression to evaluate.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.

:param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param context_id: *(Optional)* Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page. This is mutually exclusive with ``uniqueContextId``, which offers an alternative way to identify the execution context that is more reliable in a multi-process environment.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.

:param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.

:param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation. This implies ``disableBreaks`` below.

:param timeout: **(EXPERIMENTAL)** *(Optional)* Terminate execution after timing out (number of milliseconds).

:param disable_breaks: **(EXPERIMENTAL)** *(Optional)* Disable breakpoints during execution.

:param repl_mode: **(EXPERIMENTAL)** *(Optional)* Setting this flag to true enables ``let`` re-declaration and top-level ``await``. Note that ``let`` variables can only be re-declared if they originate from ``replMode`` themselves.

:param allow_unsafe_eval_blocked_by_csp: **(EXPERIMENTAL)** *(Optional)* The Content Security Policy (CSP) for the target might block 'unsafe-eval' which includes eval(), Function(), setTimeout() and setInterval() when called with non-callable arguments. This flag bypasses CSP for this evaluation and allows unsafe-eval. Defaults to true.

:param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to evaluate in. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental evaluation of the expression in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ``contextId``.

:param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ``generatePreview`` and ``returnByValue``.


:returns: A tuple with the following items:

    1. **result** - Evaluation result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['expression'] = expression
    if object_group is not None:
        params_dict['objectGroup'] = object_group
    if include_command_line_api is not None:
        params_dict['includeCommandLineAPI'] = include_command_line_api
    if silent is not None:
        params_dict['silent'] = silent
    if context_id is not None:
        params_dict['contextId'] = context_id.to_json()
    if return_by_value is not None:
        params_dict['returnByValue'] = return_by_value
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    if user_gesture is not None:
        params_dict['userGesture'] = user_gesture
    if await_promise is not None:
        params_dict['awaitPromise'] = await_promise
    if throw_on_side_effect is not None:
        params_dict['throwOnSideEffect'] = throw_on_side_effect
    if timeout is not None:
        params_dict['timeout'] = timeout.to_json()
    if disable_breaks is not None:
        params_dict['disableBreaks'] = disable_breaks
    if repl_mode is not None:
        params_dict['replMode'] = repl_mode
    if allow_unsafe_eval_blocked_by_csp is not None:
        params_dict['allowUnsafeEvalBlockedByCSP'
            ] = allow_unsafe_eval_blocked_by_csp
    if unique_context_id is not None:
        params_dict['uniqueContextId'] = unique_context_id
    if serialization_options is not None:
        params_dict['serializationOptions'] = serialization_options.to_json()
    cmd_dict = {'method': 'Runtime.evaluate', 'params': params_dict}
    json_result = yield cmd_dict
    return RemoteObject.from_json(json_result['result']
        ), ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def get_exception_details(error_object_id: RemoteObjectId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, typing.Optional[ExceptionDetails]]:
    """This method tries to lookup and populate exception details for a
JavaScript Error object.
Note that the stackTrace portion of the resulting exceptionDetails will
only be populated if the Runtime domain was enabled at the time when the
Error was thrown.

**EXPERIMENTAL**

:param ...:

:param error_object_id: The error object for which to resolve the exception details.


:returns: *(Optional)*"""
    params_dict: T_JSON_DICT = dict()
    params_dict['errorObjectId'] = error_object_id.to_json()
    cmd_dict = {'method': 'Runtime.getExceptionDetails', 'params': params_dict}
    json_result = yield cmd_dict
    return ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def get_heap_usage() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.
    Tuple[float, float, float, float]]:
    """Returns the JavaScript heap usage.
It is the total usage of the corresponding isolate not scoped to a particular Runtime.

**EXPERIMENTAL**


:returns: A tuple with the following items:

    1. **usedSize** - Used JavaScript heap size in bytes.
    2. **totalSize** - Allocated JavaScript heap size in bytes.
    3. **embedderHeapUsedSize** - Used size in bytes in the embedder's garbage-collected heap.
    4. **backingStorageSize** - Size in bytes of backing storage for array buffers and external strings."""
    cmd_dict = {'method': 'Runtime.getHeapUsage'}
    json_result = yield cmd_dict
    return json_result['usedSize'], json_result['totalSize'], json_result[
        'embedderHeapUsedSize'], json_result['backingStorageSize']


def get_isolate_id() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:
    """Returns the isolate id.

**EXPERIMENTAL**


:returns: The isolate id."""
    cmd_dict = {'method': 'Runtime.getIsolateId'}
    json_result = yield cmd_dict
    return json_result['id']


def get_properties(object_id: RemoteObjectId, own_properties: typing.
    Optional[bool]=None, accessor_properties_only: typing.Optional[bool]=
    None, generate_preview: typing.Optional[bool]=None,
    non_indexed_properties_only: typing.Optional[bool]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List
    [PropertyDescriptor], typing.Optional[typing.List[
    InternalPropertyDescriptor]], typing.Optional[typing.List[
    PrivatePropertyDescriptor]], typing.Optional[ExceptionDetails]]]:
    """Returns properties of a given object. Object group of the result is inherited from the target
object.

:param ...:

:param object_id: Identifier of the object to return properties for.

:param own_properties: *(Optional)* If true, returns properties belonging only to the element itself, not to its prototype chain.

:param accessor_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.

:param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the results.

:param non_indexed_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns non-indexed properties only.


:returns: A tuple with the following items:

    1. **result** - Object properties.
    2. **internalProperties** - *(Optional)* Internal object properties (only of the element itself).
    3. **privateProperties** - *(Optional)* Object private properties.
    4. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['objectId'] = object_id.to_json()
    if own_properties is not None:
        params_dict['ownProperties'] = own_properties
    if accessor_properties_only is not None:
        params_dict['accessorPropertiesOnly'] = accessor_properties_only
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    if non_indexed_properties_only is not None:
        params_dict['nonIndexedPropertiesOnly'] = non_indexed_properties_only
    cmd_dict = {'method': 'Runtime.getProperties', 'params': params_dict}
    json_result = yield cmd_dict
    return [PropertyDescriptor.from_json(i) for i in json_result['result']], [
        InternalPropertyDescriptor.from_json(i) for i in json_result[
        'internalProperties']] if json_result.get('internalProperties'
        ) is not None else None, [PrivatePropertyDescriptor.from_json(i) for
        i in json_result['privateProperties']] if json_result.get(
        'privateProperties') is not None else None, ExceptionDetails.from_json(
        json_result['exceptionDetails']) if json_result.get('exceptionDetails'
        ) is not None else None


def global_lexical_scope_names(execution_context_id: typing.Optional[
    ExecutionContextId]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    typing.List[str]]:
    """Returns all let, const and class variables from global scope.

:param ...:

:param execution_context_id: *(Optional)* Specifies in which execution context to lookup global scope variables.


:returns:"""
    params_dict: T_JSON_DICT = dict()
    if execution_context_id is not None:
        params_dict['executionContextId'] = execution_context_id.to_json()
    cmd_dict = {'method': 'Runtime.globalLexicalScopeNames', 'params':
        params_dict}
    json_result = yield cmd_dict
    return [i for i in json_result['names']]


def query_objects(prototype_object_id: RemoteObjectId, object_group: typing
    .Optional[str]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    RemoteObject]:
    """:param ...:

:param prototype_object_id: Identifier of the prototype to return objects for.

:param object_group: *(Optional)* Symbolic group name that can be used to release the results.


:returns: Array with objects."""
    params_dict: T_JSON_DICT = dict()
    params_dict['prototypeObjectId'] = prototype_object_id.to_json()
    if object_group is not None:
        params_dict['objectGroup'] = object_group
    cmd_dict = {'method': 'Runtime.queryObjects', 'params': params_dict}
    json_result = yield cmd_dict
    return RemoteObject.from_json(json_result['objects'])


def release_object(object_id: RemoteObjectId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Releases remote object with given id.

:param ...:

:param object_id: Identifier of the object to release."""
    params_dict: T_JSON_DICT = dict()
    params_dict['objectId'] = object_id.to_json()
    cmd_dict = {'method': 'Runtime.releaseObject', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def release_object_group(object_group: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Releases all remote objects that belong to a given group.

:param ...:

:param object_group: Symbolic object group name."""
    params_dict: T_JSON_DICT = dict()
    params_dict['objectGroup'] = object_group
    cmd_dict = {'method': 'Runtime.releaseObjectGroup', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def remove_binding(name: str) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None
    ]:
    """This method does not remove binding function from global object but
unsubscribes current runtime agent from Runtime.bindingCalled notifications.

:param ...:

:param name:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['name'] = name
    cmd_dict = {'method': 'Runtime.removeBinding', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def run_if_waiting_for_debugger() ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Tells inspected instance to run if it was waiting for debugger to attach."""
    cmd_dict = {'method': 'Runtime.runIfWaitingForDebugger'}
    json_result = yield cmd_dict
    return None


def run_script(script_id: ScriptId, execution_context_id: typing.Optional[
    ExecutionContextId]=None, object_group: typing.Optional[str]=None,
    silent: typing.Optional[bool]=None, include_command_line_api: typing.
    Optional[bool]=None, return_by_value: typing.Optional[bool]=None,
    generate_preview: typing.Optional[bool]=None, await_promise: typing.
    Optional[bool]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]]]:
    """Runs script with given id in a given context.

:param ...:

:param script_id: Id of the script to run.

:param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.

:param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.

:param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ``setPauseOnException`` state.

:param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.

:param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value.

:param generate_preview: *(Optional)* Whether preview should be generated for the result.

:param await_promise: *(Optional)* Whether execution should ``await`` for resulting value and return once awaited promise is resolved.


:returns: A tuple with the following items:

    1. **result** - Run result.
    2. **exceptionDetails** - *(Optional)* Exception details."""
    params_dict: T_JSON_DICT = dict()
    params_dict['scriptId'] = script_id.to_json()
    if execution_context_id is not None:
        params_dict['executionContextId'] = execution_context_id.to_json()
    if object_group is not None:
        params_dict['objectGroup'] = object_group
    if silent is not None:
        params_dict['silent'] = silent
    if include_command_line_api is not None:
        params_dict['includeCommandLineAPI'] = include_command_line_api
    if return_by_value is not None:
        params_dict['returnByValue'] = return_by_value
    if generate_preview is not None:
        params_dict['generatePreview'] = generate_preview
    if await_promise is not None:
        params_dict['awaitPromise'] = await_promise
    cmd_dict = {'method': 'Runtime.runScript', 'params': params_dict}
    json_result = yield cmd_dict
    return RemoteObject.from_json(json_result['result']
        ), ExceptionDetails.from_json(json_result['exceptionDetails']
        ) if json_result.get('exceptionDetails') is not None else None


def set_async_call_stack_depth(max_depth: int) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Enables or disables async call stacks tracking.

Redirects to command 'Debugger'.

:param ...:

:param max_depth: Maximum depth of async call stacks. Setting to ``0`` will effectively disable collecting async call stacks (default)."""
    params_dict: T_JSON_DICT = dict()
    params_dict['maxDepth'] = max_depth
    cmd_dict = {'method': 'Runtime.setAsyncCallStackDepth', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def set_custom_object_formatter_enabled(enabled: bool) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """**EXPERIMENTAL**


:param ...:

:param enabled:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['enabled'] = enabled
    cmd_dict = {'method': 'Runtime.setCustomObjectFormatterEnabled',
        'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_max_call_stack_size_to_capture(size: int) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """**EXPERIMENTAL**


:param ...:

:param size:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['size'] = size
    cmd_dict = {'method': 'Runtime.setMaxCallStackSizeToCapture', 'params':
        params_dict}
    json_result = yield cmd_dict
    return None


def terminate_execution() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Terminate current or next JavaScript execution.
Will cancel the termination when the outer-most script execution ends.

**EXPERIMENTAL**"""
    cmd_dict = {'method': 'Runtime.terminateExecution'}
    json_result = yield cmd_dict
    return None


@event_class('Runtime.bindingCalled')
@dataclass
class BindingCalled:
    """**EXPERIMENTAL**

Notification is issued every time when binding is called."""
    name: str
    payload: str
    execution_context_id: ExecutionContextId

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->BindingCalled:
        return cls(name=json_obj['name'], payload=json_obj['payload'],
            execution_context_id=ExecutionContextId.from_json(json_obj[
            'executionContextId']))


@event_class('Runtime.consoleAPICalled')
@dataclass
class ConsoleAPICalled:
    """Issued when console API was called."""
    type_: str
    args: typing.List[RemoteObject]
    execution_context_id: ExecutionContextId
    timestamp: Timestamp
    stack_trace: typing.Optional[StackTrace] = None
    context: typing.Optional[str] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ConsoleAPICalled:
        return cls(type_=json_obj['type'], args=[RemoteObject.from_json(i) for
            i in json_obj['args']], execution_context_id=ExecutionContextId
            .from_json(json_obj['executionContextId']), timestamp=Timestamp
            .from_json(json_obj['timestamp']), stack_trace=StackTrace.
            from_json(json_obj['stackTrace']) if json_obj.get('stackTrace')
             is not None else None, context=json_obj['context'] if json_obj
            .get('context') is not None else None)


@event_class('Runtime.exceptionRevoked')
@dataclass
class ExceptionRevoked:
    """Issued when unhandled exception was revoked."""
    reason: str
    exception_id: int

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExceptionRevoked:
        return cls(reason=json_obj['reason'], exception_id=json_obj[
            'exceptionId'])


@event_class('Runtime.exceptionThrown')
@dataclass
class ExceptionThrown:
    """Issued when exception was thrown and unhandled."""
    timestamp: Timestamp
    exception_details: ExceptionDetails

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExceptionThrown:
        return cls(timestamp=Timestamp.from_json(json_obj['timestamp']),
            exception_details=ExceptionDetails.from_json(json_obj[
            'exceptionDetails']))


@event_class('Runtime.executionContextCreated')
@dataclass
class ExecutionContextCreated:
    """Issued when new execution context is created."""
    context: ExecutionContextDescription

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExecutionContextCreated:
        return cls(context=ExecutionContextDescription.from_json(json_obj[
            'context']))


@event_class('Runtime.executionContextDestroyed')
@dataclass
class ExecutionContextDestroyed:
    """Issued when execution context is destroyed."""
    execution_context_id: ExecutionContextId
    execution_context_unique_id: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExecutionContextDestroyed:
        return cls(execution_context_id=ExecutionContextId.from_json(
            json_obj['executionContextId']), execution_context_unique_id=
            json_obj['executionContextUniqueId'])


@event_class('Runtime.executionContextsCleared')
@dataclass
class ExecutionContextsCleared:
    """Issued when all executionContexts were cleared in browser"""
    pass

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ExecutionContextsCleared:
        return cls()


@event_class('Runtime.inspectRequested')
@dataclass
class InspectRequested:
    """Issued when object should be inspected (for example, as a result of inspect() command line API
call)."""
    object_: RemoteObject
    hints: T_JSON_DICT
    execution_context_id: typing.Optional[ExecutionContextId] = None

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->InspectRequested:
        return cls(object_=RemoteObject.from_json(json_obj['object']),
            hints=json_obj['hints'], execution_context_id=
            ExecutionContextId.from_json(json_obj['executionContextId']) if
            json_obj.get('executionContextId') is not None else None)
