# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: DeviceAccess (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class PromptDevice:
    """Device information displayed in a user prompt to select a device."""
    id_: DeviceId
    name: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['id'] = self.id_.to_json()
        json_data['name'] = self.name
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PromptDevice:
        return cls(id_=DeviceId.from_json(json_obj['id']), name=json_obj[
            'name'])


class DeviceId(str):
    """A device id.

Represents the CDP type 'DeviceAccess.DeviceId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->DeviceId:
        return cls(json)

    def __repr__(self) ->str:
        return 'DeviceId({})'.format(super().__repr__())


class RequestId(str):
    """Device request id.

Represents the CDP type 'DeviceAccess.RequestId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->RequestId:
        return cls(json)

    def __repr__(self) ->str:
        return 'RequestId({})'.format(super().__repr__())


def cancel_prompt(id_: RequestId) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.

:param ...:

:param id_:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_.to_json()
    cmd_dict = {'method': 'DeviceAccess.cancelPrompt', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disable events in this domain."""
    cmd_dict = {'method': 'DeviceAccess.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enable events in this domain."""
    cmd_dict = {'method': 'DeviceAccess.enable'}
    json_result = yield cmd_dict
    return None


def select_prompt(id_: RequestId, device_id: DeviceId) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Select a device in response to a DeviceAccess.deviceRequestPrompted event.

:param ...:

:param id_:

:param device_id:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['id'] = id_.to_json()
    params_dict['deviceId'] = device_id.to_json()
    cmd_dict = {'method': 'DeviceAccess.selectPrompt', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@event_class('DeviceAccess.deviceRequestPrompted')
@dataclass
class DeviceRequestPrompted:
    """A device request opened a user prompt to select a device. Respond with the
selectPrompt or cancelPrompt command."""
    id_: RequestId
    devices: typing.List[PromptDevice]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->DeviceRequestPrompted:
        return cls(id_=RequestId.from_json(json_obj['id']), devices=[
            PromptDevice.from_json(i) for i in json_obj['devices']])
