# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: PWA (experimental)

This domain allows interacting with the browser to control PWAs."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT
from . import target
None


@dataclass
class FileHandler:
    action: str
    accepts: typing.List[FileHandlerAccept]
    display_name: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['action'] = self.action
        json_data['accepts'] = [i.to_json() for i in self.accepts]
        json_data['displayName'] = self.display_name
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->FileHandler:
        return cls(action=json_obj['action'], accepts=[FileHandlerAccept.
            from_json(i) for i in json_obj['accepts']], display_name=
            json_obj['displayName'])


@dataclass
class FileHandlerAccept:
    """The following types are the replica of
https://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67"""
    media_type: str
    file_extensions: typing.List[str]

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['mediaType'] = self.media_type
        json_data['fileExtensions'] = [i for i in self.file_extensions]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->FileHandlerAccept:
        return cls(media_type=json_obj['mediaType'], file_extensions=[i for
            i in json_obj['fileExtensions']])


class DisplayMode(enum.Enum):
    """If user prefers opening the app in browser or an app window."""
    STANDALONE = 'standalone'
    BROWSER = 'browser'

    @classmethod
    def from_json(cls, json: str) ->DisplayMode:
        return cls(json)

    def to_json(self) ->str:
        return self.value

    def __repr__(self) ->str:
        return '<DisplayMode.{}>'.format(self.value)


def change_app_user_settings(manifest_id: str, link_capturing: typing.
    Optional[bool]=None, display_mode: typing.Optional[DisplayMode]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Changes user settings of the web app identified by its manifestId. If the
app was not installed, this command returns an error. Unset parameters will
be ignored; unrecognized values will cause an error.

Unlike the ones defined in the manifest files of the web apps, these
settings are provided by the browser and controlled by the users, they
impact the way the browser handling the web apps.

See the comment of each parameter.

:param ...:

:param manifest_id:

:param link_capturing: *(Optional)* If user allows the links clicked on by the user in the app's scope, or extended scope if the manifest has scope extensions and the flags ``DesktopPWAsLinkCapturingWithScopeExtensions`` and ``WebAppEnableScopeExtensions`` are enabled.  Note, the API does not support resetting the linkCapturing to the initial value, uninstalling and installing the web app again will reset it.  TODO(crbug.com/339453269): Setting this value on ChromeOS is not supported yet.

:param display_mode: *(Optional)*"""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    if link_capturing is not None:
        params_dict['linkCapturing'] = link_capturing
    if display_mode is not None:
        params_dict['displayMode'] = display_mode.to_json()
    cmd_dict = {'method': 'PWA.changeAppUserSettings', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def get_os_app_state(manifest_id: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, typing.Tuple[int, typing.List[FileHandler]]]:
    """Returns the following OS state for the given manifest id.

:param ...:

:param manifest_id: The id from the webapp's manifest file, commonly it's the url of the site installing the webapp. See https://web.dev/learn/pwa/web-app-manifest.


:returns: A tuple with the following items:

    1. **badgeCount** - 
    2. **fileHandlers** -"""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    cmd_dict = {'method': 'PWA.getOsAppState', 'params': params_dict}
    json_result = yield cmd_dict
    return json_result['badgeCount'], [FileHandler.from_json(i) for i in
        json_result['fileHandlers']]


def install(manifest_id: str, install_url_or_bundle_url: typing.Optional[
    str]=None) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Installs the given manifest identity, optionally using the given install_url
or IWA bundle location.

TODO(crbug.com/337872319) Support IWA to meet the following specific
requirement.
IWA-specific install description: If the manifest_id is isolated-app://,
install_url_or_bundle_url is required, and can be either an http(s) URL or
file:// URL pointing to a signed web bundle (.swbn). The .swbn file's
signing key must correspond to manifest_id. If Chrome is not in IWA dev
mode, the installation will fail, regardless of the state of the allowlist.

:param ...:

:param manifest_id:

:param install_url_or_bundle_url: *(Optional)* The location of the app or bundle overriding the one derived from the manifestId."""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    if install_url_or_bundle_url is not None:
        params_dict['installUrlOrBundleUrl'] = install_url_or_bundle_url
    cmd_dict = {'method': 'PWA.install', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def launch(manifest_id: str, url: typing.Optional[str]=None
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, target.TargetID]:
    """Launches the installed web app, or an url in the same web app instead of the
default start url if it is provided. Returns a page Target.TargetID which
can be used to attach to via Target.attachToTarget or similar APIs.

:param ...:

:param manifest_id:

:param url: *(Optional)*


:returns: ID of the tab target created as a result."""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    if url is not None:
        params_dict['url'] = url
    cmd_dict = {'method': 'PWA.launch', 'params': params_dict}
    json_result = yield cmd_dict
    return target.TargetID.from_json(json_result['targetId'])


def launch_files_in_app(manifest_id: str, files: typing.List[str]
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[target.TargetID]
    ]:
    """Opens one or more local files from an installed web app identified by its
manifestId. The web app needs to have file handlers registered to process
the files. The API returns one or more page Target.TargetIDs which can be
used to attach to via Target.attachToTarget or similar APIs.
If some files in the parameters cannot be handled by the web app, they will
be ignored. If none of the files can be handled, this API returns an error.
If no files are provided as the parameter, this API also returns an error.

According to the definition of the file handlers in the manifest file, one
Target.TargetID may represent a page handling one or more files. The order
of the returned Target.TargetIDs is not guaranteed.

TODO(crbug.com/339454034): Check the existences of the input files.

:param ...:

:param manifest_id:

:param files:


:returns: IDs of the tab targets created as the result."""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    params_dict['files'] = [i for i in files]
    cmd_dict = {'method': 'PWA.launchFilesInApp', 'params': params_dict}
    json_result = yield cmd_dict
    return [target.TargetID.from_json(i) for i in json_result['targetIds']]


def open_current_page_in_app(manifest_id: str) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Opens the current page in its web app identified by the manifest id, needs
to be called on a page target. This function returns immediately without
waiting for the app to finish loading.

:param ...:

:param manifest_id:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    cmd_dict = {'method': 'PWA.openCurrentPageInApp', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def uninstall(manifest_id: str) ->typing.Generator[T_JSON_DICT, T_JSON_DICT,
    None]:
    """Uninstalls the given manifest_id and closes any opened app windows.

:param ...:

:param manifest_id:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['manifestId'] = manifest_id
    cmd_dict = {'method': 'PWA.uninstall', 'params': params_dict}
    json_result = yield cmd_dict
    return None
