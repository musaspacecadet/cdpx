# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Media (experimental)

This domain allows detailed inspection of media elements"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class PlayerError:
    """Corresponds to kMediaError"""
    error_type: str
    code: int
    stack: typing.List[PlayerErrorSourceLocation]
    cause: typing.List[PlayerError]
    data: T_JSON_DICT

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['errorType'] = self.error_type
        json_data['code'] = self.code
        json_data['stack'] = [i.to_json() for i in self.stack]
        json_data['cause'] = [i.to_json() for i in self.cause]
        json_data['data'] = self.data
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerError:
        return cls(error_type=json_obj['errorType'], code=json_obj['code'],
            stack=[PlayerErrorSourceLocation.from_json(i) for i in json_obj
            ['stack']], cause=[PlayerError.from_json(i) for i in json_obj[
            'cause']], data=json_obj['data'])


@dataclass
class PlayerErrorSourceLocation:
    """Represents logged source line numbers reported in an error.
NOTE: file and line are from chromium c++ implementation code, not js."""
    file: str
    line: int

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['file'] = self.file
        json_data['line'] = self.line
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerErrorSourceLocation:
        return cls(file=json_obj['file'], line=json_obj['line'])


@dataclass
class PlayerEvent:
    """Corresponds to kMediaEventTriggered"""
    timestamp: Timestamp
    value: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['timestamp'] = self.timestamp.to_json()
        json_data['value'] = self.value
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerEvent:
        return cls(timestamp=Timestamp.from_json(json_obj['timestamp']),
            value=json_obj['value'])


@dataclass
class PlayerMessage:
    """Have one type per entry in MediaLogRecord::Type
Corresponds to kMessage"""
    level: str
    message: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['level'] = self.level
        json_data['message'] = self.message
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerMessage:
        return cls(level=json_obj['level'], message=json_obj['message'])


@dataclass
class PlayerProperty:
    """Corresponds to kMediaPropertyChange"""
    name: str
    value: str

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['value'] = self.value
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerProperty:
        return cls(name=json_obj['name'], value=json_obj['value'])


class PlayerId(str):
    """Players will get an ID that is unique within the agent context.

Represents the CDP type 'Media.PlayerId'."""

    def to_json(self) ->str:
        return self

    @classmethod
    def from_json(cls, json: str) ->PlayerId:
        return cls(json)

    def __repr__(self) ->str:
        return 'PlayerId({})'.format(super().__repr__())


class Timestamp(float):
    """Represents the CDP type 'Media.Timestamp'."""

    def to_json(self) ->float:
        return self

    @classmethod
    def from_json(cls, json: float) ->Timestamp:
        return cls(json)

    def __repr__(self) ->str:
        return 'Timestamp({})'.format(super().__repr__())


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables the Media domain."""
    cmd_dict = {'method': 'Media.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables the Media domain"""
    cmd_dict = {'method': 'Media.enable'}
    json_result = yield cmd_dict
    return None


@event_class('Media.playerErrorsRaised')
@dataclass
class PlayerErrorsRaised:
    """Send a list of any errors that need to be delivered."""
    player_id: PlayerId
    errors: typing.List[PlayerError]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerErrorsRaised:
        return cls(player_id=PlayerId.from_json(json_obj['playerId']),
            errors=[PlayerError.from_json(i) for i in json_obj['errors']])


@event_class('Media.playerEventsAdded')
@dataclass
class PlayerEventsAdded:
    """Send events as a list, allowing them to be batched on the browser for less
congestion. If batched, events must ALWAYS be in chronological order."""
    player_id: PlayerId
    events: typing.List[PlayerEvent]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerEventsAdded:
        return cls(player_id=PlayerId.from_json(json_obj['playerId']),
            events=[PlayerEvent.from_json(i) for i in json_obj['events']])


@event_class('Media.playerMessagesLogged')
@dataclass
class PlayerMessagesLogged:
    """Send a list of any messages that need to be delivered."""
    player_id: PlayerId
    messages: typing.List[PlayerMessage]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerMessagesLogged:
        return cls(player_id=PlayerId.from_json(json_obj['playerId']),
            messages=[PlayerMessage.from_json(i) for i in json_obj['messages']]
            )


@event_class('Media.playerPropertiesChanged')
@dataclass
class PlayerPropertiesChanged:
    """This can be called multiple times, and can be used to set / override /
remove player properties. A null propValue indicates removal."""
    player_id: PlayerId
    properties: typing.List[PlayerProperty]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayerPropertiesChanged:
        return cls(player_id=PlayerId.from_json(json_obj['playerId']),
            properties=[PlayerProperty.from_json(i) for i in json_obj[
            'properties']])


@event_class('Media.playersCreated')
@dataclass
class PlayersCreated:
    """Called whenever a player is created, or when a new agent joins and receives
a list of active players. If an agent is restored, it will receive the full
list of player ids and all events again."""
    players: typing.List[PlayerId]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->PlayersCreated:
        return cls(players=[PlayerId.from_json(i) for i in json_obj['players']]
            )
