# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Console (deprecated)

This domain is deprecated - use Runtime or Log instead."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from deprecated.sphinx import deprecated
from . import runtime
None


@dataclass
class ConsoleMessage:
    """Console message."""
    source: str
    level: str
    text: str
    url: typing.Optional[str] = None
    line: typing.Optional[int] = None
    column: typing.Optional[int] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['source'] = self.source
        json_data['level'] = self.level
        json_data['text'] = self.text
        if self.url is not None:
            json_data['url'] = self.url
        if self.line is not None:
            json_data['line'] = self.line
        if self.column is not None:
            json_data['column'] = self.column
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ConsoleMessage:
        return cls(source=json_obj['source'], level=json_obj['level'], text
            =json_obj['text'], url=json_obj['url'] if json_obj.get('url')
             is not None else None, line=json_obj['line'] if json_obj.get(
            'line') is not None else None, column=json_obj['column'] if 
            json_obj.get('column') is not None else None)


def clear_messages() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Does nothing."""
    cmd_dict = {'method': 'Console.clearMessages'}
    json_result = yield cmd_dict
    return None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables console domain, prevents further console messages from being reported to the client."""
    cmd_dict = {'method': 'Console.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables console domain, sends the messages collected so far to the client by means of the
``messageAdded`` notification."""
    cmd_dict = {'method': 'Console.enable'}
    json_result = yield cmd_dict
    return None


@event_class('Console.messageAdded')
@dataclass
class MessageAdded:
    """Issued when new console message is added."""
    message: ConsoleMessage

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->MessageAdded:
        return cls(message=ConsoleMessage.from_json(json_obj['message']))
