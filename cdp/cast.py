# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Cast (experimental)

A domain for interacting with Cast, Presentation API, and Remote Playback API
functionalities."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


@dataclass
class Sink:
    name: str
    id_: str
    session: typing.Optional[str] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['id'] = self.id_
        if self.session is not None:
            json_data['session'] = self.session
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Sink:
        return cls(name=json_obj['name'], id_=json_obj['id'], session=
            json_obj['session'] if json_obj.get('session') is not None else
            None)


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Stops observing for sinks and issues."""
    cmd_dict = {'method': 'Cast.disable'}
    json_result = yield cmd_dict
    return None


def enable(presentation_url: typing.Optional[str]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Starts observing for sinks that can be used for tab mirroring, and if set,
sinks compatible with |presentationUrl| as well. When sinks are found, a
|sinksUpdated| event is fired.
Also starts observing for issue messages. When an issue is added or removed,
an |issueUpdated| event is fired.

:param ...:

:param presentation_url: *(Optional)*"""
    params_dict: T_JSON_DICT = dict()
    if presentation_url is not None:
        params_dict['presentationUrl'] = presentation_url
    cmd_dict = {'method': 'Cast.enable', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def set_sink_to_use(sink_name: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Sets a sink to be used when the web page requests the browser to choose a
sink via Presentation API, Remote Playback API, or Cast SDK.

:param ...:

:param sink_name:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['sinkName'] = sink_name
    cmd_dict = {'method': 'Cast.setSinkToUse', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def start_desktop_mirroring(sink_name: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Starts mirroring the desktop to the sink.

:param ...:

:param sink_name:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['sinkName'] = sink_name
    cmd_dict = {'method': 'Cast.startDesktopMirroring', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def start_tab_mirroring(sink_name: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Starts mirroring the tab to the sink.

:param ...:

:param sink_name:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['sinkName'] = sink_name
    cmd_dict = {'method': 'Cast.startTabMirroring', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def stop_casting(sink_name: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Stops the active Cast session on the sink.

:param ...:

:param sink_name:"""
    params_dict: T_JSON_DICT = dict()
    params_dict['sinkName'] = sink_name
    cmd_dict = {'method': 'Cast.stopCasting', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@event_class('Cast.issueUpdated')
@dataclass
class IssueUpdated:
    """This is fired whenever the outstanding issue/error message changes.
|issueMessage| is empty if there is no issue."""
    issue_message: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->IssueUpdated:
        return cls(issue_message=json_obj['issueMessage'])


@event_class('Cast.sinksUpdated')
@dataclass
class SinksUpdated:
    """This is fired whenever the list of available sinks changes. A sink is a
device or a software surface that you can cast to."""
    sinks: typing.List[Sink]

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->SinksUpdated:
        return cls(sinks=[Sink.from_json(i) for i in json_obj['sinks']])
