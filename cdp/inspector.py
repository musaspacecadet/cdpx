# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Inspector (experimental)"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables inspector domain notifications."""
    cmd_dict = {'method': 'Inspector.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables inspector domain notifications."""
    cmd_dict = {'method': 'Inspector.enable'}
    json_result = yield cmd_dict
    return None


@event_class('Inspector.detached')
@dataclass
class Detached:
    """Fired when remote debugging connection is about to be terminated. Contains detach reason."""
    reason: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Detached:
        return cls(reason=json_obj['reason'])


@event_class('Inspector.targetCrashed')
@dataclass
class TargetCrashed:
    """Fired when debugging target has crashed"""
    pass

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->TargetCrashed:
        return cls()


@event_class('Inspector.targetReloadedAfterCrash')
@dataclass
class TargetReloadedAfterCrash:
    """Fired when debugging target has reloaded after crash"""
    pass

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->TargetReloadedAfterCrash:
        return cls()
