# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Performance"""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from deprecated.sphinx import deprecated
None


@dataclass
class Metric:
    """Run-time execution metric."""
    name: str
    value: float

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['value'] = self.value
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Metric:
        return cls(name=json_obj['name'], value=json_obj['value'])


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disable collecting and reporting metrics."""
    cmd_dict = {'method': 'Performance.disable'}
    json_result = yield cmd_dict
    return None


def enable(time_domain: typing.Optional[str]=None) ->typing.Generator[
    T_JSON_DICT, T_JSON_DICT, None]:
    """Enable collecting and reporting metrics.

:param ...:

:param time_domain: *(Optional)* Time domain to use for collecting and reporting duration metrics."""
    params_dict: T_JSON_DICT = dict()
    if time_domain is not None:
        params_dict['timeDomain'] = time_domain
    cmd_dict = {'method': 'Performance.enable', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def get_metrics() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[
    Metric]]:
    """Retrieve current values of run-time metrics.


:returns: Current values for run-time metrics."""
    cmd_dict = {'method': 'Performance.getMetrics'}
    json_result = yield cmd_dict
    return [Metric.from_json(i) for i in json_result['metrics']]


@deprecated(version='1.3')
def set_time_domain(time_domain: str) ->typing.Generator[T_JSON_DICT,
    T_JSON_DICT, None]:
    """Sets time domain to use for collecting and reporting duration metrics.
Note that this must be called before enabling metrics collection. Calling
this method while metrics collection is enabled returns an error.

.. deprecated:: 1.3

**EXPERIMENTAL**

:param ...:

:param time_domain: Time domain"""
    params_dict: T_JSON_DICT = dict()
    params_dict['timeDomain'] = time_domain
    cmd_dict = {'method': 'Performance.setTimeDomain', 'params': params_dict}
    json_result = yield cmd_dict
    return None


@event_class('Performance.metrics')
@dataclass
class Metrics:
    """Current values of the metrics."""
    metrics: typing.List[Metric]
    title: str

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->Metrics:
        return cls(metrics=[Metric.from_json(i) for i in json_obj['metrics'
            ]], title=json_obj['title'])
