# # DO NOT EDIT THIS FILE!
# #
# # This file is generated from the CDP specification using AST. If you need to make
# # changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
"""CDP domain: Log

Provides access to log entries."""
import typing
import enum
from dataclasses import dataclass
from .util import T_JSON_DICT, event_class
from . import network
from . import runtime
None


@dataclass
class LogEntry:
    """Log entry."""
    source: str
    level: str
    text: str
    timestamp: runtime.Timestamp
    category: typing.Optional[str] = None
    url: typing.Optional[str] = None
    line_number: typing.Optional[int] = None
    stack_trace: typing.Optional[runtime.StackTrace] = None
    network_request_id: typing.Optional[network.RequestId] = None
    worker_id: typing.Optional[str] = None
    args: typing.Optional[typing.List[runtime.RemoteObject]] = None

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['source'] = self.source
        json_data['level'] = self.level
        json_data['text'] = self.text
        json_data['timestamp'] = self.timestamp.to_json()
        if self.category is not None:
            json_data['category'] = self.category
        if self.url is not None:
            json_data['url'] = self.url
        if self.line_number is not None:
            json_data['lineNumber'] = self.line_number
        if self.stack_trace is not None:
            json_data['stackTrace'] = self.stack_trace.to_json()
        if self.network_request_id is not None:
            json_data['networkRequestId'] = self.network_request_id.to_json()
        if self.worker_id is not None:
            json_data['workerId'] = self.worker_id
        if self.args is not None:
            json_data['args'] = [i.to_json() for i in self.args]
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->LogEntry:
        return cls(source=json_obj['source'], level=json_obj['level'], text
            =json_obj['text'], timestamp=runtime.Timestamp.from_json(
            json_obj['timestamp']), category=json_obj['category'] if 
            json_obj.get('category') is not None else None, url=json_obj[
            'url'] if json_obj.get('url') is not None else None,
            line_number=json_obj['lineNumber'] if json_obj.get('lineNumber'
            ) is not None else None, stack_trace=runtime.StackTrace.
            from_json(json_obj['stackTrace']) if json_obj.get('stackTrace')
             is not None else None, network_request_id=network.RequestId.
            from_json(json_obj['networkRequestId']) if json_obj.get(
            'networkRequestId') is not None else None, worker_id=json_obj[
            'workerId'] if json_obj.get('workerId') is not None else None,
            args=[runtime.RemoteObject.from_json(i) for i in json_obj[
            'args']] if json_obj.get('args') is not None else None)


@dataclass
class ViolationSetting:
    """Violation configuration setting."""
    name: str
    threshold: float

    def to_json(self) ->T_JSON_DICT:
        json_data: T_JSON_DICT = dict()
        json_data['name'] = self.name
        json_data['threshold'] = self.threshold
        return json_data

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->ViolationSetting:
        return cls(name=json_obj['name'], threshold=json_obj['threshold'])


def clear() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Clears the log."""
    cmd_dict = {'method': 'Log.clear'}
    json_result = yield cmd_dict
    return None


def disable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Disables log domain, prevents further log entries from being reported to the client."""
    cmd_dict = {'method': 'Log.disable'}
    json_result = yield cmd_dict
    return None


def enable() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """Enables log domain, sends the entries collected so far to the client by means of the
``entryAdded`` notification."""
    cmd_dict = {'method': 'Log.enable'}
    json_result = yield cmd_dict
    return None


def start_violations_report(config: typing.List[ViolationSetting]
    ) ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """start violation reporting.

:param ...:

:param config: Configuration for violations."""
    params_dict: T_JSON_DICT = dict()
    params_dict['config'] = [i.to_json() for i in config]
    cmd_dict = {'method': 'Log.startViolationsReport', 'params': params_dict}
    json_result = yield cmd_dict
    return None


def stop_violations_report() ->typing.Generator[T_JSON_DICT, T_JSON_DICT, None
    ]:
    """Stop violation reporting."""
    cmd_dict = {'method': 'Log.stopViolationsReport'}
    json_result = yield cmd_dict
    return None


@event_class('Log.entryAdded')
@dataclass
class EntryAdded:
    """Issued when new message was logged."""
    entry: LogEntry

    @classmethod
    def from_json(cls, json_obj: T_JSON_DICT) ->EntryAdded:
        return cls(entry=LogEntry.from_json(json_obj['entry']))
